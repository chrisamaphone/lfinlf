
extend-eordered : {A}
                     eordered G
                  -> {I}
                     ({x:etm} eisvar x I -> eordered (econs G x A))
                  -> type.
%mode extend-eordered +X1 +X2 -X3 -X4.

- : extend-eordered _ eordered/nil
        0 ([x] [d] eordered/cons (ebounded/nil d)).

- : extend-eordered _ (eordered/cons (ebounded/nil (DeisvarY : eisvar Y I)))
        (s I) 
        ([x] [d] eordered/cons 
            (ebounded/cons 
                (ebounded/nil DeisvarY) 
                (eprecedes/i Dlt d DeisvarY)))
     <- lt-succ I Dlt.

- : extend-eordered _
        (eordered/cons 
            (ebounded/cons D1 (eprecedes/i D2 (DeisvarY:eisvar Y I) D3)))
        (s I) 
        ([x] [d] eordered/cons
          (ebounded/cons 
              (ebounded/cons D1 (eprecedes/i D2 (DeisvarY:eisvar Y I) D3))
            (eprecedes/i Dlt d DeisvarY)))
     <- lt-succ I Dlt.

%worlds (ecsig | easig | evar | eovar) (extend-eordered _ _ _ _).
%total {} (extend-eordered _ _ _ _).

eisvar-fun : eisvar X I -> eisvar X J -> nat-eq I J -> type.
%mode eisvar-fun +X1 +X2 -X3.

- : eisvar-fun D D nat-eq/i.

%worlds (ecsig | easig | evar | eovar) (eisvar-fun _ _ _).
%total {} (eisvar-fun _ _ _).

eprecedes-trans : eprecedes X Y -> eprecedes Y Z -> eprecedes X Z -> type.
%mode eprecedes-trans +X1 +X2 -X3.

- : eprecedes-trans
     (eprecedes/i DltIJ (DisvarY : eisvar Y J) (DisvarX : eisvar X I))
     (eprecedes/i DltJ'K (DisvarZ : eisvar Z K) (DisvarY' : eisvar Y J'))
        (eprecedes/i DltIK DisvarZ DisvarX)
     <- eisvar-fun DisvarY DisvarY' (Deq : nat-eq J J')
     <- lt-resp nat-eq/i Deq DltIJ DltIJ'
     <- lt-trans DltIJ' DltJ'K DltIK.

%worlds (ecsig | easig | evar | eovar) (eprecedes-trans _ _ _).
%total {} (eprecedes-trans _ _ _).


eprecedes-antisymm : eprecedes X X -> false -> type.
%mode eprecedes-antisymm +X1 -X2.

- : eprecedes-antisymm
        (eprecedes/i (Dlt : lt I J) (Disvar' : eisvar X J) (Disvar : eisvar X I))
        Dfalse
     <- eisvar-fun Disvar Disvar' (Deq : nat-eq I J)
     <- lt-resp Deq nat-eq/i Dlt (Dlt' : lt J J)
     <- lt-antisymm Dlt' Dfalse.

%worlds (ecsig | easig | evar | eovar) (eprecedes-antisymm _ _).
%total {} (eprecedes-antisymm _ _).

eordered-cons : eordered (econs G X A) -> eordered G -> type.
%mode eordered-cons +X1 -X2.

-nil    : eordered-cons
              (eordered/cons (ebounded/nil Disvar : ebounded enil X))
              eordered/nil.

-cons   : eordered-cons
              (eordered/cons (ebounded/cons Dbound _))
              (eordered/cons Dbound).

%worlds (ecsig | easig | evar | eovar) (eordered-cons _ _).
%total D (eordered-cons D _).

eordered-append : eappend G1 G2 G -> eordered G
                   -> eordered G1 -> type.
%mode eordered-append +X1 +X2 -X3.

-nil  : eordered-append (eappend/nil) Dord Dord.

-cons : eordered-append (eappend/cons Dapp) Dord Dord1
         <- eordered-cons Dord Dord'
         <- eordered-append Dapp Dord' Dord1.

%worlds (ecsig | easig | evar | ebind | eovar) (eordered-append _ _ _).
%total D (eordered-append D _ _).

strengthen-ebounded : ({x} eisvar x I -> ebounded G Y) 
                       -> ebounded G Y -> type.
%mode strengthen-ebounded +X1 -X2.

- : strengthen-ebounded ([x] [d] ebounded/nil D) (ebounded/nil D).

- : strengthen-ebounded
        ([x] [d] ebounded/cons (Dbound x d) Dprec)
        (ebounded/cons Dbound' Dprec)
     <- strengthen-ebounded Dbound Dbound'.

%worlds (ecsig | easig | evar | ebind | eovar) (strengthen-ebounded _ _).
%total D (strengthen-ebounded D _).

strengthen-eordered : ({x} eisvar x I -> eordered G)
                       -> eordered G -> type.
%mode strengthen-eordered +X1 -X2.

- : strengthen-eordered ([x] [d] eordered/nil) eordered/nil.

- : strengthen-eordered ([x] [d] eordered/cons (Dbound x d : ebounded G X))
        (eordered/cons Dbound')
     <- strengthen-ebounded Dbound
        (Dbound' : ebounded G X).

%worlds (ecsig | easig | evar | ebind | eovar) (strengthen-eordered _ _).
%total D (strengthen-eordered D _).


ebounded-increase-bound : ebounded G X -> eprecedes X Y -> ebounded G Y -> type.
%mode ebounded-increase-bound +X1 +X2 -X3. 

- : ebounded-increase-bound (ebounded/nil _) (eprecedes/i _ D _) 
    (ebounded/nil D).

- : ebounded-increase-bound (ebounded/cons Dbounded Dprecedes) Dprecedes'
        (ebounded/cons Dbounded Dprecedes'')
     <- eprecedes-trans Dprecedes Dprecedes' Dprecedes''.

%worlds (ecsig | easig | evar | eovar) (ebounded-increase-bound _ _ _).
%total {} (ebounded-increase-bound _ _ _).

ebounded-is-ordered : ebounded G X -> eordered G -> type.
%mode ebounded-is-ordered +X1 -X2.

- : ebounded-is-ordered (ebounded/nil _) eordered/nil.
- : ebounded-is-ordered (ebounded/cons D _) (eordered/cons D).

%worlds (ecsig | easig | evar | ebind | eovar) (ebounded-is-ordered _ _).
%total {} (ebounded-is-ordered _ _).

ebounded-is-eordered-strengthen : ({x} eisvar x I -> ebounded G x) 
                                 -> eordered G -> type.
%mode ebounded-is-eordered-strengthen +X1 -X2. 

- : ebounded-is-eordered-strengthen ([x] [d] ebounded/nil d) eordered/nil.
- : ebounded-is-eordered-strengthen 
        ([x] [d] ebounded/cons (D x d) (eprecedes/i Dlt d Deisvar))
        (eordered/cons D')
     <- strengthen-ebounded D D'.

%worlds (ecsig | easig | evar | ebind | eovar) (ebounded-is-eordered-strengthen _ _).
%total {} (ebounded-is-eordered-strengthen _ _).

elookup-bounded-contra : elookup G X A -> ebounded G X -> false -> type.
%mode elookup-bounded-contra +X1 +X2 -X3. 

- : elookup-bounded-contra elookup/hit (ebounded/cons _ Dprec) Dfalse
     <- eprecedes-antisymm Dprec Dfalse.

- : elookup-bounded-contra (elookup/miss Dlook) (ebounded/cons Dbound Dprec)
        Dfalse
     <- ebounded-increase-bound Dbound Dprec Dbound'
     <- elookup-bounded-contra Dlook Dbound' Dfalse.

%worlds (ecsig | easig | evar | eovar) (elookup-bounded-contra _ _ _).
%total D (elookup-bounded-contra D _ _).


elookup-fun : eordered G -> elookup G X A -> elookup G X B 
               -> etp-eq A B -> type.
%mode elookup-fun +X1 +X2 +X3 -X4.

-   : elookup-fun _ elookup/hit elookup/hit etp-eq/i.

-   : elookup-fun
          (Dord : eordered (econs G Y B))
          (elookup/miss
              (Dlook1 : elookup G X A))
          (elookup/miss
              (Dlook2 : elookup G X A'))
          D
       <- eordered-cons Dord
          (Dord' : eordered G)
       <- elookup-fun Dord' Dlook1 Dlook2 D.

-   : elookup-fun
          (eordered/cons (Dbound : ebounded G Y) : eordered (econs G Y S))
          (elookup/miss (Dlook : elookup G Y A))
          elookup/hit
          Deq
       <- elookup-bounded-contra Dlook Dbound Dfalse
       <- false-implies-etp-eq Dfalse Deq.

-   : elookup-fun
          (eordered/cons (Dbound : ebounded G Y) : eordered (econs G Y S))
          elookup/hit
          (elookup/miss (Dlook : elookup G Y A))
          Deq
       <- elookup-bounded-contra Dlook Dbound Dfalse
       <- false-implies-etp-eq Dfalse Deq.


%worlds (ecsig | easig | evar | eovar) (elookup-fun _ _ _ _).
%total D (elookup-fun _ D _ _).

weaken-elookup : elookup G Y A -> {X} {B} elookup (econs G X B) Y A -> type.
%mode weaken-elookup +X1 +X2 +X3 -X4.

- : weaken-elookup Dlook _ _ (elookup/miss Dlook).

%worlds (ecsig | easig | evar | eovar) (weaken-elookup _ _ _ _).
%total {} (weaken-elookup _ _ _ _).


eappend-nil : {G} eappend enil G G -> type.
%mode eappend-nil +X1 -X2.

- : eappend-nil enil eappend/nil.

- : eappend-nil (econs G X A) (eappend/cons D)
     <- eappend-nil G D.

%worlds (ecsig | easig | var) (eappend-nil _ _).
%total G (eappend-nil G _).



eappend-lookup : eappend (econs G1 X T) G2 G
                  -> elookup G X T -> type.
%mode eappend-lookup +X1 -X2.

- : eappend-lookup eappend/nil elookup/hit.

- : eappend-lookup (eappend/cons (Dappend : eappend (econs G1 X T) G2 G))
        (elookup/miss Dlook)
     <- eappend-lookup Dappend
        (Dlook : elookup G X T).

%worlds (ecsig | easig | evar | eovar) (eappend-lookup _ _).
%total D (eappend-lookup D _).

strengthen-elookup : ({x:etm} elookup G Y (B x))
                      -> elookup G Y B' -> ({x} etp-eq (B x) B') -> type.
%mode strengthen-elookup +X1 -X2 -X3.

- : strengthen-elookup ([_] elookup/hit) elookup/hit ([_] etp-eq/i).

- : strengthen-elookup ([x] elookup/miss (Dlook x))  
        (elookup/miss Dlook') Deq
     <- strengthen-elookup Dlook Dlook' Deq. 

%worlds (ecsig | easig | evar | ebind | eovar) (strengthen-elookup _ _ _).
%total D (strengthen-elookup D _ _).

ebounded-isvar : ebounded G X -> eisvar X I -> type.
%mode ebounded-isvar +X1 -X2.

- : ebounded-isvar (ebounded/nil (Disvar : eisvar X I) : ebounded enil X)
        Disvar.

- : ebounded-isvar (ebounded/cons _ (eprecedes/i _ Disvar _))
        Disvar.

%worlds (ecsig | easig | evar | eovar) (ebounded-isvar _ _).
%total D (ebounded-isvar D _).


elookup-isvar : eordered G -> elookup G X _ -> eisvar X I -> type.
%mode elookup-isvar +X1 +X2 -X3.

- : elookup-isvar
        (eordered/cons (Dsbounded : ebounded G X) : eordered (econs G X T))
        (elookup/hit : elookup (econs G X T) X T)
        Disvar
     <- ebounded-isvar Dsbounded
        (Disvar : eisvar X I).

- : elookup-isvar
        (eordered/cons ((ebounded/cons Dsbounded _)))
        (elookup/miss (Dslookup))
        Disvar
     <- elookup-isvar (eordered/cons Dsbounded) Dslookup
        (Disvar : eisvar X I).

%worlds (ecsig | easig | evar | eovar) (elookup-isvar _ _ _).
%total D (elookup-isvar _ D _).


eisvar-const-contra : eisvar (econst _) _ -> false -> type.
%mode eisvar-const-contra +X1 -X2.
%worlds (ecsig | easig | evar | eovar) (eisvar-const-contra _ _).
%total {} (eisvar-const-contra _ _).

eisvar-lam-contra : eisvar (elam _ _) _ -> false -> type.
%mode eisvar-lam-contra +X1 -X2.
%worlds (ecsig | easig | evar | eovar) (eisvar-lam-contra _ _).
%total {} (eisvar-lam-contra _ _).

eisvar-app-contra : eisvar (eapp _ _) _ -> false -> type.
%mode eisvar-app-contra +X1 -X2.
%worlds (ecsig | easig | evar | eovar) (eisvar-app-contra _ _).
%total {} (eisvar-app-contra _ _).


%% weakening %%

weakeng-elookup : eappend G1 G2 G 
                   -> eappend (econs G1 X B) G2 G'
                   -> elookup G Y A
%%
                   -> elookup G' Y A -> type.
%mode weakeng-elookup +X1 +X2 +X3 -X4.

-hit    : weakeng-elookup
              (eappend/cons _)
              (eappend/cons _)
              elookup/hit
%%
              elookup/hit.

-miss   : weakeng-elookup
              (eappend/cons Dapp1)
              (eappend/cons Dapp2)
              (elookup/miss Dlook)
%%
              (elookup/miss Dlook')
%%%
           <- weakeng-elookup Dapp1 Dapp2 Dlook Dlook'.

-nil    : weakeng-elookup eappend/nil eappend/nil Dlook
%%
              (elookup/miss Dlook).

%worlds (ecsig | easig | evar | ebind) (weakeng-elookup _ _ _ _).
%total D (weakeng-elookup _ _ D _).


weakeng-eofe    : eappend G1 G2 G
                   -> eappend (econs G1 X B) G2 G'
                   -> eofe G M A
%%
                   -> eofe G' M A -> type.
%mode weakeng-eofe +X1 +X2 +X3 -X4.

weakeng-ekofe     : eappend G1 G2 G
                     -> eappend (econs G1 X B) G2 G'
                     -> ekofe G A K
%%
                     -> ekofe G' A K -> type.
%mode weakeng-ekofe +X1 +X2 +X3 -X4.

weakeng-ewfkinde  : eappend G1 G2 G
                     -> eappend (econs G1 X B) G2 G'
                     -> ewfkinde G K
%%
                     -> ewfkinde G' K -> type.
%mode weakeng-ewfkinde +X1 +X2 +X3 -X4.

weakeng-eqtme     : eappend G1 G2 G
                     -> eappend (econs G1 X C) G2 G'
                     -> eqtme G M N A
%%
                     -> eqtme G' M N A -> type.
%mode weakeng-eqtme +X1 +X2 +X3 -X4.

weakeng-eqtpe     : eappend G1 G2 G
                     -> eappend (econs G1 X C) G2 G'
                     -> eqtpe G A B K
%%
                     -> eqtpe G' A B K -> type.
%mode weakeng-eqtpe +X1 +X2 +X3 -X4.

weakeng-eqkinde   : eappend G1 G2 G
                     -> eappend (econs G1 X C) G2 G'
                     -> eqkinde G K K'
%%
                     -> eqkinde G' K K' -> type.
%mode weakeng-eqkinde +X1 +X2 +X3 -X4.


-closed   : weakeng-eofe Dappend Dappend'
                (eofe/vari Dkofe Dvof)
                (eofe/vari Dkofe' Dvof)
             <- weakeng-ekofe Dappend Dappend' Dkofe Dkofe'.

-const    : weakeng-eofe Dappend Dappend'
                (eofe/const
                    (DofA : ekofe G A ektype)
                    (DofC : ecof C A))
                (eofe/const DofA' DofC)
             <- weakeng-ekofe Dappend Dappend' DofA DofA'.

-var      : weakeng-eofe Dappend Dappend'
                (eofe/var
                    (DofA   : ekofe G A ektype)
                    (Dlook  : elookup G X A))
                (eofe/var DofA' Dlook')
             <- weakeng-elookup Dappend Dappend' Dlook Dlook'
             <- weakeng-ekofe Dappend Dappend' DofA DofA'.

-app      : weakeng-eofe Dappend Dappend' (eofe/app DofN DofM)
                (eofe/app DofN' DofM')
             <- weakeng-eofe Dappend Dappend' DofN DofN'
             <- weakeng-eofe Dappend Dappend' DofM DofM'.

-lam      : weakeng-eofe Dappend Dappend'
                (eofe/lam
                    (DofA : ekofe G A ektype)
                    ([x] DofM x : eofe (econs G x A) (M x) (B x)))
                (eofe/lam DofA' ([x] DofM' x))
             <- weakeng-ekofe Dappend Dappend' DofA DofA'
             <- ({x}
                    weakeng-eofe (eappend/cons Dappend) (eappend/cons Dappend')
                    (DofM x)
                    (DofM' x : eofe (econs G' x A) (M x) (B x))).

-eqtp     : weakeng-eofe Dappend Dappend' 
                (eofe/eqtp Deqtp Deofe)
                (eofe/eqtp Deqtp' Deofe')
             <- weakeng-eofe Dappend Dappend' Deofe Deofe'
             <- weakeng-eqtpe Dappend Dappend' Deqtp Deqtp'.

-ext      : weakeng-eofe Dappend Dappend' 
                (eofe/ext ([x] DofApp x) DofM)
                (eofe/ext ([x] DofApp' x) DofM')
             <- weakeng-eofe Dappend Dappend' DofM DofM'
             <- ({x}
                    weakeng-eofe (eappend/cons Dappend) (eappend/cons Dappend')
                    (DofApp x) (DofApp' x)).

%%

-const    : weakeng-ekofe Dappend Dappend' (ekofe/const Dwf Dckof)
                (ekofe/const Dwf' Dckof)
             <- weakeng-ewfkinde Dappend Dappend' Dwf Dwf'.

-app      : weakeng-ekofe Dappend Dappend' (ekofe/app Dof Dkof)
                (ekofe/app Dof' Dkof')
             <- weakeng-ekofe Dappend Dappend' Dkof Dkof'
             <- weakeng-eofe Dappend Dappend' Dof Dof'.

-pi       : weakeng-ekofe Dappend Dappend' (ekofe/pi DofA ([x] DofB x))
                (ekofe/pi DofA' ([x] DofB' x))
             <- weakeng-ekofe Dappend Dappend' DofA DofA'
             <- ({x}
                    weakeng-ekofe (eappend/cons Dappend) (eappend/cons Dappend')
                    (DofB x)
                    (DofB' x)).
 
-lam      : weakeng-ekofe Dappend Dappend' (ekofe/lam DofA ([x] DofB x))
                (ekofe/lam DofA' ([x] DofB' x))
             <- weakeng-ekofe Dappend Dappend' DofA DofA'
             <- ({x}
                    weakeng-ekofe (eappend/cons Dappend) (eappend/cons Dappend')
                    (DofB x)
                    (DofB' x)).

-eqkind   : weakeng-ekofe Dappend Dappend' (ekofe/eqkind Deq Dkof)
                (ekofe/eqkind Deq' Dkof')
             <- weakeng-ekofe Dappend Dappend' Dkof Dkof'
             <- weakeng-eqkinde Dappend Dappend' Deq Deq'.

-ext      : weakeng-ekofe Dappend Dappend' (ekofe/ext ([x] D2 x) D1)
                (ekofe/ext D2' D1')
             <- weakeng-ekofe Dappend Dappend' D1 D1'
             <- ({x}
                    weakeng-ekofe (eappend/cons Dappend) (eappend/cons Dappend')
                    (D2 x) (D2' x)).

%%

-tp       : weakeng-ewfkinde _ _ ewfkinde/tp ewfkinde/tp.

-pi       : weakeng-ewfkinde Dapp Dapp' (ewfkinde/pi DofA DofK)
                (ewfkinde/pi DofA' DofK')
             <- ({x} weakeng-ewfkinde (eappend/cons Dapp) (eappend/cons Dapp')
                      (DofK x) (DofK' x))
             <- weakeng-ekofe Dapp Dapp' DofA DofA'.

%%

-app      : weakeng-eqtme Dapp Dapp' (eqtme/app DeqN DeqM)
                (eqtme/app DeqN' DeqM')
             <- weakeng-eqtme Dapp Dapp' DeqN DeqN'
             <- weakeng-eqtme Dapp Dapp' DeqM DeqM'.

-lam      : weakeng-eqtme Dapp Dapp' (eqtme/lam Deqtm Deqtp)
                (eqtme/lam Deqtm' Deqtp')
             <- ({x}
                    weakeng-eqtme (eappend/cons Dapp) (eappend/cons Dapp')
                    (Deqtm x)
                    (Deqtm' x))
             <- weakeng-eqtpe Dapp Dapp' Deqtp Deqtp'.

-ext      : weakeng-eqtme Dapp Dapp' (eqtme/ext ([x] Deq x) Dof1 Dof2)
                (eqtme/ext ([x] Deq' x) Dof1' Dof2')
             <- ({x}
                    weakeng-eqtme (eappend/cons Dapp) (eappend/cons Dapp')
                    (Deq x)
                    (Deq' x))
             <- weakeng-eofe Dapp Dapp' Dof1 Dof1'
             <- weakeng-eofe Dapp Dapp' Dof2 Dof2'.

-extw     : weakeng-eqtme Dapp Dapp' (eqtme/extw ([x] Deq x) Deq2)
                (eqtme/extw ([x] Deq' x) Deq2')
             <- ({x}
                    weakeng-eqtme (eappend/cons Dapp) (eappend/cons Dapp')
                    (Deq x)
                    (Deq' x))
             <- weakeng-eqtme Dapp Dapp' Deq2 Deq2'.

-beta     : weakeng-eqtme Dapp Dapp' (eqtme/beta Dof2 ([x] Dof1 x))
                (eqtme/beta Dof2' Dof1')
             <- ({x}
                    weakeng-eofe (eappend/cons Dapp) (eappend/cons Dapp')
                    (Dof1 x) (Dof1' x))
             <- weakeng-eofe Dapp Dapp' Dof2 Dof2'.

-sym      : weakeng-eqtme Dapp Dapp' (eqtme/sym Deq) (eqtme/sym Deq')
             <- weakeng-eqtme Dapp Dapp' Deq Deq'.

-refl     : weakeng-eqtme Dapp Dapp' (eqtme/refl Dof) (eqtme/refl Dof')
             <- weakeng-eofe Dapp Dapp' Dof Dof'.

-trans    : weakeng-eqtme Dapp Dapp' (eqtme/trans Deq2 Deq1)
                (eqtme/trans Deq2' Deq1')
             <- weakeng-eqtme Dapp Dapp' Deq1 Deq1'
             <- weakeng-eqtme Dapp Dapp' Deq2 Deq2'.

-tcon     : weakeng-eqtme Dapp Dapp' (eqtme/tcon Deqtp Deqtm)
                (eqtme/tcon Deqtp' Deqtm')
             <- weakeng-eqtpe Dapp Dapp' Deqtp Deqtp'
             <- weakeng-eqtme Dapp Dapp' Deqtm Deqtm'.

%%

-app      : weakeng-eqtpe Dapp Dapp' (eqtpe/app DeqN DeqM)
                (eqtpe/app DeqN' DeqM')
             <- weakeng-eqtme Dapp Dapp' DeqN DeqN'
             <- weakeng-eqtpe Dapp Dapp' DeqM DeqM'.

-pi       : weakeng-eqtpe Dapp Dapp' (eqtpe/pi DeqB DeqA)
                (eqtpe/pi DeqB' DeqA')
             <- weakeng-eqtpe Dapp Dapp' DeqA DeqA'
             <- ({x} 
                    weakeng-eqtpe (eappend/cons Dapp) (eappend/cons Dapp')
                    (DeqB x) (DeqB' x)).

-lam      : weakeng-eqtpe Dapp Dapp' (eqtpe/lam Deqtm Deqtp)
                (eqtpe/lam Deqtm' Deqtp')
             <- ({x}
                    weakeng-eqtpe (eappend/cons Dapp) (eappend/cons Dapp')
                    (Deqtm x)
                    (Deqtm' x))
             <- weakeng-eqtpe Dapp Dapp' Deqtp Deqtp'.

-ext      : weakeng-eqtpe Dapp Dapp' (eqtpe/ext ([x] Deq x) Dof1 Dof2)
                (eqtpe/ext ([x] Deq' x) Dof1' Dof2')
             <- ({x}
                    weakeng-eqtpe (eappend/cons Dapp) (eappend/cons Dapp')
                    (Deq x)
                    (Deq' x))
             <- weakeng-ekofe Dapp Dapp' Dof1 Dof1'
             <- weakeng-ekofe Dapp Dapp' Dof2 Dof2'.

-extw     : weakeng-eqtpe Dapp Dapp' (eqtpe/extw ([x] Deq x) Deq2)
                (eqtpe/extw ([x] Deq' x) Deq2')
             <- ({x}
                    weakeng-eqtpe (eappend/cons Dapp) (eappend/cons Dapp')
                    (Deq x)
                    (Deq' x))
             <- weakeng-eqtpe Dapp Dapp' Deq2 Deq2'.

-beta     : weakeng-eqtpe Dapp Dapp' (eqtpe/beta Dof2 ([x] Dof1 x))
                (eqtpe/beta Dof2' Dof1')
             <- ({x}
                    weakeng-ekofe (eappend/cons Dapp) (eappend/cons Dapp')
                    (Dof1 x) (Dof1' x))
             <- weakeng-eofe Dapp Dapp' Dof2 Dof2'.

-sym      : weakeng-eqtpe Dapp Dapp' (eqtpe/sym Deq) (eqtpe/sym Deq')
             <- weakeng-eqtpe Dapp Dapp' Deq Deq'.

-refl     : weakeng-eqtpe Dapp Dapp' (eqtpe/refl Dof) (eqtpe/refl Dof')
             <- weakeng-ekofe Dapp Dapp' Dof Dof'.

-trans    : weakeng-eqtpe Dapp Dapp' (eqtpe/trans Deq2 Deq1)
                (eqtpe/trans Deq2' Deq1')
             <- weakeng-eqtpe Dapp Dapp' Deq1 Deq1'
             <- weakeng-eqtpe Dapp Dapp' Deq2 Deq2'.

-kcon     : weakeng-eqtpe Dapp Dapp' (eqtpe/kcon Deqkind Deqtp)
                (eqtpe/kcon Deqkind' Deqtp')
             <- weakeng-eqtpe Dapp Dapp' Deqtp Deqtp'
             <- weakeng-eqkinde Dapp Dapp' Deqkind Deqkind'.

%%

-tp       : weakeng-eqkinde _ _ eqkinde/tp eqkinde/tp.

-pi       : weakeng-eqkinde Dapp Dapp' (eqkinde/pi DeqB DeqA)
                (eqkinde/pi DeqB' DeqA')
             <- weakeng-eqtpe Dapp Dapp' DeqA DeqA'
             <- ({x} 
                    weakeng-eqkinde (eappend/cons Dapp) (eappend/cons Dapp')
                    (DeqB x) (DeqB' x)).

-sym      : weakeng-eqkinde Dapp Dapp' (eqkinde/sym Deq) (eqkinde/sym Deq')
             <- weakeng-eqkinde Dapp Dapp' Deq Deq'.

-refl     : weakeng-eqkinde Dapp Dapp' (eqkinde/refl Dof) (eqkinde/refl Dof')
             <- weakeng-ewfkinde Dapp Dapp' Dof Dof'.

-trans    : weakeng-eqkinde Dapp Dapp' (eqkinde/trans Deq2 Deq1)
                (eqkinde/trans Deq2' Deq1')
             <- weakeng-eqkinde Dapp Dapp' Deq1 Deq1'
             <- weakeng-eqkinde Dapp Dapp' Deq2 Deq2'.

%worlds (ecsig | easig | evar | ebind)
  (weakeng-eofe _ _ _ _)
  (weakeng-ekofe _ _ _ _)
  (weakeng-ewfkinde _ _ _ _)
  (weakeng-eqtme _ _ _ _)
  (weakeng-eqtpe _ _ _ _)
  (weakeng-eqkinde _ _ _ _).
%total (D1 D2 D3 D4 D5 D6)
  (weakeng-eofe _ _ D1 _)
  (weakeng-ekofe _ _ D2 _)
  (weakeng-ewfkinde _ _ D3 _)
  (weakeng-eqtme _ _ D4 _)
  (weakeng-eqtpe _ _ D5 _)
  (weakeng-eqkinde _ _ D6 _).


weaken-eofe  : eofe G M A
                 -> {X} {B} eofe (econs G X B) M A -> type.
%mode weaken-eofe +X2 +X +B -X3.

- : weaken-eofe (Dof : eofe G M A) X B
        Dof'
     <- weakeng-eofe eappend/nil eappend/nil Dof Dof'.

%worlds (ecsig | easig | evar | ebind | eovar) (weaken-eofe _ _ _ _).
%total {} (weaken-eofe _ _ _ _).

weaken-eofe' : eappend G1 G2 G -> eofe G1 EM EA
                 -> eofe G EM EA -> type.
%mode weaken-eofe' +X2 +X3 -X4.

-nil    : weaken-eofe' eappend/nil D D.

-cons   : weaken-eofe' (eappend/cons (Dapp : eappend G1 G2' G')) Dof
              Dof''
           <- weaken-eofe' Dapp Dof Dof'
           <- weaken-eofe Dof' X B Dof''.

%worlds (ecsig | easig | evar | eovar) (weaken-eofe' _ _ _).
%total D (weaken-eofe' D _ _).

weaken-eqtpe  : eqtpe G M N A
                 -> {X} {B} eqtpe (econs G X B) M N A -> type.
%mode weaken-eqtpe +X2 +X +B -X3.

- : weaken-eqtpe Deq X B Deq'
     <- weakeng-eqtpe eappend/nil eappend/nil Deq Deq'.

%worlds (ecsig | easig | evar | ebind | eovar) (weaken-eqtpe _ _ _ _).
%total {} (weaken-eqtpe _ _ _ _).

weaken-eqtpe' : eappend G1 G2 G -> eqtpe G1 EM EN EA
                 -> eqtpe G EM EN EA -> type.
%mode weaken-eqtpe' +X2 +X3 -X4.

-nil  : weaken-eqtpe' eappend/nil D D.

-cons : weaken-eqtpe' (eappend/cons Dapp) Deq
            Deq''
         <- weaken-eqtpe' Dapp Deq Deq'
         <- weaken-eqtpe Deq' _ _ Deq''.

%worlds (ecsig | easig | evar | ebind | eovar) (weaken-eqtpe' _ _ _).
%total D (weaken-eqtpe' D _ _).

weaken-eqtme  : eqtme G M N A
                 -> {X} {B} eqtme (econs G X B) M N A -> type.
%mode weaken-eqtme +X2 +X +B -X3.

- : weaken-eqtme Deq X B Deq'
     <- weakeng-eqtme eappend/nil eappend/nil Deq Deq'.

%worlds (ecsig | easig | evar | ebind | eovar) (weaken-eqtme _ _ _ _).
%total {} (weaken-eqtme _ _ _ _).

weaken-eqtme' : eappend G1 G2 G -> eqtme G1 EM EN EA
                 -> eqtme G EM EN EA -> type.
%mode weaken-eqtme' +X2 +X3 -X4.

-nil  : weaken-eqtme' eappend/nil D D.

-cons : weaken-eqtme' (eappend/cons Dapp) Deq
            Deq''
         <- weaken-eqtme' Dapp Deq Deq'
         <- weaken-eqtme Deq' _ _ Deq''.

%worlds (ecsig | easig | evar | ebind | eovar) (weaken-eqtme' _ _ _).
%total D (weaken-eqtme' D _ _).


evof-isvar-contra : evof EX EA -> vtrans EX X -> isvar X _ -> false -> type.
%mode evof-isvar-contra +X1 +X2 +X3 -X4.
%worlds (ecsig | easig | bind | ovar | tbind)
  (evof-isvar-contra _ _ _ _).
%total {} (evof-isvar-contra _ _ _ _).

evof-fun : evof EX EA -> evof EX EA' -> etp-eq EA EA' -> type.
%mode evof-fun +X1 +X2 -X3.

- : evof-fun D D' etp-eq/i.

%worlds (ecsig | easig | bind | ovar | tbind)
  (evof-fun _ _ _).
%total {} (evof-fun _ _ _).


%% common metric for implicit and explicit typing derivations

meof      : eof M A -> metric -> type.
mekof     : ekof A K -> metric -> type.
mewfkind  : ewfkind K -> metric -> type.
meqtm     : eqtm M N A -> metric -> type.
meqtp     : eqtp A B K -> metric -> type.
meqkind   : eqkind K J -> metric -> type.

meof/var    : meof (eof/var Dkof _) (msing Mm)
               <- mekof Dkof Mm.

meof/const  : meof (eof/const Dkof _) (msing Dkof')
               <- mekof Dkof Dkof'.

meof/app    : meof (eof/app Dof2 Dof1) (mpair M2 M1)
               <- meof Dof1 M1
               <- meof Dof2 M2.

meof/lam    : meof (eof/lam Dkof ([x] [d] Dof x d)) (mpair M1 M2)
               <- ({x} {d} meof (Dof x d) M1)
               <- mekof Dkof M2.

meof/eqtp   : meof (eof/eqtp Deqtp Dof) (mpair M2 M1)
               <- meof Dof M1
               <- meqtp Deqtp M2.

meof/ext    : meof (eof/ext ([x] [d] Dof2 x d) Dof1) (mpair M1 M2)
               <- meof Dof1 M1
               <- ({x} {d} meof (Dof2 x d) M2).

mekof/const : mekof (ekof/const Dwf _) (msing M)
               <- mewfkind Dwf M.

mekof/app   : mekof (ekof/app Dof Dkof) (mpair Dof' Dkof')
               <- mekof Dkof Dkof'
               <- meof Dof Dof'.

mekof/pi    : mekof (ekof/pi ([x] [d] DkofB x d) DkofA) (mpair DkofB' DkofA')
               <- mekof DkofA DkofA'
               <- ({x} {d} mekof (DkofB x d) DkofB').

mekof/lam   : mekof (ekof/lam D1 ([x] [d] D2 x d)) (mpair D1' D2')
               <- ({x} {d} mekof (D2 x d) D2')
               <- mekof D1 D1'.

mekof/eqk   : mekof (ekof/eqkind Deqk Dkof) (mpair Meqk Mkof)
               <- mekof Dkof Mkof
               <- meqkind Deqk Meqk.

mekof/ext   : mekof (ekof/ext ([x] [d] D2 x d) D1) (mpair D1' D2')
               <- mekof D1 D1'
               <- ({x} {d} mekof (D2 x d) D2').

mewfkind/tp : mewfkind ewfkind/tp munit.

mewfkind/pi : mewfkind (ewfkind/pi ([x] [d] Dwf x d) Dkof) (mpair Dwf' Dkof')
               <- mekof Dkof Dkof'
               <- ({x} {d} mewfkind (Dwf x d) Dwf').

%%

meqtm/app   : meqtm (eqtm/app Deqtm2 Deqtm1) (mpair Mtm2 Mtm1)
               <- meqtm Deqtm1 Mtm1
               <- meqtm Deqtm2 Mtm2.

meqtm/lam   : meqtm (eqtm/lam ([x] [d] DeqB x d) DeqA) (mpair Bm Am)
               <- meqtp DeqA Am
               <- ({x} {d} meqtm (DeqB x d) Bm).


meqtm/ext   : meqtm (eqtm/ext ([x] [d] Deqtm x d) Dof2 Dof1) 
                  (mpair (mpair M1 M2) M3)
               <- meof Dof1 M1
               <- meof Dof2 M2
               <- ({x} {d} meqtm (Deqtm x d) M3).

meqtm/extw  : meqtm (eqtm/extw ([x] [d] Deqtm x d) Deqtm') (mpair M1 M2)
               <- meqtm Deqtm' M1
               <- ({x} {d} meqtm (Deqtm x d) M2).

meqtm/beta  : meqtm (eqtm/beta DofN ([x] [d] DofB x d)) (mpair Nm Bm)
               <- ({x} {d} meof (DofB x d) Bm)
               <- meof DofN Nm.

meqtm/sym   : meqtm (eqtm/sym Deq) (msing M)
               <- meqtm Deq M.

meqtm/trans : meqtm (eqtm/trans Deq1 Deq2) (mpair M2 M1)
               <- meqtm Deq2 M2
               <- meqtm Deq1 M1.

meqtm/refl  : meqtm (eqtm/refl Dkof) (msing M)
               <- meof Dkof M.

meqtm/tcon  : meqtm (eqtm/typecon Deqtp Deqtm) (mpair M2 M1)
               <- meqtm Deqtm M2
               <- meqtp Deqtp M1.

%%

meqtp/app   : meqtp (eqtp/app Deqtm Deqtp) (mpair Mtm Mtp)
               <- meqtp Deqtp Mtp
               <- meqtm Deqtm Mtm.

meqtp/pi    : meqtp (eqtp/pi ([x] [d] DeqtpB x d) DeqtpA) (mpair Bm Am)
               <- meqtp DeqtpA Am
               <- ({x} {d} meqtp (DeqtpB x d) Bm).

meqtp/lam   : meqtp (eqtp/lam ([x] [d] DeqB x d) DeqA) (mpair Bm Am)
               <- meqtp DeqA Am
               <- ({x} {d} meqtp (DeqB x d) Bm).

meqtp/ext   : meqtp (eqtp/ext ([x] [d] Deqtp x d) Dkof2 Dkof1) 
                  (mpair (mpair M1 M2) M3)
               <- mekof Dkof1 M1
               <- mekof Dkof2 M2
               <- ({x} {d} meqtp (Deqtp x d) M3).

meqtp/extw  : meqtp (eqtp/extw ([x] [d] Deqtp x d) Deqtp') (mpair M1 M2)
               <- meqtp Deqtp' M1
               <- ({x} {d} meqtp (Deqtp x d) M2).

meqtp/beta  : meqtp (eqtp/beta DofN ([x] [d] DofB x d)) (mpair Nm Bm)
               <- ({x} {d} mekof (DofB x d) Bm)
               <- meof DofN Nm.

meqtp/sym   : meqtp (eqtp/sym Deq) (msing M)
               <- meqtp Deq M.

meqtp/trans : meqtp (eqtp/trans Deq1 Deq2) (mpair M2 M1)
               <- meqtp Deq2 M2
               <- meqtp Deq1 M1.

meqtp/refl  : meqtp (eqtp/refl Dkof) (msing M)
               <- mekof Dkof M.

meqtp/kcon  : meqtp (eqtp/kcon Deqkind Deqtp) (mpair M1 M2)
               <- meqtp Deqtp M1
               <- meqkind Deqkind M2.

%%

meqkind/tp  : meqkind eqkind/tp munit.

meqkind/pi  : meqkind (eqkind/pi ([x] [d] Deqkind x d) Deqtp)
                  (mpair Km Am)
               <- meqtp Deqtp Am
               <- ({x} {d} meqkind (Deqkind x d) Km).

meqkind/sym : meqkind (eqkind/sym Deqkind) (msing Km)
               <- meqkind Deqkind Km.

meqkind/trn : meqkind (eqkind/trans Deq1 Deq2) (mpair M1 M2)
               <- meqkind Deq2 M2
               <- meqkind Deq1 M1.

meqkind/ref : meqkind (eqkind/refl Dwf) (msing Km)
               <- mewfkind Dwf Km.

%%


can-meof      : {D:eof M A} meof D Mm -> type.
%mode can-meof +X1 -X2.

can-mekof     : {D:ekof A K} mekof D Am -> type.
%mode can-mekof +X1 -X2.

can-mewfkind  : {D:ewfkind K} mewfkind D Km -> type.
%mode can-mewfkind +X1 -X2.

can-meqtp     : {D:eqtp A B K} meqtp D Am -> type.
%mode can-meqtp +X1 -X2.

can-meqtm     : {D:eqtm M N A} meqtm D Mm -> type.
%mode can-meqtm +X1 -X2.

can-meqkind   : {D:eqkind K K'} meqkind D Km -> type.
%mode can-meqkind +X1 -X2.

-     : can-meof (eof/var Dkof _) (meof/var Dkof')
         <- can-mekof Dkof Dkof'.

-     : can-meof (eof/const Dkof _) (meof/const Dkof')
         <- can-mekof Dkof Dkof'.

-     : can-meof (eof/app Dof2 Dof1) (meof/app Dof2' Dof1')
         <- can-meof Dof1 Dof1'
         <- can-meof Dof2 Dof2'.

-     : can-meof (eof/lam Dkof ([x] [d] Dof x d)) (meof/lam Dkof' Dof')
         <- can-mekof Dkof Dkof'
         <- ({x} {d} can-meof (Dof x d) (Dof' x d)).

-     : can-meof (eof/eqtp Deqtp Dof) (meof/eqtp Deqtp' Dof')
         <- can-meof Dof Dof'
         <- can-meqtp Deqtp Deqtp'.

-     : can-meof (eof/ext ([x] [d] Dof2 x d) Dof1) 
            (meof/ext ([x] [d] Dof2' x d) Dof1')
         <- can-meof Dof1 Dof1'
         <- ({x} {d} can-meof (Dof2 x d) (Dof2' x d)).

%%

-     : can-mekof (ekof/const Dwf _) (mekof/const Dwf')
         <- can-mewfkind Dwf Dwf'.

-     : can-mekof (ekof/app Dof Dkof) (mekof/app Dof' Dkof')
         <- can-meof Dof Dof'
         <- can-mekof Dkof Dkof'.

-     : can-mekof (ekof/pi ([x] [d] DofB x d) DofA) (mekof/pi DofB' DofA')
         <- can-mekof DofA DofA'
         <- ({x} {d} can-mekof (DofB x d) (DofB' x d)).

-     : can-mekof (ekof/lam D1 ([x] [d] D2 x d)) (mekof/lam D1' D2')
         <- can-mekof D1 D1'
         <- ({x} {d} can-mekof (D2 x d) (D2' x d)).

-     : can-mekof (ekof/eqkind Deqk Dkof) (mekof/eqk Deqk' Dkof')
         <- can-mekof Dkof Dkof'
         <- can-meqkind Deqk Deqk'.

-     : can-mekof (ekof/ext ([x] [d] Dkof2 x d) Dkof) 
            (mekof/ext ([x] [d] Dkof2' x d) Dkof')
         <- can-mekof Dkof Dkof'
         <- ({x} {d} can-mekof (Dkof2 x d) (Dkof2' x d)).

%%

-     : can-mewfkind ewfkind/tp mewfkind/tp.

-     : can-mewfkind (ewfkind/pi ([x] [d] Dwf x d) Dkof) 
            (mewfkind/pi Dwf' Dkof')
         <- can-mekof Dkof Dkof'
         <- ({x} {d} can-mewfkind (Dwf x d) (Dwf' x d)).

%%

-     : can-meqtp (eqtp/app Deqtm Deqtp) (meqtp/app Deqtm' Deqtp')
         <- can-meqtm Deqtm Deqtm'
         <- can-meqtp Deqtp Deqtp'.

-     : can-meqtp (eqtp/pi ([x] [d] Deqtp2 x d) Deqtp1)
            (meqtp/pi ([x] [d] Deqtp2' x d) Deqtp1')
         <- can-meqtp Deqtp1 Deqtp1'
         <- ({x} {d} can-meqtp (Deqtp2 x d) (Deqtp2' x d)).

-     : can-meqtp (eqtp/lam ([x] [d] Deqtp2 x d) Deqtp1)
            (meqtp/lam ([x] [d] Deqtp2' x d) Deqtp1')
         <- can-meqtp Deqtp1 Deqtp1'
         <- ({x} {d} can-meqtp (Deqtp2 x d) (Deqtp2' x d)).

-     : can-meqtp (eqtp/ext ([x] [d] Deqtp x d) Dkof2 Dkof1)
            (meqtp/ext ([x] [d] Deqtp' x d) Dkof2' Dkof1')
         <- can-mekof Dkof1 Dkof1'
         <- can-mekof Dkof2 Dkof2'
         <- ({x} {d} can-meqtp (Deqtp x d) (Deqtp' x d)).

-     : can-meqtp (eqtp/extw ([x] [d] Deqtp2 x d) Deqtp1)
            (meqtp/extw ([x] [d] Deqtp2' x d) Deqtp1')
         <- can-meqtp Deqtp1 Deqtp1'
         <- ({x} {d} can-meqtp (Deqtp2 x d) (Deqtp2' x d)).

-     : can-meqtp (eqtp/beta Dof ([x] [d] Dkof x d))
            (meqtp/beta Dof' ([x] [d] Dkof' x d))
         <- can-meof Dof Dof'
         <- ({x} {d} can-mekof (Dkof x d) (Dkof' x d)).

-     : can-meqtp (eqtp/sym Deqtp) (meqtp/sym Deqtp')
         <- can-meqtp Deqtp Deqtp'.

-     : can-meqtp (eqtp/trans D1 D2) (meqtp/trans D1' D2')
         <- can-meqtp D1 D1'
         <- can-meqtp D2 D2'.

-     : can-meqtp (eqtp/refl Dkof) (meqtp/refl Dkof')
         <- can-mekof Dkof Dkof'.

-     : can-meqtp (eqtp/kcon Deqkind Deqtp) (meqtp/kcon Deqkind' Deqtp')
         <- can-meqkind Deqkind Deqkind'
         <- can-meqtp Deqtp Deqtp'.

%%

-     : can-meqtm (eqtm/app Deqtm2 Deqtm1) (meqtm/app Deqtm2' Deqtm1')
         <- can-meqtm Deqtm1 Deqtm1'
         <- can-meqtm Deqtm2 Deqtm2'.

-     : can-meqtm (eqtm/lam ([x] [d] Deqtm x d) Deqtp)
            (meqtm/lam ([x] [d] Deqtm' x d) Deqtp')
         <- can-meqtp Deqtp Deqtp'
         <- ({x} {d} can-meqtm (Deqtm x d) (Deqtm' x d)).

-     : can-meqtm (eqtm/ext ([x] [d] Deqtm x d) Dof2 Dof1)
            (meqtm/ext ([x] [d] Deqtm' x d) Dof2' Dof1')
         <- can-meof Dof1 Dof1'
         <- can-meof Dof2 Dof2'
         <- ({x} {d} can-meqtm (Deqtm x d) (Deqtm' x d)).

-     : can-meqtm (eqtm/extw ([x] [d] Deqtm x d) Deqtm2)
            (meqtm/extw ([x] [d] Deqtm' x d) Deqtm2')
         <- can-meqtm Deqtm2 Deqtm2'
         <- ({x} {d} can-meqtm (Deqtm x d) (Deqtm' x d)).

-     : can-meqtm (eqtm/beta Dof1 ([x] [d] Dof2 x d))
            (meqtm/beta Dof1' ([x] [d] Dof2' x d))
         <- can-meof Dof1 Dof1'
         <- ({x} {d} can-meof (Dof2 x d) (Dof2' x d)).

-     : can-meqtm (eqtm/sym Deq) (meqtm/sym Deq')
         <- can-meqtm Deq Deq'.

-     : can-meqtm (eqtm/trans D1 D2) (meqtm/trans D1' D2')
         <- can-meqtm D1 D1'
         <- can-meqtm D2 D2'.

-     : can-meqtm (eqtm/refl Dof) (meqtm/refl Dof')
         <- can-meof Dof Dof'.

-     : can-meqtm (eqtm/typecon Deqtp Deqtm) (meqtm/tcon Deqtp' Deqtm')
         <- can-meqtp Deqtp Deqtp'
         <- can-meqtm Deqtm Deqtm'.

%%

-     : can-meqkind eqkind/tp meqkind/tp.

-     : can-meqkind (eqkind/pi ([x] [d] Deqk x d) Deqt)
            (meqkind/pi ([x] [d] Deqk' x d) Deqt')
         <- ({x} {d} can-meqkind (Deqk x d) (Deqk' x d))
         <- can-meqtp Deqt Deqt'.

-     : can-meqkind (eqkind/sym Deq) (meqkind/sym Deq')
         <- can-meqkind Deq Deq'.

-     : can-meqkind (eqkind/trans D1 D2) (meqkind/trn D1' D2')
         <- can-meqkind D1 D1'
         <- can-meqkind D2 D2'.

-     : can-meqkind (eqkind/refl Dwf) (meqkind/ref Dwf')
         <- can-mewfkind Dwf Dwf'.


%worlds (ecsig | easig | evar | eovar | ebind)
  (can-meof _ _) (can-mekof _ _) (can-mewfkind _ _)
  (can-meqtp _ _) (can-meqtm _ _) (can-meqkind _ _).
%total (D1 D2 D3 D4 D5 D6)
  (can-meof D1 _) (can-mekof D2 _) (can-mewfkind D3 _)
  (can-meqtp D4 _) (can-meqtm D5 _) (can-meqkind D6 _).

meofe     : eofe G M A -> metric -> type.
mekofe    : ekofe G A K -> metric -> type.
mewfkinde : ewfkinde G K -> metric -> type.
meqtpe    : eqtpe G A B K -> metric -> type.
meqtme    : eqtme G M N A -> metric -> type.
meqkinde  : eqkinde G K K' -> metric -> type.

meofe/vari    : meofe (eofe/vari Dkofe Dvof) (msing Dkofe')
                 <- mekofe Dkofe Dkofe'.

meofe/const   : meofe (eofe/const Dkofe _) (msing Dkofe')
                 <- mekofe Dkofe Dkofe'.

meofe/var     : meofe (eofe/var Dkofe _) (msing Dkofe')
                 <- mekofe Dkofe Dkofe'.

meofe/app     : meofe (eofe/app D2 D1) (mpair D2' D1')
                 <- meofe D1 D1'
                 <- meofe D2 D2'.

meofe/lam     : meofe (eofe/lam Dkofe ([x] Deofe x)) (mpair De' Dk')
                 <- ({x} meofe (Deofe x) De')
                 <- mekofe Dkofe Dk'.

meofe/eqtp    : meofe (eofe/eqtp Deqtpe Dofe) (mpair Deqtpe' Dofe')
                 <- meofe Dofe Dofe'
                 <- meqtpe Deqtpe Deqtpe'.

meofe/ext     : meofe (eofe/ext ([x] Dof2 x) Dof1) (mpair M1 M2)
                 <- meofe Dof1 M1
                 <- ({x} meofe (Dof2 x) M2).

mekofe/const  : mekofe (ekofe/const Dwfe _) (msing Dwfe')
                 <- mewfkinde Dwfe Dwfe'.

mekofe/app    : mekofe (ekofe/app Dofe Dkofe) (mpair Dofe' Dkofe')
                 <- mekofe Dkofe Dkofe'
                 <- meofe Dofe Dofe'.

mekofe/pi     : mekofe (ekofe/pi D1 ([x] D2 x)) (mpair D2' D1')
                 <- ({x} mekofe (D2 x) D2')
                 <- mekofe D1 D1'.

mekofe/lam    : mekofe (ekofe/lam D1 ([x] D2 x)) (mpair D1' D2')
                 <- ({x} mekofe (D2 x) D2')
                 <- mekofe D1 D1'.

mekofe/eqk    : mekofe (ekofe/eqkind Deqk Dkofe) (mpair Deqk' Dkofe')
                 <- mekofe Dkofe Dkofe'
                 <- meqkinde Deqk Deqk'.

mekofe/ext    : mekofe (ekofe/ext ([x] Dof2 x) Dof1) (mpair M1 M2)
                 <- mekofe Dof1 M1
                 <- ({x} mekofe (Dof2 x) M2).

mewfkinde/tp  : mewfkinde ewfkinde/tp munit.

mewfkinde/pi  : mewfkinde (ewfkinde/pi Dkof ([x] Dwf x)) (mpair Dwf' Dkof')
                 <- ({x} mewfkinde (Dwf x) Dwf')
                 <- mekofe Dkof Dkof'.

%%

meqtme/app    : meqtme (eqtme/app D2 D1) (mpair M2 M1)
                 <- meqtme D1 M1
                 <- meqtme D2 M2.

meqtme/lam    : meqtme (eqtme/lam ([x] Deqtm x) Deqtp) (mpair M1 M2)
                 <- meqtpe Deqtp M2
                 <- ({x} meqtme (Deqtm x) M1).

meqtme/ext    : meqtme (eqtme/ext ([x] Deqtme x) Dof2 Dof1) 
                    (mpair (mpair M1 M2) M3)
                 <- meofe Dof1 M1
                 <- meofe Dof2 M2
                 <- ({x} meqtme (Deqtme x) M3).

meqtme/extw   : meqtme (eqtme/extw ([x] Deqtme x) Deqtme2) 
                    (mpair M1 M2)
                 <- meqtme Deqtme2 M1
                 <- ({x} meqtme (Deqtme x) M2).

meqtme/beta   : meqtme (eqtme/beta DofeN ([x] DofB x)) (mpair Nm Bm)
                 <- ({x} meofe (DofB x) Bm)
                 <- meofe DofeN Nm.

meqtme/sym    : meqtme (eqtme/sym Deq) (msing M)
                 <- meqtme Deq M.

meqtme/trans  : meqtme (eqtme/trans Deq1 Deq2) (mpair M2 M1)
                 <- meqtme Deq2 M2
                 <- meqtme Deq1 M1.

meqtme/refl   : meqtme (eqtme/refl Dkofe) (msing M)
                 <- meofe Dkofe M.

meqtme/tcon   : meqtme (eqtme/tcon Deqtpe Deqtme) (mpair M2 M1)
                 <- meqtme Deqtme M2
                 <- meqtpe Deqtpe M1.

%%

meqtpe/app   : meqtpe (eqtpe/app Deqtme Deqtpe) (mpair Mtm Mtp)
               <- meqtpe Deqtpe Mtp
               <- meqtme Deqtme Mtm.

meqtpe/pi    : meqtpe (eqtpe/pi ([x] DeqtpeB x) DeqtpeA) (mpair Bm Am)
               <- meqtpe DeqtpeA Am
               <- ({x} meqtpe (DeqtpeB x) Bm).

meqtpe/lam   : meqtpe (eqtpe/lam ([x] DeqB x) DeqA) (mpair Bm Am)
               <- meqtpe DeqA Am
               <- ({x} meqtpe (DeqB x) Bm).

meqtpe/ext   : meqtpe (eqtpe/ext ([x] Deqtpe x) Dkof2 Dkof1) 
                  (mpair (mpair M1 M2) M3)
               <- mekofe Dkof1 M1
               <- mekofe Dkof2 M2
               <- ({x} meqtpe (Deqtpe x) M3).

meqtpe/extw  : meqtpe (eqtpe/extw ([x] Deqtpe x) Deqtpe')
                   (mpair M1 M2)
                <- meqtpe Deqtpe' M1
                <- ({x} meqtpe (Deqtpe x) M2).

meqtpe/beta  : meqtpe (eqtpe/beta DofN ([x] DofB x)) (mpair Nm Bm)
               <- ({x} mekofe (DofB x) Bm)
               <- meofe DofN Nm.

meqtpe/sym   : meqtpe (eqtpe/sym Deq) (msing M)
               <- meqtpe Deq M.

meqtpe/trans : meqtpe (eqtpe/trans Deq1 Deq2) (mpair M2 M1)
               <- meqtpe Deq2 M2
               <- meqtpe Deq1 M1.

meqtpe/refl  : meqtpe (eqtpe/refl Dkof) (msing M)
               <- mekofe Dkof M.

meqtpe/kcon  : meqtpe (eqtpe/kcon Deqkinde Deqtpe) (mpair M1 M2)
               <- meqtpe Deqtpe M1
               <- meqkinde Deqkinde M2.

%%

meqkinde/tp  : meqkinde eqkinde/tp munit.

meqkinde/pi  : meqkinde (eqkinde/pi ([x] Deqkinde x) Deqtpe)
                  (mpair Km Am)
               <- meqtpe Deqtpe Am
               <- ({x} meqkinde (Deqkinde x) Km).

meqkinde/sym : meqkinde (eqkinde/sym Deqkinde) (msing Km)
               <- meqkinde Deqkinde Km.

meqkinde/trn : meqkinde (eqkinde/trans Deq1 Deq2) (mpair M1 M2)
               <- meqkinde Deq2 M2
               <- meqkinde Deq1 M1.

meqkinde/ref : meqkinde (eqkinde/refl Dwf) (msing Km)
               <- mewfkinde Dwf Km.


%% respects lemmas %%

meof-resp : etm-eq M M' -> etp-eq A A' -> {D:eof M A} meof D Mm
                 -> {D':eof M' A'} meof D' Mm -> type.
%mode meof-resp +X0 +X1 +X2 +X3 -X4 -X5.

- : meof-resp etm-eq/i etp-eq/i D Dm D Dm.

%worlds (ecsig | easig | evar | ebind) (meof-resp _ _ _ _ _ _).
%total {} (meof-resp _ _ _ _ _ _).

mekof-resp : etp-eq A A' -> ekind-eq K K' -> {D:ekof A K} mekof D Am
              -> {D':ekof A' K'} mekof D' Am -> type.
%mode mekof-resp +X1 +X2 +X3 +X4 -X5 -X6.

- : mekof-resp etp-eq/i ekind-eq/i D Dm D Dm.

%worlds (ecsig | easig | evar | ebind) (mekof-resp _ _ _ _ _ _).
%total {} (mekof-resp _ _ _ _ _ _).  

mewfkind-resp : ekind-eq K K' -> {D:ewfkind K} mewfkind D Km
                 -> {D':ewfkind K'} mewfkind D' Km -> type.
%mode mewfkind-resp +X1 +X2 +X3 -X4 -X5.

- : mewfkind-resp ekind-eq/i D Dm D Dm.

%worlds (ecsig | easig | evar | ebind) (mewfkind-resp _ _ _ _ _).
%total {} (mewfkind-resp _ _ _ _ _).

meqtp-resp : etp-eq A A' -> etp-eq B B' -> ekind-eq K K'
              -> {D:eqtp A B K} meqtp D Km
              -> {D':eqtp A' B' K'} meqtp D' Km -> type.
%mode meqtp-resp +X0 +X1 +X2 +X3 +X4 -X5 -X6.

- : meqtp-resp etp-eq/i etp-eq/i ekind-eq/i D Dm D Dm.

%worlds (ecsig | easig | evar | ebind) (meqtp-resp _ _ _ _ _ _ _).
%total {} (meqtp-resp _ _ _ _ _ _ _).

meqkind-resp : ekind-eq K K' -> ekind-eq L L' -> {D:eqkind K L} meqkind D Km
                -> {D':eqkind K' L'} meqkind D' Km -> type.
%mode meqkind-resp +X1 +X2 +X3 +X4 -X5 -X6.

- : meqkind-resp ekind-eq/i ekind-eq/i D Dm D Dm.

%worlds (ecsig | easig | evar | ebind) (meqkind-resp _ _ _ _ _ _).
%total {} (meqkind-resp _ _ _ _ _ _).


meof-resp-underbind : {D : {y} {e:evof y A} eof (B y) (K y)} 
                           ({y} {e} meof (D y e) Bm)
                        -> etp-eq A A'
                        -> ({y} etm-eq (B y) (B' y))
                        -> ({y} etp-eq (K y) (K' y))
%%                           
                        -> {D' : {y} {e':evof y A'} eof (B' y) (K' y)}
                           ({y} {e'} meof (D' y e') Bm) -> type.
%mode meof-resp-underbind +X1 +X2 +X3 +X4 +X5 -X6 -X7.

- : meof-resp-underbind D Dm etp-eq/i ([y] etm-eq/i) ([y] etp-eq/i)
        D Dm.

%worlds (ecsig | easig | evar | ebind) (meof-resp-underbind _ _ _ _ _ _ _).
%total {} (meof-resp-underbind _ _ _ _ _ _ _).


mekof-resp-underbind : {D : {y} {e:evof y A} ekof (B y) (K y)} 
                           ({y} {e} mekof (D y e) Bm)
                        -> etp-eq A A'
                        -> ({y} etp-eq (B y) (B' y))
                        -> ({y} ekind-eq (K y) (K' y))
%%                           
                        -> {D' : {y} {e':evof y A'} ekof (B' y) (K' y)}
                           ({y} {e'} mekof (D' y e') Bm) -> type.
%mode mekof-resp-underbind +X1 +X2 +X3 +X4 +X5 -X6 -X7.

- : mekof-resp-underbind D Dm etp-eq/i ([y] etp-eq/i) ([y] ekind-eq/i)
        D Dm.

%worlds (ecsig | easig | evar | ebind) (mekof-resp-underbind _ _ _ _ _ _ _).
%total {} (mekof-resp-underbind _ _ _ _ _ _ _).

meqtp-resp-underbind : {D : {y} {e:evof y A} eqtp (B y) (C y) (K y)} 
                           ({y} {e} meqtp (D y e) Bm)
                        -> etp-eq A A'
                        -> ({y} etp-eq (B y) (B' y))
                        -> ({y} etp-eq (C y) (C' y))
                        -> ({y} ekind-eq (K y) (K' y))
%%                           
                        -> {D' : {y} {e':evof y A'} eqtp (B' y) (C' y) (K' y)}
                           ({y} {e'} meqtp (D' y e') Bm) -> type.
%mode meqtp-resp-underbind +X0 +X1 +X2 +X3 +X4 +X5 -X6 -X7.

- : meqtp-resp-underbind D Dm etp-eq/i 
        ([y] etp-eq/i) ([y] etp-eq/i) ([y] ekind-eq/i) D Dm.

%worlds (ecsig | easig | evar | ebind) (meqtp-resp-underbind _ _ _ _ _ _ _ _).
%total {} (meqtp-resp-underbind _ _ _ _ _ _ _ _).


%%% cut %%%

cut-eof-m  : {Mm} 
                 {D : {x} {d:evof x A} eof (M x) (B x)}
                 ({x} {d} meof (D x d) Mm)
              -> ({x} elookup (G x) x A)
%%
              -> {D' : {x} eofe (G x) (M x) (B x)}
                 ({x} meofe (D' x) Mm) -> type.
%mode cut-eof-m +Mm +X1 +X2 +X3 -X4 -X5.

cut-ekof-m  : {Mm}
                  {D : {x} {d:evof x A} ekof (B x) (K x)}
                  ({x} {d} mekof (D x d) Mm)
               -> ({x} elookup (G x) x A)
%%
               -> {D' : {x} ekofe (G x) (B x) (K x)}
                  ({x} mekofe (D' x) Mm) -> type.
%mode cut-ekof-m +Mm +X1 +X2 +X3 -X4 -X5.

cut-ewfkind-m : {Mm}
                    {D : {x} {d:evof x A} ewfkind (K x)}
                    ({x} {d} mewfkind (D x d) Mm)
                 -> ({x} elookup (G x) x A)
%%
                 -> {D' : {x} ewfkinde (G x) (K x)}
                    ({x} mewfkinde (D' x) Mm) -> type.
%mode cut-ewfkind-m +Mm +X1 +X2 +X3 -X4 -X5.

cut-eqtp-m  : {Mm}
                  {D : {x} {d:evof x A} eqtp (B x) (C x) (K x)}
                  ({x} {d} meqtp (D x d) Mm)
               -> ({x} elookup (G x) x A)
%%
               -> {D' : {x} eqtpe (G x) (B x) (C x) (K x)}
                  ({x} meqtpe (D' x) Mm) -> type.
%mode cut-eqtp-m +Mm +X1 +X2 +X3 -X4 -X5.

cut-eqtm-m  : {Mm}
                  {D:{x} {d:evof x A} eqtm (M x) (N x) (B x)}
                  ({x} {d} meqtm (D x d) Mm)
               -> ({x} elookup (G x) x A)
%%
               -> {D' : {x} eqtme (G x) (M x) (N x) (B x)}
                  ({x} meqtme (D' x) Mm) -> type.
%mode cut-eqtm-m +Mm +X1 +X2 +X3 -X4 -X5.

cut-eqkind-m: {Mm}
                  {D:{x} {d:evof x A} eqkind (K x) (K' x)}
                  ({x} {d} meqkind (D x d) Mm)
               -> ({x} elookup (G x) x A)
%%
               -> {D' : {x} eqkinde (G x) (K x) (K' x)}
                  ({x} meqkinde (D' x) Mm) -> type.
%mode cut-eqkind-m +Mm +X1 +X2 +X3 -X4 -X5.

%%

cut-eofe-m  : {Mm}
                  {D : {x} {d:evof x A} eofe (G x) (M x) (B x)}
                  ({x} {d} meofe (D x d) Mm)
               -> ({x} elookup (G x) x A)
%%
               -> {D' : {x} eofe (G x) (M x) (B x)}
                  ({x} meofe (D' x) Mm) -> type.
%mode cut-eofe-m +Mm +D +X3 +X4 -X5 -X6.

cut-ekofe-m  : {Mm}
                  {D : {x} {d:evof x A} ekofe (G x) (M x) (B x)}
                  ({x} {d} mekofe (D x d) Mm)
               -> ({x} elookup (G x) x A)
%%
               -> {D' : {x} ekofe (G x) (M x) (B x)}
                  ({x} mekofe (D' x) Mm) -> type.
%mode cut-ekofe-m +Mm +D +X3 +X4 -X5 -X6.

cut-ewfkinde-m  : {Mm}
                  {D : {x} {d:evof x A} ewfkinde (G x) (K x)}
                  ({x} {d} mewfkinde (D x d) Mm)
               -> ({x} elookup (G x) x A)
%%
               -> {D' : {x} ewfkinde (G x) (K x)}
                  ({x} mewfkinde (D' x) Mm) -> type.
%mode cut-ewfkinde-m +Mm +D +X3 +X4 -X5 -X6.

cut-eqtpe-m : {Mm}
                  {D : {x} {d:evof x A} eqtpe (G x) (B x) (B' x) (K x)}
                  ({x} {d} meqtpe (D x d) Mm)
               -> ({x} elookup (G x) x A)
%%
               -> {D' : {x} eqtpe (G x) (B x) (B' x) (K x)}
                  ({x} meqtpe (D' x) Mm) -> type.
%mode cut-eqtpe-m +Mm +X1 +X2 +X3 -X4 -X5.

cut-eqtme-m : {Mm}
                  {D : {x} {d:evof x A} eqtme (G x) (B x) (B' x) (K x)}
                  ({x} {d} meqtme (D x d) Mm)
               -> ({x} elookup (G x) x A)
%%
               -> {D' : {x} eqtme (G x) (B x) (B' x) (K x)}
                  ({x} meqtme (D' x) Mm) -> type.
%mode cut-eqtme-m +Mm +X1 +X2 +X3 -X4 -X5.

cut-eqkinde-m : {Mm}
                  {D : {x} {d:evof x A} eqkinde (G x) (B x) (B' x)}
                  ({x} {d} meqkinde (D x d) Mm)
               -> ({x} elookup (G x) x A)
%%
               -> {D' : {x} eqkinde (G x) (B x) (B' x)}
                  ({x} meqkinde (D' x) Mm) -> type.
%mode cut-eqkinde-m +Mm +X1 +X2 +X3 -X4 -X5.


-varsam   : cut-eof-m _
                ([x] [d]
                    eof/var 
                    (DofA x d : ekof A ektype) 
                    d)
                ([x] [d]
                    meof/var
                    (DmofA x d : mekof (DofA x d) Am))
                ([x] Dlook x : elookup (G x) x A)
%%
                ([x] eofe/var (DofeA x) (Dlook x))
                ([x] meofe/var (DmofeA x))
%%
             <- cut-ekof-m _ 
                ([x] [d] DofA x d) ([x] [d] DmofA x d) ([x] Dlook x)
                ([x] DofeA x : ekofe (G x) A ektype) 
                ([x] DmofeA x : mekofe (DofeA x) Am).

-varoth   : cut-eof-m _
                ([x] [d]
                    eof/var
                    (DofB x d : ekof B ektype)
                    (DofY : evof Y B))
                ([x] [d]
                    meof/var
                    (DmofB x d : mekof (DofB x d) Bm))
                ([x] Dlook x : elookup (G x) x A)
%%
                ([x] eofe/vari (DofB' x) DofY)
                ([x] meofe/vari (DmofB' x))
%%
             <- cut-ekof-m _ DofB DmofB Dlook
                ([x] DofB' x : ekofe (G x) B ektype)
                ([x] DmofB' x).

-const    : cut-eof-m _
                ([x] [d]
                    eof/const
                    (DofB x d : ekof (B x) ektype)
                    (DofC x : ecof C (B x)))
                ([x] [d]
                    meof/const
                    (DmofB x d : mekof (DofB x d) Bm))
                ([x] Dlook x : elookup (G x) x A)
%%
                ([x] eofe/const (DofeB x) (DofC x))
                ([x] meofe/const (DmofeB x))
%%                
             <- cut-ekof-m _ ([x] [d] DofB x d) ([x] [d] DmofB x d) 
                ([x] Dlook x)
                ([x] DofeB x : ekofe (G x) (B x) ektype)
                ([x] DmofeB x : mekofe (DofeB x) Bm).

-app      : cut-eof-m _
                ([x] [d]
                    eof/app
                    (DofN x d : eof (N x) (B x))
                    (DofM x d : eof (M x) (epi (B x) ([y] C x y))))
                ([x] [d]
                    meof/app
                    (DmofN x d : meof (DofN x d) Nm)
                    (DmofM x d : meof (DofM x d) Mm))
                ([x] Dlook x : elookup (G x) x A)
%%
                ([x] eofe/app (DofeN x) (DofeM x))
                ([x] meofe/app (DmofeN x) (DmofeM x))
%%
             <- cut-eof-m _
                DofN DmofN Dlook DofeN ([x] DmofeN x : meofe (DofeN x) Nm)
             <- cut-eof-m _
                DofM DmofM Dlook
                ([x] DofeM x : eofe (G x) (M x) (epi (B x) ([y] C x y)))
                ([x] DmofeM x : meofe (DofeM x) Mm).

-lam      : cut-eof-m _
                ([x] [d:evof x A]
                    eof/lam
                    (DofB x d : ekof (B x) ektype)
                    ([y] [e:evof y (B x)] DofM x d y e : eof (M x y) (C x y)))
                ([x] [d]
                    meof/lam
                    (DmofB x d : mekof (DofB x d) Bm)
                    ([y] [e] DmofM x d y e : meof (DofM x d y e) Mm))
                ([x] Dlook x : elookup (G x) x A)
%%
                ([x] eofe/lam (DofeB x) ([y] DofeM' x y))
                ([x] meofe/lam (DmofeB x) ([y] DmofeM' x y))
%%
             <- cut-ekof-m _ DofB DmofB Dlook 
                ([x] DofeB x : ekofe (G x) (B x) ektype)
                ([x] DmofeB x)
             <- ({x} {d:evof x A}
                    cut-eof-m _ 
                    ([y] [e] DofM x d y e) ([y] [e] DmofM x d y e) 
                    ([y] elookup/hit)
                    ([y] DofeM x d y 
                      : eofe (econs (G x) y (B x)) (M x y) (C x y))
                    ([y] DmofeM x d y
                      : meofe (DofeM x d y) Mm))
             <- ({x} {y}
                    weaken-elookup (Dlook x) y (B x)
                    (Dlook' x y : elookup (econs (G x) y (B x)) x A))
             <- ({y}
                    cut-eofe-m _ 
                    ([x] [d] DofeM x d y) ([x] [d] DmofeM x d y)
                    ([x] Dlook' x y)
                    ([x] DofeM' x y)
                    ([x] DmofeM' x y : meofe (DofeM' x y) Mm)).

-eqtp     : cut-eof-m _
                ([x] [d]
                    eof/eqtp
                    (Deqtp x d : eqtp (B x) (C x) ektype)
                    (DofMB x d : eof (M x) (B x)))
                ([x] [d]
                    meof/eqtp
                    (Dmeqtp x d : meqtp (Deqtp x d) M2)
                    (DmofMB x d : meof (DofMB x d) M1))
                ([x] Dlook x : elookup (G x) x A)
%%
                ([x] eofe/eqtp (Deqtpe x) (DofeMB x))
                ([x] meofe/eqtp (Dmeqtpe x) (DmeofeMB x))
%%
             <- cut-eof-m _ DofMB DmofMB Dlook
                ([x] DofeMB x : eofe (G x) (M x) (B x))
                ([x] DmeofeMB x : meofe (DofeMB x) M1)
             <- cut-eqtp-m _ Deqtp Dmeqtp Dlook
                ([x] Deqtpe x : eqtpe (G x) (B x) (C x) ektype)
                ([x] Dmeqtpe x : meqtpe (Deqtpe x) M2).

-ext      : cut-eof-m (mpair MM MApp)
                ([x] [d]
                    eof/ext 
                    ([y] [e] 
                        DofApp x d y e : eof (eapp (M x) y) (B x y))
                    (DofM x d : eof (M x) (epi (A x) ([y] B' x y))))
                ([x] [d]
                    meof/ext
                    ([y] [e] DmofApp x d y e
                      : meof (DofApp x d y e) MApp)
                    (DmofM x d : meof (DofM x d) MM))
                ([x] Dlook x : elookup (G x) x C)
%%
                ([x] eofe/ext ([y] DofeApp' x y) (DofeM x))
                ([x] meofe/ext ([y] DmofeApp' x y) (DmofeM x))
%%
             <- cut-eof-m _ DofM DmofM Dlook
                ([x] DofeM x : eofe (G x) (M x) (epi (A x) ([y] B' x y)))
                ([x] DmofeM x : meofe (DofeM x) MM)
             <- ({x} {d:evof x C}
                    cut-eof-m _
                    ([y] [e] DofApp x d y e) ([y] [e] DmofApp x d y e)
                    ([y] elookup/hit)
                    ([y] DofeApp x d y
                      : eofe (econs (G x) y (A x)) (eapp (M x) y) (B x y))
                    ([y] DmofeApp x d y
                      : meofe (DofeApp x d y) MApp))
             <- ({y}
                    cut-eofe-m _ 
                    ([x] [d] DofeApp x d y) ([x] [d] DmofeApp x d y) 
                    ([x] elookup/miss (Dlook x))
                    ([x] DofeApp' x y
                      : eofe (econs (G x) y (A x)) (eapp (M x) y) (B x y))
                    ([x] DmofeApp' x y
                      : meofe (DofeApp' x y) MApp)).

%%%%

-const    : cut-ekof-m (msing M)
                ([x] [d]
                    ekof/const
                    (Dwfkind x d : ewfkind (K x))
                    (Deckof x : eckof B (K x)))
                ([x] [d]
                    mekof/const
                    (Dmwfkind x d : mewfkind (Dwfkind x d) M))
                ([x] Dlook x : elookup (G x) x A)
%%
                ([x] ekofe/const (Dwfkinde x) (Deckof x))
                ([x] mekofe/const (Dmwfkinde x))
%%
             <- cut-ewfkind-m M Dwfkind Dmwfkind Dlook Dwfkinde Dmwfkinde.

-app      : cut-ekof-m (mpair Mof Mkof)
                ([x] [d]
                    ekof/app
                    (Dof x d : eof (M x) (B x))
                    (Dkof x d : ekof (A x) (ekpi (B x) ([y] K x y))))
                ([x] [d]
                    mekof/app
                    (Dmof x d : meof (Dof x d) Mof)
                    (Dmkof x d : mekof (Dkof x d) Mkof))
                ([x] Dlook x : elookup (G x) x C)
%%
                ([x] ekofe/app (Dofe x) (Dkofe x))
                ([x] mekofe/app (Dmofe x) (Dmkofe x))
%%
             <- cut-eof-m Mof Dof Dmof Dlook
                ([x] Dofe x : eofe (G x) (M x) (B x))
                ([x] Dmofe x : meofe (Dofe x) Mof)
             <- cut-ekof-m Mkof Dkof Dmkof Dlook
                ([x] Dkofe x : ekofe (G x) (A x) (ekpi (B x) ([y] K x y)))
                ([x] Dmkofe x : mekofe (Dkofe x) Mkof).

-pi       : cut-ekof-m (mpair Bm Am)
                ([x] [d]
                    ekof/pi
                    ([y] [e:evof y (A x)] 
                        DofB x d y e : ekof (B x y) ektype)
                    (DofA x d : ekof (A x) ektype))
                ([x] [d]
                    mekof/pi
                    ([y] [e]
                        DmofB x d y e : mekof (DofB x d y e) Bm)
                    (DmofA x d : mekof (DofA x d) Am))
                ([x] Dlook x : elookup (G x) x C)
%%
                ([x] ekofe/pi (DofeA x) ([y] DofeB' x y))
                ([x] mekofe/pi (DmofeA x) ([y] DmofeB' x y))
%%
             <- cut-ekof-m Am DofA DmofA Dlook
                ([x] DofeA x : ekofe (G x) (A x) ektype)
                ([x] DmofeA x : mekofe (DofeA x) Am)
             <- ({x} {d}
                    cut-ekof-m Bm ([y] [e] DofB x d y e) ([y] [e] DmofB x d y e)
                    ([y] elookup/hit)
                    ([y] DofeB x d y)
                    ([y] DmofeB x d y))
             <- ({y}
                    cut-ekofe-m Bm ([x] [d] DofeB x d y) ([x] [d] DmofeB x d y)
                    ([x] elookup/miss (Dlook x))
                    ([x] DofeB' x y)
                    ([x] DmofeB' x y)).

-lam      : cut-ekof-m (mpair Am Bm)
                ([x] [d]
                    ekof/lam
                    (DofA x d : ekof (A x) ektype)
                    ([y] [e:evof y (A x)] 
                        DofB x d y e : ekof (B x y) (K x y)))
                ([x] [d]
                    mekof/lam
                    (DmofA x d : mekof (DofA x d) Am)
                    ([y] [e]
                        DmofB x d y e : mekof (DofB x d y e) Bm))
                ([x] Dlook x : elookup (G x) x C)
%%
                ([x] ekofe/lam (DofeA x) ([y] DofeB' x y))
                ([x] mekofe/lam (DmofeA x) ([y] DmofeB' x y))
%%
             <- cut-ekof-m Am DofA DmofA Dlook
                ([x] DofeA x : ekofe (G x) (A x) ektype)
                ([x] DmofeA x : mekofe (DofeA x) Am)
             <- ({x} {d}
                    cut-ekof-m Bm ([y] [e] DofB x d y e) ([y] [e] DmofB x d y e)
                    ([y] elookup/hit)
                    ([y] DofeB x d y)
                    ([y] DmofeB x d y))
             <- ({y}
                    cut-ekofe-m Bm ([x] [d] DofeB x d y) ([x] [d] DmofeB x d y)
                    ([x] elookup/miss (Dlook x))
                    ([x] DofeB' x y)
                    ([x] DmofeB' x y)).

-eqkind   : cut-ekof-m (mpair Meq Mof)
                ([x] [d]
                    ekof/eqkind
                    (Deqkind x d : eqkind (K x) (L x))
                    (Dekof x d : ekof (B x) (K x)))
                ([x] [d]
                    mekof/eqk
                    (Dmeqkind x d : meqkind (Deqkind x d) Meq)
                    (Dmekof x d : mekof (Dekof x d) Mof))
                ([x] Dlook x : elookup (G x) x C)
%%
                ([x] ekofe/eqkind (Deqkinde x) (Dekofe x))
                ([x] mekofe/eqk (Dmeqkinde x) (Dmekofe x))
%%
             <- cut-ekof-m Mof Dekof Dmekof Dlook Dekofe Dmekofe
             <- cut-eqkind-m Meq Deqkind Dmeqkind Dlook Deqkinde Dmeqkinde.

-ext      : cut-ekof-m (mpair Mm1 Mm2)
                ([x] [d]
                    ekof/ext
                    ([y] [e] DofApp x d y e : ekof (eaapp (C x) y) (K x y))
                    (DofC x d : ekof (C x) (ekpi (B x) ([y] K' x y))))
                ([x] [d]
                    mekof/ext
                    ([y] [e] DmofApp x d y e : mekof (DofApp x d y e) Mm2)
                    (DmofC x d : mekof (DofC x d) Mm1))
                ([x] Dlook x : elookup (G x) x A)
%%
                ([x] ekofe/ext ([y] DofeApp' x y) (DofeC x))
                ([x] mekofe/ext ([y] DmofeApp' x y) (DmofeC x))
%%
             <- cut-ekof-m Mm1 DofC DmofC Dlook DofeC DmofeC
             <- ({x} {d}
                    cut-ekof-m Mm2 ([y] [e] DofApp x d y e)
                    ([y] [e] DmofApp x d y e) ([y] elookup/hit)
                    ([y] DofeApp x d y) ([y] DmofeApp x d y))
             <- ({y}
                    cut-ekofe-m Mm2 ([x] [d] DofeApp x d y) 
                    ([x] [d] DmofeApp x d y) ([x] elookup/miss (Dlook x))
                    ([x] DofeApp' x y) ([x] DmofeApp' x y)).

%%%%

-tp       : cut-ewfkind-m munit ([_] [_] ewfkind/tp) ([_] [_] mewfkind/tp)
                ([x] Dlook x) ([_] ewfkinde/tp) ([_] mewfkinde/tp).

-pi       : cut-ewfkind-m (mpair Mwf Mkof)
                ([x] [d] ewfkind/pi
                    ([y] [e] Dwf x d y e)
                    (Dkof x d))
                ([x] [d] mewfkind/pi
                    ([y] [e] Dmwf x d y e)
                    (Dmkof x d))
                ([x] Dlook x)
%%
                ([x] ewfkinde/pi (Dkofe x) ([y] Dwfe' x y))
                ([x] mewfkinde/pi (Dmkofe x) ([y] Dmwfe' x y))
%%
             <- cut-ekof-m Mkof Dkof Dmkof Dlook Dkofe Dmkofe
             <- ({x} {d}
                    cut-ewfkind-m Mwf ([y] [e] Dwf x d y e) 
                    ([y] [e] Dmwf x d y e) ([y] elookup/hit)
                    ([y] Dwfe x d y) ([y] Dmwfe x d y))
             <- ({y}
                    cut-ewfkinde-m Mwf ([x] [d] Dwfe x d y) 
                    ([x] [d] Dmwfe x d y) ([x] elookup/miss (Dlook x))
                    ([x] Dwfe' x y) ([x] Dmwfe' x y)).

%%%%

-app      : cut-eqtp-m (mpair Mtm Mtp)
                ([x] [d]
                    eqtp/app 
                    (Deqtm x d : eqtm (M x) (N x) (C x))
                    (Deqtp x d : eqtp (A x) (B x) (ekpi (C x) ([y] K x y))))
                ([x] [d]
                    meqtp/app
                    (Dmeqtm x d : meqtm (Deqtm x d) Mtm)
                    (Dmeqtp x d : meqtp (Deqtp x d) Mtp))
                ([x] Dlook x : elookup (G x) x D)
%%
                ([x] eqtpe/app (Deqtme x) (Deqtpe x))
                ([x] meqtpe/app (Dmeqtme x) (Dmeqtpe x))
%%
             <- cut-eqtm-m Mtm Deqtm Dmeqtm Dlook 
                ([x] Deqtme x : eqtme (G x) (M x) (N x) (C x)) 
                ([x] Dmeqtme x : meqtme (Deqtme x) Mtm)
             <- cut-eqtp-m Mtp Deqtp Dmeqtp Dlook 
                ([x] Deqtpe x 
                  : eqtpe (G x) (A x) (B x) (ekpi (C x) ([y] K x y))) 
                ([x] Dmeqtpe x : meqtpe (Deqtpe x) Mtp).

-pi     : cut-eqtp-m (mpair Bm Am)
              ([x] [d]
                  eqtp/pi
                  ([y] [e] DeqB x d y e : eqtp (B x y) (B' x y) ektype)
                  (DeqA x d : eqtp (A x) (A' x) ektype))
              ([x] [d]
                  meqtp/pi
                  ([y] [e] DmeqB x d y e : meqtp (DeqB x d y e) Bm)
                  (DmeqA x d : meqtp (DeqA x d) Am))
              ([x] Dlook x : elookup (G x) x C)
%%
              ([x] eqtpe/pi ([y] DeqeB' x y) (DeqeA x))
              ([x] meqtpe/pi ([y] DmeqeB' x y) (DmeqeA x))
%%
           <- cut-eqtp-m Am DeqA DmeqA Dlook
              ([x] DeqeA x : eqtpe (G x) (A x) (A' x) ektype)
              ([x] DmeqeA x : meqtpe (DeqeA x) Am)
           <- ({x} {d}
                  cut-eqtp-m Bm ([y] [e] DeqB x d y e) ([y] [e] DmeqB x d y e)
                  ([y] elookup/hit)
                  ([y] DeqeB x d y 
                    : eqtpe (econs (G x) y (A x)) (B x y) (B' x y) ektype)
                  ([y] DmeqeB x d y
                    : meqtpe (DeqeB x d y) Bm))
           <- ({y}
                  cut-eqtpe-m Bm ([x] [d] DeqeB x d y) ([x] [d] DmeqeB x d y)
                  ([x] elookup/miss (Dlook x))
                  ([x] DeqeB' x y 
                    : eqtpe (econs (G x) y (A x)) (B x y) (B' x y) ektype)
                  ([x] DmeqeB' x y
                    : meqtpe (DeqeB' x y) Bm)).

-lam     : cut-eqtp-m (mpair Bm Am)
              ([x] [d]
                  eqtp/lam
                  ([y] [e] DeqB x d y e : eqtp (B x y) (B' x y) (K x y))
                  (DeqA x d : eqtp (A x) (A' x) ektype))
              ([x] [d]
                  meqtp/lam
                  ([y] [e] DmeqB x d y e : meqtp (DeqB x d y e) Bm)
                  (DmeqA x d : meqtp (DeqA x d) Am))
              ([x] Dlook x : elookup (G x) x C)
%%
              ([x] eqtpe/lam ([y] DeqeB' x y) (DeqeA x))
              ([x] meqtpe/lam ([y] DmeqeB' x y) (DmeqeA x))
%%
           <- cut-eqtp-m Am DeqA DmeqA Dlook
              ([x] DeqeA x : eqtpe (G x) (A x) (A' x) ektype)
              ([x] DmeqeA x : meqtpe (DeqeA x) Am)
           <- ({x} {d}
                  cut-eqtp-m Bm ([y] [e] DeqB x d y e) ([y] [e] DmeqB x d y e)
                  ([y] elookup/hit)
                  ([y] DeqeB x d y 
                    : eqtpe (econs (G x) y (A x)) (B x y) (B' x y) (K x y))
                  ([y] DmeqeB x d y
                    : meqtpe (DeqeB x d y) Bm))
           <- ({y}
                  cut-eqtpe-m Bm ([x] [d] DeqeB x d y) ([x] [d] DmeqeB x d y)
                  ([x] elookup/miss (Dlook x))
                  ([x] DeqeB' x y 
                    : eqtpe (econs (G x) y (A x)) (B x y) (B' x y) (K x y))
                  ([x] DmeqeB' x y
                    : meqtpe (DeqeB' x y) Bm)).

-ext      : cut-eqtp-m (mpair (mpair M1 M2) M3)
                ([x] [d]
                    eqtp/ext
                    ([y] [e] Deqtp x d y e
                      : eqtp (eaapp (B x) y) (eaapp (B' x) y) (K x y))
                    (DofB' x d : ekof (B' x) (ekpi (A x) ([y] K'' x y)))
                    (DofB x d : ekof (B x) (ekpi (A x) ([y] K' x y))))
                ([x] [d]
                    meqtp/ext
                    ([y] [e] Dmeqtp x d y e
                      : meqtp (Deqtp x d y e) M3)
                    (DmofB' x d : mekof (DofB' x d) M2)
                    (DmofB x d : mekof (DofB x d) M1))
                ([x] Dlook x : elookup (G x) x C)
%%
                ([x] eqtpe/ext ([y] Deqtpe' x y) (DofeB' x) (DofeB x))
                ([x] meqtpe/ext ([y] Dmeqtpe' x y) (DmofeB' x) (DmofeB x))
%%
             <- cut-ekof-m M1 DofB DmofB Dlook
                ([x] DofeB x : ekofe (G x) (B x) (ekpi (A x) ([y] K' x y)))
                ([x] DmofeB x : mekofe (DofeB x) M1)
             <- cut-ekof-m M2 DofB' DmofB' Dlook
                ([x] DofeB' x : ekofe (G x) (B' x) (ekpi (A x) ([y] K'' x y)))
                ([x] DmofeB' x : mekofe (DofeB' x) M2)
             <- ({x} {d}
                    cut-eqtp-m M3 ([y] [e] Deqtp x d y e) 
                    ([y] [e] Dmeqtp x d y e) ([y] elookup/hit)
                    ([y] Deqtpe x d y
                      : eqtpe (econs (G x) y (A x)) 
                        (eaapp (B x) y) (eaapp (B' x) y) (K x y))
                    ([y] Dmeqtpe x d y
                      : meqtpe (Deqtpe x d y) M3))
             <- ({y}
                    cut-eqtpe-m M3 ([x] [d] Deqtpe x d y) 
                    ([x] [d] Dmeqtpe x d y) ([x] elookup/miss (Dlook x))
                    ([x] Deqtpe' x y
                      : eqtpe (econs (G x) y (A x))
                        (eaapp (B x) y) (eaapp (B' x) y) (K x y))
                    ([x] Dmeqtpe' x y
                      : meqtpe (Deqtpe' x y) M3)).

-extw     : cut-eqtp-m (mpair M1 M2)
                ([x] [d]
                    eqtp/extw
                    ([y] [e] Deqtp x d y e
                      : eqtp (eaapp (B x) y) (eaapp (B' x) y) (K x y))
                    (DeqtpB x d : eqtp (B x) (B' x) (ekpi (A x) ([y] K' x y))))
                ([x] [d]
                    meqtp/extw
                    ([y] [e] Dmeqtp x d y e : meqtp (Deqtp x d y e) M2)
                    (DmeqtpB x d : meqtp (DeqtpB x d) M1))
                ([x] Dlook x : elookup (G x) x C)
%%
                ([x] eqtpe/extw ([y] Deqtpe' x y) (DeqtpeB x))
                ([x] meqtpe/extw ([y] Dmeqtpe' x y) (DmeqtpeB x))
%%
             <- cut-eqtp-m M1 DeqtpB DmeqtpB Dlook
                ([x] DeqtpeB x 
                  : eqtpe (G x) (B x) (B' x) (ekpi (A x) ([y] K' x y)))
                ([x] DmeqtpeB x : meqtpe (DeqtpeB x) M1)
             <- ({x} {d}
                    cut-eqtp-m M2 ([y] [e] Deqtp x d y e) 
                    ([y] [e] Dmeqtp x d y e) ([y] elookup/hit)
                    ([y] Deqtpe x d y
                      : eqtpe (econs (G x) y (A x)) 
                        (eaapp (B x) y) (eaapp (B' x) y) (K x y))
                    ([y] Dmeqtpe x d y
                      : meqtpe (Deqtpe x d y) M2))
             <- ({y}
                    cut-eqtpe-m M2 ([x] [d] Deqtpe x d y) 
                    ([x] [d] Dmeqtpe x d y) ([x] elookup/miss (Dlook x))
                    ([x] Deqtpe' x y
                      : eqtpe (econs (G x) y (A x))
                        (eaapp (B x) y) (eaapp (B' x) y) (K x y))
                    ([x] Dmeqtpe' x y
                      : meqtpe (Deqtpe' x y) M2)).

-beta     : cut-eqtp-m (mpair Nm Bm)
                ([x] [d]
                    eqtp/beta
                    (DofN x d: eof (N x) (A x))
                    ([y] [e] DofB x d y e : ekof (B x y) (K x y)))
                ([x] [d]
                    meqtp/beta
                    (DmofN x d : meof (DofN x d) Nm)
                    ([y] [e] DmofB x d y e : mekof (DofB x d y e) Bm))
                ([x] Dlook x : elookup (G x) x C)
%%
                ([x] eqtpe/beta (DofeN x) ([y] DofeB' x y))
                ([x] meqtpe/beta (DmofeN x) ([y] DmofeB' x y))
%%
             <- cut-eof-m Nm DofN DmofN Dlook
                ([x] DofeN x : eofe (G x) (N x) (A x))
                ([x] DmofeN x : meofe (DofeN x) Nm)
             <- ({x} {d}
                    cut-ekof-m Bm ([y] [e] DofB x d y e)
                    ([y] [e] DmofB x d y e) ([y] elookup/hit)
                    ([y] DofeB x d y 
                      : ekofe (econs (G x) y (A x)) (B x y) (K x y))
                    ([y] DmofeB x d y
                      : mekofe (DofeB x d y) Bm))
             <- ({y}
                    cut-ekofe-m Bm ([x] [d] DofeB x d y) ([x] [d] DmofeB x d y)
                    ([x] elookup/miss (Dlook x))
                    ([x] DofeB' x y
                      : ekofe (econs (G x) y (A x)) (B x y) (K x y))
                    ([x] DmofeB' x y
                      : mekofe (DofeB' x y) Bm)).

-sym      : cut-eqtp-m (msing M)
                ([x] [d]
                    eqtp/sym (Deqtp x d : eqtp (B x) (B' x) (K x)))
                ([x] [d]
                    meqtp/sym (Dmeqtp x d : meqtp (Deqtp x d) M))
                ([x] Dlook x : elookup (G x) x A)
%%
                ([x] eqtpe/sym (Deqtpe x))
                ([x] meqtpe/sym (Dmeqtpe x))
%%
             <- cut-eqtp-m M Deqtp Dmeqtp Dlook Deqtpe Dmeqtpe.

-trans    : cut-eqtp-m (mpair M1 M2)
                ([x] [d]
                    eqtp/trans
                    (Deq2 x d : eqtp (B' x) (B'' x) (K x))
                    (Deq1 x d : eqtp (B x ) (B' x) (K x)))
                ([x] [d]
                    meqtp/trans
                    (Dmeq2 x d : meqtp (Deq2 x d) M2)
                    (Dmeq1 x d : meqtp (Deq1 x d) M1))
                ([x] Dlook x : elookup (G x) x A)
%%
                ([x] eqtpe/trans (Deqe2 x) (Deqe1 x))
                ([x] meqtpe/trans (Dmeqe2 x) (Dmeqe1 x))
%%
             <- cut-eqtp-m M1 Deq1 Dmeq1 Dlook Deqe1 Dmeqe1
             <- cut-eqtp-m M2 Deq2 Dmeq2 Dlook Deqe2 Dmeqe2.

-refl     : cut-eqtp-m (msing M)
                ([x] [d]
                    eqtp/refl (Dkof x d : ekof (B x) (K x)))
                ([x] [d]
                    meqtp/refl (Dmkof x d : mekof (Dkof x d) M))
                ([x] Dlook x : elookup (G x) x A)
%%
                ([x] eqtpe/refl (Dkofe x))
                ([x] meqtpe/refl (Dmkofe x))
%%
             <- cut-ekof-m M Dkof Dmkof Dlook Dkofe Dmkofe.

-kcon     : cut-eqtp-m (mpair Am Km)
                ([x] [d] eqtp/kcon 
                    (Deqk x d : eqkind (K x) (K' x))
                    (Deqtp x d : eqtp (B x) (B' x) (K x)))
                ([x] [d] meqtp/kcon
                    (Dmeqk x d : meqkind (Deqk x d) Km)
                    (Dmeqtp x d : meqtp (Deqtp x d) Am))
                ([x] Dlook x : elookup (G x) x A)
%%
                ([x] eqtpe/kcon (Deqke x) (Deqtpe x))
                ([x] meqtpe/kcon (Dmeqke x) (Dmeqtpe x))
%%
             <- cut-eqtp-m Am Deqtp Dmeqtp Dlook Deqtpe Dmeqtpe
             <- cut-eqkind-m Km Deqk Dmeqk Dlook Deqke Dmeqke.


%%%%

-app      : cut-eqtm-m _
                ([x] [d]
                    eqtm/app
                    (DeqN x d : eqtm (N x) (N' x) (A x))
                    (DeqM x d : eqtm (M x) (M' x) (epi (A x) ([y] B x y))))
                ([x] [d] meqtm/app (DmeqN x d) (DmeqM x d))
                ([x] Dlook x : elookup (G x) x C)
%%
                ([x] eqtme/app (DeqeN x) (DeqeM x))
                ([x] meqtme/app (DmeqeN x) (DmeqeM x))
%%
             <- cut-eqtm-m _ DeqN DmeqN Dlook DeqeN DmeqeN
             <- cut-eqtm-m _ DeqM DmeqM Dlook DeqeM DmeqeM.

-lam     : cut-eqtm-m (mpair Bm Am)
              ([x] [d]
                  eqtm/lam
                  ([y] [e] DeqB x d y e : eqtm (B x y) (B' x y) (K x y))
                  (DeqA x d : eqtp (A x) (A' x) ektype))
              ([x] [d]
                  meqtm/lam
                  ([y] [e] DmeqB x d y e : meqtm (DeqB x d y e) Bm)
                  (DmeqA x d : meqtp (DeqA x d) Am))
              ([x] Dlook x : elookup (G x) x C)
%%
              ([x] eqtme/lam ([y] DeqeB' x y) (DeqeA x))
              ([x] meqtme/lam ([y] DmeqeB' x y) (DmeqeA x))
%%
           <- cut-eqtp-m Am DeqA DmeqA Dlook
              ([x] DeqeA x : eqtpe (G x) (A x) (A' x) ektype)
              ([x] DmeqeA x : meqtpe (DeqeA x) Am)
           <- ({x} {d}
                  cut-eqtm-m Bm ([y] [e] DeqB x d y e) ([y] [e] DmeqB x d y e)
                  ([y] elookup/hit)
                  ([y] DeqeB x d y 
                    : eqtme (econs (G x) y (A x)) (B x y) (B' x y) (K x y))
                  ([y] DmeqeB x d y
                    : meqtme (DeqeB x d y) Bm))
           <- ({y}
                  cut-eqtme-m Bm ([x] [d] DeqeB x d y) ([x] [d] DmeqeB x d y)
                  ([x] elookup/miss (Dlook x))
                  ([x] DeqeB' x y 
                    : eqtme (econs (G x) y (A x)) (B x y) (B' x y) (K x y))
                  ([x] DmeqeB' x y
                    : meqtme (DeqeB' x y) Bm)).

-ext      : cut-eqtm-m (mpair (mpair M1 M2) M3)
                ([x] [d]
                    eqtm/ext
                    ([y] [e] Deqtm x d y e
                      : eqtm (eapp (B x) y) (eapp (B' x) y) (K x y))
                    (DofB' x d : eof (B' x) (epi (A x) ([y] K'' x y)))
                    (DofB x d : eof (B x) (epi (A x) ([y] K' x y))))
                ([x] [d]
                    meqtm/ext
                    ([y] [e] Dmeqtm x d y e
                      : meqtm (Deqtm x d y e) M3)
                    (DmofB' x d : meof (DofB' x d) M2)
                    (DmofB x d : meof (DofB x d) M1))
                ([x] Dlook x : elookup (G x) x C)
%%
                ([x] eqtme/ext ([y] Deqtme' x y) (DofeB' x) (DofeB x))
                ([x] meqtme/ext ([y] Dmeqtme' x y) (DmofeB' x) (DmofeB x))
%%
             <- cut-eof-m M1 DofB DmofB Dlook
                ([x] DofeB x : eofe (G x) (B x) (epi (A x) ([y] K' x y)))
                ([x] DmofeB x : meofe (DofeB x) M1)
             <- cut-eof-m M2 DofB' DmofB' Dlook
                ([x] DofeB' x : eofe (G x) (B' x) (epi (A x) ([y] K'' x y)))
                ([x] DmofeB' x : meofe (DofeB' x) M2)
             <- ({x} {d}
                    cut-eqtm-m M3 ([y] [e] Deqtm x d y e) 
                    ([y] [e] Dmeqtm x d y e) ([y] elookup/hit)
                    ([y] Deqtme x d y
                      : eqtme (econs (G x) y (A x)) 
                        (eapp (B x) y) (eapp (B' x) y) (K x y))
                    ([y] Dmeqtme x d y
                      : meqtme (Deqtme x d y) M3))
             <- ({y}
                    cut-eqtme-m M3 ([x] [d] Deqtme x d y) 
                    ([x] [d] Dmeqtme x d y) ([x] elookup/miss (Dlook x))
                    ([x] Deqtme' x y
                      : eqtme (econs (G x) y (A x))
                        (eapp (B x) y) (eapp (B' x) y) (K x y))
                    ([x] Dmeqtme' x y
                      : meqtme (Deqtme' x y) M3)).

-extw     : cut-eqtm-m (mpair M1 M2)
                ([x] [d]
                    eqtm/extw
                    ([y] [e] Deqtp x d y e
                      : eqtm (eapp (B x) y) (eapp (B' x) y) (K x y))
                    (DeqtpB x d : eqtm (B x) (B' x) (epi (A x) ([y] K' x y))))
                ([x] [d]
                    meqtm/extw
                    ([y] [e] Dmeqtp x d y e : meqtm (Deqtp x d y e) M2)
                    (DmeqtpB x d : meqtm (DeqtpB x d) M1))
                ([x] Dlook x : elookup (G x) x C)
%%
                ([x] eqtme/extw ([y] Deqtpe' x y) (DeqtpeB x))
                ([x] meqtme/extw ([y] Dmeqtpe' x y) (DmeqtpeB x))
%%
             <- cut-eqtm-m M1 DeqtpB DmeqtpB Dlook
                ([x] DeqtpeB x 
                  : eqtme (G x) (B x) (B' x) (epi (A x) ([y] K' x y)))
                ([x] DmeqtpeB x : meqtme (DeqtpeB x) M1)
             <- ({x} {d}
                    cut-eqtm-m M2 ([y] [e] Deqtp x d y e) 
                    ([y] [e] Dmeqtp x d y e) ([y] elookup/hit)
                    ([y] Deqtpe x d y
                      : eqtme (econs (G x) y (A x)) 
                        (eapp (B x) y) (eapp (B' x) y) (K x y))
                    ([y] Dmeqtpe x d y
                      : meqtme (Deqtpe x d y) M2))
             <- ({y}
                    cut-eqtme-m M2 ([x] [d] Deqtpe x d y) 
                    ([x] [d] Dmeqtpe x d y) ([x] elookup/miss (Dlook x))
                    ([x] Deqtpe' x y
                      : eqtme (econs (G x) y (A x))
                        (eapp (B x) y) (eapp (B' x) y) (K x y))
                    ([x] Dmeqtpe' x y
                      : meqtme (Deqtpe' x y) M2)).


-beta     : cut-eqtm-m (mpair Nm Bm)
                ([x] [d]
                    eqtm/beta
                    (DofN x d: eof (N x) (A x))
                    ([y] [e] DofB x d y e : eof (B x y) (K x y)))
                ([x] [d]
                    meqtm/beta
                    (DmofN x d : meof (DofN x d) Nm)
                    ([y] [e] DmofB x d y e : meof (DofB x d y e) Bm))
                ([x] Dlook x : elookup (G x) x C)
%%
                ([x] eqtme/beta (DofeN x) ([y] DofeB' x y))
                ([x] meqtme/beta (DmofeN x) ([y] DmofeB' x y))
%%
             <- cut-eof-m Nm DofN DmofN Dlook
                ([x] DofeN x : eofe (G x) (N x) (A x))
                ([x] DmofeN x : meofe (DofeN x) Nm)
             <- ({x} {d}
                    cut-eof-m Bm ([y] [e] DofB x d y e)
                    ([y] [e] DmofB x d y e) ([y] elookup/hit)
                    ([y] DofeB x d y 
                      : eofe (econs (G x) y (A x)) (B x y) (K x y))
                    ([y] DmofeB x d y
                      : meofe (DofeB x d y) Bm))
             <- ({y}
                    cut-eofe-m Bm ([x] [d] DofeB x d y) ([x] [d] DmofeB x d y)
                    ([x] elookup/miss (Dlook x))
                    ([x] DofeB' x y
                      : eofe (econs (G x) y (A x)) (B x y) (K x y))
                    ([x] DmofeB' x y
                      : meofe (DofeB' x y) Bm)).

-sym      : cut-eqtm-m (msing M)
                ([x] [d]
                    eqtm/sym (Deqtm x d : eqtm (B x) (B' x) (K x)))
                ([x] [d]
                    meqtm/sym (Dmeqtm x d : meqtm (Deqtm x d) M))
                ([x] Dlook x : elookup (G x) x A)
%%
                ([x] eqtme/sym (Deqtme x))
                ([x] meqtme/sym (Dmeqtme x))
%%
             <- cut-eqtm-m M Deqtm Dmeqtm Dlook Deqtme Dmeqtme.

-trans    : cut-eqtm-m (mpair M1 M2)
                ([x] [d]
                    eqtm/trans
                    (Deq2 x d : eqtm (B' x) (B'' x) (K x))
                    (Deq1 x d : eqtm (B x ) (B' x) (K x)))
                ([x] [d]
                    meqtm/trans
                    (Dmeq2 x d : meqtm (Deq2 x d) M2)
                    (Dmeq1 x d : meqtm (Deq1 x d) M1))
                ([x] Dlook x : elookup (G x) x A)
%%
                ([x] eqtme/trans (Deqe2 x) (Deqe1 x))
                ([x] meqtme/trans (Dmeqe2 x) (Dmeqe1 x))
%%
             <- cut-eqtm-m M1 Deq1 Dmeq1 Dlook Deqe1 Dmeqe1
             <- cut-eqtm-m M2 Deq2 Dmeq2 Dlook Deqe2 Dmeqe2.

-refl     : cut-eqtm-m (msing M)
                ([x] [d]
                    eqtm/refl (Dof x d : eof (B x) (K x)))
                ([x] [d]
                    meqtm/refl (Dmof x d : meof (Dof x d) M))
                ([x] Dlook x : elookup (G x) x A)
%%
                ([x] eqtme/refl (Dofe x))
                ([x] meqtme/refl (Dmofe x))
%%
             <- cut-eof-m M Dof Dmof Dlook Dofe Dmofe.

-tcon     : cut-eqtm-m (mpair Am Km)
                ([x] [d] eqtm/typecon 
                    (Deqk x d : eqtp (K x) (K' x) _)
                    (Deqtm x d : eqtm (B x) (B' x) (K x)))
                ([x] [d] meqtm/tcon
                    (Dmeqk x d : meqtp (Deqk x d) Km)
                    (Dmeqtm x d : meqtm (Deqtm x d) Am))
                ([x] Dlook x : elookup (G x) x A)
%%
                ([x] eqtme/tcon (Deqke x) (Deqtme x))
                ([x] meqtme/tcon (Dmeqke x) (Dmeqtme x))
%%
             <- cut-eqtm-m Am Deqtm Dmeqtm Dlook Deqtme Dmeqtme
             <- cut-eqtp-m Km Deqk Dmeqk Dlook Deqke Dmeqke.


%%%%

-tp       : cut-eqkind-m munit ([x] [d] eqkind/tp) ([x] [d] meqkind/tp) _
                ([x] eqkinde/tp) ([x] meqkinde/tp).

-pi       : cut-eqkind-m (mpair Bm Am)
                ([x] [d]
                    eqkind/pi
                    ([y] [e] DeqB x d y e : eqkind (B x y) (B' x y))
                    (DeqA x d : eqtp (A x) (A' x) ektype))
                ([x] [d]
                    meqkind/pi
                    ([y] [e] DmeqB x d y e : meqkind (DeqB x d y e) Bm)
                    (DmeqA x d : meqtp (DeqA x d) Am))
                ([x] Dlook x : elookup (G x) x C)
%%
                ([x] eqkinde/pi ([y] DeqeB' x y) (DeqeA x))
                ([x] meqkinde/pi ([y] DmeqeB' x y) (DmeqeA x))
%%
             <- cut-eqtp-m Am DeqA DmeqA Dlook
                ([x] DeqeA x : eqtpe (G x) (A x) (A' x) ektype)
                ([x] DmeqeA x : meqtpe (DeqeA x) Am)
             <- ({x} {d}
                    cut-eqkind-m Bm 
                    ([y] [e] DeqB x d y e) ([y] [e] DmeqB x d y e)
                    ([y] elookup/hit)
                    ([y] DeqeB x d y 
                      : eqkinde (econs (G x) y (A x)) (B x y) (B' x y))
                    ([y] DmeqeB x d y
                      : meqkinde (DeqeB x d y) Bm))
             <- ({y}
                    cut-eqkinde-m Bm ([x] [d] DeqeB x d y) ([x] [d] DmeqeB x d y)
                    ([x] elookup/miss (Dlook x))
                    ([x] DeqeB' x y 
                      : eqkinde (econs (G x) y (A x)) (B x y) (B' x y))
                    ([x] DmeqeB' x y
                      : meqkinde (DeqeB' x y) Bm)).

-sym      : cut-eqkind-m _
                ([x] [d] eqkind/sym (Deq x d))
                ([x] [d] meqkind/sym (Dmeq x d))
                ([x] Dlook x)
                ([x] eqkinde/sym (Deqe x))
                ([x] meqkinde/sym (Dmeqe x))
             <- cut-eqkind-m _ Deq Dmeq Dlook Deqe Dmeqe.

-trans    : cut-eqkind-m _
                ([x] [d] eqkind/trans (Deq1 x d) (Deq2 x d))
                ([x] [d] meqkind/trn (Dmeq1 x d) (Dmeq2 x d))
                ([x] Dlook x)
                ([x] eqkinde/trans (Deqe1 x) (Deqe2 x))
                ([x] meqkinde/trn (Dmeqe1 x) (Dmeqe2 x))
             <- cut-eqkind-m _ Deq1 Dmeq1 Dlook Deqe1 Dmeqe1
             <- cut-eqkind-m _ Deq2 Dmeq2 Dlook Deqe2 Dmeqe2.

-refl     : cut-eqkind-m _
                ([x] [d] eqkind/refl (Dwf x d))
                ([x] [d] meqkind/ref (Dmwf x d))
                ([x] Dlook x)
                ([x] eqkinde/refl (Dwfe x))
                ([x] meqkinde/ref (Dmwfe x))
             <- cut-ewfkind-m _ Dwf Dmwf Dlook Dwfe Dmwfe.


%%%%

%%%%

-varioth  : cut-eofe-m _
                ([x] [d]
                    eofe/vari
                    (Dkof x d : ekofe (G x) B ektype)
                    (Dvof : evof Y B))
                ([x] [d]
                    meofe/vari
                    (Dmkof x d : mekofe (Dkof x d) Mm))
                ([x] Dlook x : elookup (G x) x A)
%%
                ([x] eofe/vari (Dkofe x) Dvof)
                ([x] meofe/vari (Dmkofe x))
%%
             <- cut-ekofe-m Mm Dkof Dmkof Dlook
                ([x] Dkofe x : ekofe (G x) B ektype)
                ([x] Dmkofe x : mekofe (Dkofe x) Mm).

-varisam  : cut-eofe-m _
                ([x] [d:evof x A]
                    eofe/vari
                    (Dkof x d : ekofe (G x) A ektype)
                    d)
                ([x] [d] meofe/vari (Dmkof x d))
                ([x] Dlook x : elookup (G x) x A)
%%
                ([x] eofe/var (Dkof' x) (Dlook x))
                ([x] meofe/var (Dmkof' x))
%%
             <- cut-ekofe-m _ Dkof Dmkof Dlook
                ([x] Dkof' x : ekofe (G x) A ektype)
                ([x] Dmkof' x).

-var      : cut-eofe-m (msing Mm)
                ([x] [d]
                    eofe/var
                    (Dkofe x d : ekofe (G x) (B x) ektype)
                    (DlookY x : elookup (G x) (Y x) (B x)))
                ([x] [d]
                    meofe/var
                    (Dmkofe x d : mekofe (Dkofe x d) Mm))
                ([x] DlookX x : elookup (G x) x A)
%%
                ([x] eofe/var (Dkofe' x) (DlookY x))
                ([x] meofe/var (Dmkofe' x))
%%
             <- cut-ekofe-m Mm Dkofe Dmkofe DlookX
                ([x] Dkofe' x : ekofe (G x) (B x) ektype)
                ([x] Dmkofe' x : mekofe (Dkofe' x) Mm).

-const    : cut-eofe-m _
                ([x] [d]
                    eofe/const
                    (DofB x d : ekofe (G x) (B x) ektype)
                    (DofC x : ecof C (B x)))
                ([x] [d]
                    meofe/const
                    (DmofB x d : mekofe (DofB x d) Bm))
                ([x] Dlook x : elookup (G x) x A)
%%
                ([x] eofe/const (DofeB x) (DofC x))
                ([x] meofe/const (DmofeB x))
%%                
             <- cut-ekofe-m _ ([x] [d] DofB x d) ([x] [d] DmofB x d) 
                ([x] Dlook x)
                ([x] DofeB x : ekofe (G x) (B x) ektype)
                ([x] DmofeB x : mekofe (DofeB x) Bm).

-app      : cut-eofe-m _
                ([x] [d]
                    eofe/app
                    (DofN x d : eofe (G x) (N x) (B x))
                    (DofM x d : eofe (G x) (M x) (epi (B x) ([y] C x y))))
                ([x] [d]
                    meofe/app
                    (DmofN x d : meofe (DofN x d) Nm)
                    (DmofM x d : meofe (DofM x d) Mm))
                ([x] Dlook x : elookup (G x) x A)
%%
                ([x] eofe/app (DofeN x) (DofeM x))
                ([x] meofe/app (DmofeN x) (DmofeM x))
%%
             <- cut-eofe-m _
                DofN DmofN Dlook DofeN ([x] DmofeN x : meofe (DofeN x) Nm)
             <- cut-eofe-m _
                DofM DmofM Dlook
                ([x] DofeM x : eofe (G x) (M x) (epi (B x) ([y] C x y)))
                ([x] DmofeM x : meofe (DofeM x) Mm).

-lam      : cut-eofe-m _
                ([x] [d]
                    eofe/lam
                    (DofA x d : ekofe (G x) (A x) ektype)
                    ([y] DofM x d y 
                      : eofe (econs (G x) y (A x)) (M x y) (B x y)))
                ([x] [d]
                    meofe/lam
                    (DmofA x d : mekofe (DofA x d) Am)
                    ([y] DmofM x d y : meofe (DofM x d y) Mm))
                ([x] Dlook x : elookup (G x) x C)
%%
                ([x] eofe/lam (DofA' x) ([y] DofM' x y))
                ([x] meofe/lam (DmofA' x) ([y] DmofM' x y))
%%
             <- cut-ekofe-m Am DofA DmofA Dlook
                ([x] DofA' x : ekofe (G x) (A x) ektype)
                ([x] DmofA' x : mekofe (DofA' x) Am)
             <- ({y}
                    cut-eofe-m Mm ([x] [d] DofM x d y) ([x] [d] DmofM x d y)
                    ([x] elookup/miss (Dlook x))
                    ([x] DofM' x y : eofe (econs (G x) y (A x)) (M x y) (B x y))
                    ([x] DmofM' x y : meofe (DofM' x y) Mm)).

-eqtp     : cut-eofe-m _
                ([x] [d]
                    eofe/eqtp
                    (Deqtp x d : eqtpe (G x) (B x) (C x) ektype)
                    (DofMB x d : eofe (G x) (M x) (B x)))
                ([x] [d]
                    meofe/eqtp
                    (Dmeqtp x d : meqtpe (Deqtp x d) M2)
                    (DmofMB x d : meofe (DofMB x d) M1))
                ([x] Dlook x : elookup (G x) x A)
%%
                ([x] eofe/eqtp (Deqtpe x) (DofeMB x))
                ([x] meofe/eqtp (Dmeqtpe x) (DmeofeMB x))
%%
             <- cut-eofe-m _ DofMB DmofMB Dlook
                ([x] DofeMB x : eofe (G x) (M x) (B x))
                ([x] DmeofeMB x : meofe (DofeMB x) M1)
             <- cut-eqtpe-m _ Deqtp Dmeqtp Dlook
                ([x] Deqtpe x : eqtpe (G x) (B x) (C x) ektype)
                ([x] Dmeqtpe x : meqtpe (Deqtpe x) M2).

-ext      : cut-eofe-m _
                ([x] [d]
                    eofe/ext
                    ([y] DofApp x d y 
                      : eofe (econs (G x) y (A x)) (eapp (M x) y) (B x y))
                    (DofM x d : eofe (G x) (M x) (epi (A x) ([y] B' x y))))
                ([x] [d]
                    meofe/ext
                    ([y] DmofApp x d y)
                    (DmofM x d))
                ([x] Dlook x : elookup (G x) x C)
%%
                ([x] eofe/ext ([y] DofApp' x y) (DofM' x))
                ([x] meofe/ext ([y] DmofApp' x y) (DmofM' x))
%%
             <- cut-eofe-m _ DofM DmofM Dlook DofM' DmofM'
             <- ({y}
                    cut-eofe-m _ ([x] [d] DofApp x d y) ([x] [d] DmofApp x d y)
                    ([x] elookup/miss (Dlook x))
                    ([x] DofApp' x y) ([x] DmofApp' x y)).

%%%%

-const    : cut-ekofe-m (msing M)
                ([x] [d]
                    ekofe/const
                    (Dwfkind x d : ewfkinde (G x) (K x))
                    (Deckofe x : eckof B (K x)))
                ([x] [d]
                    mekofe/const
                    (Dmwfkind x d : mewfkinde (Dwfkind x d) M))
                ([x] Dlook x : elookup (G x) x A)
%%
                ([x] ekofe/const (Dwfkinde x) (Deckofe x))
                ([x] mekofe/const (Dmwfkinde x))
%%
             <- cut-ewfkinde-m M Dwfkind Dmwfkind Dlook Dwfkinde Dmwfkinde.

-app      : cut-ekofe-m (mpair Mof Mkof)
                ([x] [d]
                    ekofe/app
                    (Dof x d : eofe (G x) (M x) (B x))
                    (Dkof x d : ekofe (G x) (A x) (ekpi (B x) ([y] K x y))))
                ([x] [d]
                    mekofe/app
                    (Dmof x d : meofe (Dof x d) Mof)
                    (Dmkof x d : mekofe (Dkof x d) Mkof))
                ([x] Dlook x : elookup (G x) x C)
%%
                ([x] ekofe/app (Dofe x) (Dkofe x))
                ([x] mekofe/app (Dmofe x) (Dmkofe x))
%%
             <- cut-eofe-m Mof Dof Dmof Dlook
                ([x] Dofe x : eofe (G x) (M x) (B x))
                ([x] Dmofe x : meofe (Dofe x) Mof)
             <- cut-ekofe-m Mkof Dkof Dmkof Dlook
                ([x] Dkofe x : ekofe (G x) (A x) (ekpi (B x) ([y] K x y)))
                ([x] Dmkofe x : mekofe (Dkofe x) Mkof).

-pi      : cut-ekofe-m _
                ([x] [d]
                    ekofe/pi
                    (DofA x d : ekofe (G x) (A x) ektype)
                    ([y] DofB x d y
                      : ekofe (econs (G x) y (A x)) (B x y) ektype))
                ([x] [d] mekofe/pi (DmofA x d) ([y] DmofB x d y))
                ([x] Dlook x : elookup (G x) x C)
%%
                ([x] ekofe/pi (DofA' x) ([y] DofB' x y))
                ([x] mekofe/pi (DmofA' x) ([y] DmofB' x y))
%%
             <- cut-ekofe-m _ DofA DmofA Dlook DofA' DmofA'
             <- ({y}
                    cut-ekofe-m _ ([x] [d] DofB x d y) ([x] [d] DmofB x d y)
                    ([x] elookup/miss (Dlook x))
                    ([x] DofB' x y)
                    ([x] DmofB' x y)).

-lam      : cut-ekofe-m _
                ([x] [d]
                    ekofe/lam
                    (DofA x d : ekofe (G x) (A x) ektype)
                    ([y] DofB x d y
                      : ekofe (econs (G x) y (A x)) (B x y) (K x y)))
                ([x] [d] mekofe/lam (DmofA x d) ([y] DmofB x d y))
                ([x] Dlook x : elookup (G x) x C)
%%
                ([x] ekofe/lam (DofA' x) ([y] DofB' x y))
                ([x] mekofe/lam (DmofA' x) ([y] DmofB' x y))
%%
             <- cut-ekofe-m _ DofA DmofA Dlook DofA' DmofA'
             <- ({y}
                    cut-ekofe-m _ ([x] [d] DofB x d y) ([x] [d] DmofB x d y)
                    ([x] elookup/miss (Dlook x))
                    ([x] DofB' x y)
                    ([x] DmofB' x y)).

-eqkind   : cut-ekofe-m (mpair Meq Mof)
                ([x] [d]
                    ekofe/eqkind
                    (Deqkind x d : eqkinde (G x) (K x) (L x))
                    (Dekof x d : ekofe (G x) (B x) (K x)))
                ([x] [d]
                    mekofe/eqk
                    (Dmeqkind x d : meqkinde (Deqkind x d) Meq)
                    (Dmekof x d : mekofe (Dekof x d) Mof))
                ([x] Dlook x : elookup (G x) x C)
%%
                ([x] ekofe/eqkind (Deqkinde x) (Dekofe x))
                ([x] mekofe/eqk (Dmeqkinde x) (Dmekofe x))
%%
             <- cut-ekofe-m Mof Dekof Dmekof Dlook Dekofe Dmekofe
             <- cut-eqkinde-m Meq Deqkind Dmeqkind Dlook Deqkinde Dmeqkinde.

-ext      : cut-ekofe-m _
                ([x] [d]
                    ekofe/ext
                    ([y] DofApp x d y 
                      : ekofe (econs (G x) y (B x)) (eaapp (C x) y) (K x y))
                    (DofC x d : ekofe (G x) (C x) (ekpi (B x) ([y] K' x y))))
                ([x] [d] mekofe/ext ([y] DmofApp x d y) (DmofC x d))
                ([x] Dlook x : elookup (G x) x A)
%%
                ([x] ekofe/ext ([y] DofApp' x y) (DofC' x))
                ([x] mekofe/ext ([y] DmofApp' x y) (DmofC' x))
%%
             <- cut-ekofe-m _ DofC DmofC Dlook
                ([x] DofC' x : ekofe (G x) (C x) (ekpi (B x) ([y] K' x y)))
                ([x] DmofC' x)
             <- ({y}
                    cut-ekofe-m _ ([x] [d] DofApp x d y) ([x] [d] DmofApp x d y)
                    ([x] elookup/miss (Dlook x))
                    ([x] DofApp' x y 
                      : ekofe (econs (G x) y (B x)) (eaapp (C x) y) (K x y))
                    ([x] DmofApp' x y)).

%%%%

-tp       : cut-ewfkinde-m _
                ([x] [d] ewfkinde/tp) ([x] [d] mewfkinde/tp) _
                ([x] ewfkinde/tp) ([x] mewfkinde/tp).

-pi      : cut-ewfkinde-m _
                ([x] [d]
                    ewfkinde/pi
                    (DofA x d : ekofe (G x) (A x) ektype)
                    ([y] DofB x d y
                      : ewfkinde (econs (G x) y (A x)) (B x y)))
                ([x] [d] mewfkinde/pi (DmofA x d) ([y] DmofB x d y))
                ([x] Dlook x : elookup (G x) x C)
%%
                ([x] ewfkinde/pi (DofA' x) ([y] DofB' x y))
                ([x] mewfkinde/pi (DmofA' x) ([y] DmofB' x y))
%%
             <- cut-ekofe-m _ DofA DmofA Dlook DofA' DmofA'
             <- ({y}
                    cut-ewfkinde-m _ ([x] [d] DofB x d y) ([x] [d] DmofB x d y)
                    ([x] elookup/miss (Dlook x))
                    ([x] DofB' x y)
                    ([x] DmofB' x y)).

%%%%

-app      : cut-eqtpe-m (mpair Mtm Mtp)
                ([x] [d]
                    eqtpe/app 
                    (Deqtm x d : eqtme (G x) (M x) (N x) (C x))
                    (Deqtp x d 
                      : eqtpe (G x) (A x) (B x) (ekpi (C x) ([y] K x y))))
                ([x] [d]
                    meqtpe/app
                    (Dmeqtm x d : meqtme (Deqtm x d) Mtm)
                    (Dmeqtp x d : meqtpe (Deqtp x d) Mtp))
                ([x] Dlook x : elookup (G x) x D)
%%
                ([x] eqtpe/app (Deqtme x) (Deqtpe x))
                ([x] meqtpe/app (Dmeqtme x) (Dmeqtpe x))
%%
             <- cut-eqtme-m Mtm Deqtm Dmeqtm Dlook 
                ([x] Deqtme x : eqtme (G x) (M x) (N x) (C x)) 
                ([x] Dmeqtme x : meqtme (Deqtme x) Mtm)
             <- cut-eqtpe-m Mtp Deqtp Dmeqtp Dlook 
                ([x] Deqtpe x 
                  : eqtpe (G x) (A x) (B x) (ekpi (C x) ([y] K x y))) 
                ([x] Dmeqtpe x : meqtpe (Deqtpe x) Mtp).

-pi     : cut-eqtpe-m (mpair Bm Am)
              ([x] [d]
                  eqtpe/pi
                  ([y] DeqB x d y : eqtpe _ (B x y) (B' x y) ektype)
                  (DeqA x d : eqtpe _ (A x) (A' x) ektype))
              ([x] [d]
                  meqtpe/pi
                  ([y] DmeqB x d y : meqtpe (DeqB x d y) Bm)
                  (DmeqA x d : meqtpe (DeqA x d) Am))
              ([x] Dlook x : elookup (G x) x C)
%%
              ([x] eqtpe/pi ([y] DeqeB' x y) (DeqeA x))
              ([x] meqtpe/pi ([y] DmeqeB' x y) (DmeqeA x))
%%
           <- cut-eqtpe-m Am DeqA DmeqA Dlook
              ([x] DeqeA x : eqtpe (G x) (A x) (A' x) ektype)
              ([x] DmeqeA x : meqtpe (DeqeA x) Am)
           <- ({y}
                  cut-eqtpe-m Bm ([x] [d] DeqB x d y) ([x] [d] DmeqB x d y)
                  ([x] elookup/miss (Dlook x))
                  ([x] DeqeB' x y 
                    : eqtpe (econs (G x) y (A x)) (B x y) (B' x y) ektype)
                  ([x] DmeqeB' x y
                    : meqtpe (DeqeB' x y) Bm)).

-lam     : cut-eqtpe-m (mpair Bm Am)
              ([x] [d]
                  eqtpe/lam
                  ([y] DeqB x d y : eqtpe _ (B x y) (B' x y) (K x y))
                  (DeqA x d : eqtpe _ (A x) (A' x) ektype))
              ([x] [d]
                  meqtpe/lam
                  ([y] DmeqB x d y : meqtpe (DeqB x d y) Bm)
                  (DmeqA x d : meqtpe (DeqA x d) Am))
              ([x] Dlook x : elookup (G x) x C)
%%
              ([x] eqtpe/lam ([y] DeqeB' x y) (DeqeA x))
              ([x] meqtpe/lam ([y] DmeqeB' x y) (DmeqeA x))
%%
           <- cut-eqtpe-m Am DeqA DmeqA Dlook
              ([x] DeqeA x : eqtpe (G x) (A x) (A' x) ektype)
              ([x] DmeqeA x : meqtpe (DeqeA x) Am)
           <- ({y}
                  cut-eqtpe-m Bm ([x] [d] DeqB x d y) ([x] [d] DmeqB x d y)
                  ([x] elookup/miss (Dlook x))
                  ([x] DeqeB' x y 
                    : eqtpe (econs (G x) y (A x)) (B x y) (B' x y) (K x y))
                  ([x] DmeqeB' x y
                    : meqtpe (DeqeB' x y) Bm)).

-ext      : cut-eqtpe-m (mpair (mpair M1 M2) M3)
                ([x] [d]
                    eqtpe/ext
                    ([y] Deqtp x d y
                      : eqtpe _ (eaapp (B x) y) (eaapp (B' x) y) (K x y))
                    (DofB' x d : ekofe _ (B' x) (ekpi (A x) ([y] K'' x y)))
                    (DofB x d : ekofe _ (B x) (ekpi (A x) ([y] K' x y))))
                ([x] [d]
                    meqtpe/ext
                    ([y] Dmeqtp x d y
                      : meqtpe (Deqtp x d y) M3)
                    (DmofB' x d : mekofe (DofB' x d) M2)
                    (DmofB x d : mekofe (DofB x d) M1))
                ([x] Dlook x : elookup (G x) x C)
%%
                ([x] eqtpe/ext ([y] Deqtpe' x y) (DofeB' x) (DofeB x))
                ([x] meqtpe/ext ([y] Dmeqtpe' x y) (DmofeB' x) (DmofeB x))
%%
             <- cut-ekofe-m M1 DofB DmofB Dlook
                ([x] DofeB x : ekofe (G x) (B x) (ekpi (A x) ([y] K' x y)))
                ([x] DmofeB x : mekofe (DofeB x) M1)
             <- cut-ekofe-m M2 DofB' DmofB' Dlook
                ([x] DofeB' x : ekofe (G x) (B' x) (ekpi (A x) ([y] K'' x y)))
                ([x] DmofeB' x : mekofe (DofeB' x) M2)
             <- ({y}
                    cut-eqtpe-m M3 ([x] [d] Deqtp x d y) 
                    ([x] [d] Dmeqtp x d y) ([x] elookup/miss (Dlook x))
                    ([x] Deqtpe' x y
                      : eqtpe (econs (G x) y (A x))
                        (eaapp (B x) y) (eaapp (B' x) y) (K x y))
                    ([x] Dmeqtpe' x y
                      : meqtpe (Deqtpe' x y) M3)).

-extw     : cut-eqtpe-m (mpair M1 M2)
                ([x] [d]
                    eqtpe/extw
                    ([y] Deqtp x d y
                      : eqtpe _ (eaapp (B x) y) (eaapp (B' x) y) (K x y))
                    (DeqB x d 
                      : eqtpe _ (B x) (B' x) (ekpi (A x) ([y] K' x y))))
                ([x] [d]
                    meqtpe/extw
                    ([y] Dmeqtp x d y : meqtpe (Deqtp x d y) M2)
                    (DmeqB x d : meqtpe (DeqB x d) M1))
                ([x] Dlook x : elookup (G x) x C)
%%
                ([x] eqtpe/extw ([y] Deqtpe' x y) (DeqtpeB x))
                ([x] meqtpe/extw ([y] Dmeqtpe' x y) (DmeqtpeB x))
%%
             <- cut-eqtpe-m M1 DeqB DmeqB Dlook
                ([x] DeqtpeB x : eqtpe (G x) (B x) (B' x) (ekpi (A x) ([y] K' x y)))
                ([x] DmeqtpeB x : meqtpe (DeqtpeB x) M1)
             <- ({y}
                    cut-eqtpe-m M2 ([x] [d] Deqtp x d y) 
                    ([x] [d] Dmeqtp x d y) ([x] elookup/miss (Dlook x))
                    ([x] Deqtpe' x y
                      : eqtpe (econs (G x) y (A x))
                        (eaapp (B x) y) (eaapp (B' x) y) (K x y))
                    ([x] Dmeqtpe' x y
                      : meqtpe (Deqtpe' x y) M2)).

-beta     : cut-eqtpe-m (mpair Nm Bm)
                ([x] [d]
                    eqtpe/beta
                    (DofN x d : eofe (G x) (N x) (A x))
                    ([y] DofB x d y 
                      : ekofe (econs (G x) y (A x)) (B x y) (K x y)))
                ([x] [d]
                    meqtpe/beta
                    (DmofN x d : meofe (DofN x d) Nm)
                    ([y] DmofB x d y : mekofe (DofB x d y) Bm))
                ([x] Dlook x : elookup (G x) x C)
%%
                ([x] eqtpe/beta (DofeN x) ([y] DofeB' x y))
                ([x] meqtpe/beta (DmofeN x) ([y] DmofeB' x y))
%%
             <- cut-eofe-m Nm DofN DmofN Dlook
                ([x] DofeN x : eofe (G x) (N x) (A x))
                ([x] DmofeN x : meofe (DofeN x) Nm)
             <- ({y}
                    cut-ekofe-m Bm ([x] [d] DofB x d y) ([x] [d] DmofB x d y)
                    ([x] elookup/miss (Dlook x))
                    ([x] DofeB' x y
                      : ekofe (econs (G x) y (A x)) (B x y) (K x y))
                    ([x] DmofeB' x y
                      : mekofe (DofeB' x y) Bm)).

-sym      : cut-eqtpe-m (msing M)
                ([x] [d]
                    eqtpe/sym (Deqtp x d : eqtpe (G x) (B x) (B' x) (K x)))
                ([x] [d]
                    meqtpe/sym (Dmeqtp x d : meqtpe (Deqtp x d) M))
                ([x] Dlook x : elookup (G x) x A)
%%
                ([x] eqtpe/sym (Deqtpe x))
                ([x] meqtpe/sym (Dmeqtpe x))
%%
             <- cut-eqtpe-m M Deqtp Dmeqtp Dlook Deqtpe Dmeqtpe.

-trans    : cut-eqtpe-m (mpair M1 M2)
                ([x] [d]
                    eqtpe/trans
                    (Deq2 x d : eqtpe (G x) (B' x) (B'' x) (K x))
                    (Deq1 x d : eqtpe (G x) (B x) (B' x) (K x)))
                ([x] [d]
                    meqtpe/trans
                    (Dmeq2 x d : meqtpe (Deq2 x d) M2)
                    (Dmeq1 x d : meqtpe (Deq1 x d) M1))
                ([x] Dlook x : elookup (G x) x A)
%%
                ([x] eqtpe/trans (Deqe2 x) (Deqe1 x))
                ([x] meqtpe/trans (Dmeqe2 x) (Dmeqe1 x))
%%
             <- cut-eqtpe-m M1 Deq1 Dmeq1 Dlook Deqe1 Dmeqe1
             <- cut-eqtpe-m M2 Deq2 Dmeq2 Dlook Deqe2 Dmeqe2.

-refl     : cut-eqtpe-m (msing M)
                ([x] [d]
                    eqtpe/refl (Dkof x d : ekofe (G x) (B x) (K x)))
                ([x] [d]
                    meqtpe/refl (Dmkof x d : mekofe (Dkof x d) M))
                ([x] Dlook x : elookup (G x) x A)
%%
                ([x] eqtpe/refl (Dkofe x))
                ([x] meqtpe/refl (Dmkofe x))
%%
             <- cut-ekofe-m M Dkof Dmkof Dlook Dkofe Dmkofe.

-kcon     : cut-eqtpe-m (mpair Am Km)
                ([x] [d] eqtpe/kcon 
                    (Deqk x d : eqkinde _ (K x) (K' x))
                    (Deqtp x d : eqtpe _ (B x) (B' x) (K x)))
                ([x] [d] meqtpe/kcon
                    (Dmeqk x d : meqkinde (Deqk x d) Km)
                    (Dmeqtp x d : meqtpe (Deqtp x d) Am))
                ([x] Dlook x : elookup (G x) x A)
%%
                ([x] eqtpe/kcon (Deqke x) (Deqtpe x))
                ([x] meqtpe/kcon (Dmeqke x) (Dmeqtpe x))
%%
             <- cut-eqtpe-m Am Deqtp Dmeqtp Dlook Deqtpe Dmeqtpe
             <- cut-eqkinde-m Km Deqk Dmeqk Dlook Deqke Dmeqke.

%%%%

-app      : cut-eqtme-m (mpair Mtm Mtp)
                ([x] [d]
                    eqtme/app 
                    (Deqtm x d : eqtme (G x) (M x) (N x) (C x))
                    (Deqtp x d 
                      : eqtme (G x) (A x) (B x) (epi (C x) ([y] K x y))))
                ([x] [d]
                    meqtme/app
                    (Dmeqtm x d : meqtme (Deqtm x d) Mtm)
                    (Dmeqtp x d : meqtme (Deqtp x d) Mtp))
                ([x] Dlook x : elookup (G x) x D)
%%
                ([x] eqtme/app (Deqtme x) (Deqtpe x))
                ([x] meqtme/app (Dmeqtme x) (Dmeqtpe x))
%%
             <- cut-eqtme-m Mtm Deqtm Dmeqtm Dlook 
                ([x] Deqtme x : eqtme (G x) (M x) (N x) (C x)) 
                ([x] Dmeqtme x : meqtme (Deqtme x) Mtm)
             <- cut-eqtme-m Mtp Deqtp Dmeqtp Dlook 
                ([x] Deqtpe x 
                  : eqtme (G x) (A x) (B x) (epi (C x) ([y] K x y))) 
                ([x] Dmeqtpe x : meqtme (Deqtpe x) Mtp).

-lam     : cut-eqtme-m (mpair Bm Am)
              ([x] [d]
                  eqtme/lam
                  ([y] DeqB x d y : eqtme _ (B x y) (B' x y) (K x y))
                  (DeqA x d : eqtpe _ (A x) (A' x) ektype))
              ([x] [d]
                  meqtme/lam
                  ([y] DmeqB x d y : meqtme (DeqB x d y) Bm)
                  (DmeqA x d : meqtpe (DeqA x d) Am))
              ([x] Dlook x : elookup (G x) x C)
%%
              ([x] eqtme/lam ([y] DeqeB' x y) (DeqeA x))
              ([x] meqtme/lam ([y] DmeqeB' x y) (DmeqeA x))
%%
           <- cut-eqtpe-m Am DeqA DmeqA Dlook
              ([x] DeqeA x : eqtpe (G x) (A x) (A' x) ektype)
              ([x] DmeqeA x : meqtpe (DeqeA x) Am)
           <- ({y}
                  cut-eqtme-m Bm ([x] [d] DeqB x d y) ([x] [d] DmeqB x d y)
                  ([x] elookup/miss (Dlook x))
                  ([x] DeqeB' x y 
                    : eqtme (econs (G x) y (A x)) (B x y) (B' x y) (K x y))
                  ([x] DmeqeB' x y
                    : meqtme (DeqeB' x y) Bm)).

-ext      : cut-eqtme-m (mpair (mpair M1 M2) M3)
                ([x] [d]
                    eqtme/ext
                    ([y] Deqtp x d y
                      : eqtme _ (eapp (B x) y) (eapp (B' x) y) (K x y))
                    (DofB' x d : eofe _ (B' x) (epi (A x) ([y] K'' x y)))
                    (DofB x d : eofe _ (B x) (epi (A x) ([y] K' x y))))
                ([x] [d]
                    meqtme/ext
                    ([y] Dmeqtp x d y
                      : meqtme (Deqtp x d y) M3)
                    (DmofB' x d : meofe (DofB' x d) M2)
                    (DmofB x d : meofe (DofB x d) M1))
                ([x] Dlook x : elookup (G x) x C)
%%
                ([x] eqtme/ext ([y] Deqtpe' x y) (DofeB' x) (DofeB x))
                ([x] meqtme/ext ([y] Dmeqtpe' x y) (DmofeB' x) (DmofeB x))
%%
             <- cut-eofe-m M1 DofB DmofB Dlook
                ([x] DofeB x : eofe (G x) (B x) (epi (A x) ([y] K' x y)))
                ([x] DmofeB x : meofe (DofeB x) M1)
             <- cut-eofe-m M2 DofB' DmofB' Dlook
                ([x] DofeB' x : eofe (G x) (B' x) (epi (A x) ([y] K'' x y)))
                ([x] DmofeB' x : meofe (DofeB' x) M2)
             <- ({y}
                    cut-eqtme-m M3 ([x] [d] Deqtp x d y) 
                    ([x] [d] Dmeqtp x d y) ([x] elookup/miss (Dlook x))
                    ([x] Deqtpe' x y
                      : eqtme (econs (G x) y (A x))
                        (eapp (B x) y) (eapp (B' x) y) (K x y))
                    ([x] Dmeqtpe' x y
                      : meqtme (Deqtpe' x y) M3)).

-extw     : cut-eqtme-m (mpair M1 M2)
                ([x] [d]
                    eqtme/extw
                    ([y] Deqtm x d y
                      : eqtme _ (eapp (B x) y) (eapp (B' x) y) (K x y))
                    (DeqB x d 
                      : eqtme _ (B x) (B' x) (epi (A x) ([y] K' x y))))
                ([x] [d]
                    meqtme/extw
                    ([y] Dmeqtm x d y : meqtme (Deqtm x d y) M2)
                    (DmeqB x d : meqtme (DeqB x d) M1))
                ([x] Dlook x : elookup (G x) x C)
%%
                ([x] eqtme/extw ([y] Deqtme' x y) (DeqtmeB x))
                ([x] meqtme/extw ([y] Dmeqtme' x y) (DmeqtmeB x))
%%
             <- cut-eqtme-m M1 DeqB DmeqB Dlook
                ([x] DeqtmeB x : eqtme (G x) (B x) (B' x) (epi (A x) ([y] K' x y)))
                ([x] DmeqtmeB x : meqtme (DeqtmeB x) M1)
             <- ({y}
                    cut-eqtme-m M2 ([x] [d] Deqtm x d y) 
                    ([x] [d] Dmeqtm x d y) ([x] elookup/miss (Dlook x))
                    ([x] Deqtme' x y
                      : eqtme (econs (G x) y (A x))
                        (eapp (B x) y) (eapp (B' x) y) (K x y))
                    ([x] Dmeqtme' x y
                      : meqtme (Deqtme' x y) M2)).

-beta     : cut-eqtme-m _
                ([x] [d]
                    eqtme/beta
                    (DofN x d : eofe (G x) (N x) (A x))
                    ([y] DofB x d y 
                      : eofe (econs (G x) y (A x)) (B x y) (K x y)))
                ([x] [d]
                    meqtme/beta
                    (DmofN x d : meofe (DofN x d) _)
                    ([y] DmofB x d y : meofe (DofB x d y) _))
                ([x] Dlook x : elookup (G x) x C)
%%
                ([x] eqtme/beta (DofeN x) ([y] DofeB' x y))
                ([x] meqtme/beta (DmofeN x) ([y] DmofeB' x y))
%%
             <- cut-eofe-m _ DofN DmofN Dlook
                ([x] DofeN x : eofe (G x) (N x) (A x))
                ([x] DmofeN x : meofe (DofeN x) Nm)
             <- ({y}
                    cut-eofe-m _ ([x] [d] DofB x d y) ([x] [d] DmofB x d y)
                    ([x] elookup/miss (Dlook x))
                    ([x] DofeB' x y
                      : eofe (econs (G x) y (A x)) (B x y) (K x y))
                    ([x] DmofeB' x y
                      : meofe (DofeB' x y) Bm)).

-sym      : cut-eqtme-m (msing M)
                ([x] [d]
                    eqtme/sym (Deqtp x d : eqtme (G x) (B x) (B' x) (K x)))
                ([x] [d]
                    meqtme/sym (Dmeqtp x d : meqtme (Deqtp x d) M))
                ([x] Dlook x : elookup (G x) x A)
%%
                ([x] eqtme/sym (Deqtpe x))
                ([x] meqtme/sym (Dmeqtpe x))
%%
             <- cut-eqtme-m M Deqtp Dmeqtp Dlook Deqtpe Dmeqtpe.

-trans    : cut-eqtme-m (mpair M1 M2)
                ([x] [d]
                    eqtme/trans
                    (Deq2 x d : eqtme (G x) (B' x) (B'' x) (K x))
                    (Deq1 x d : eqtme (G x) (B x) (B' x) (K x)))
                ([x] [d]
                    meqtme/trans
                    (Dmeq2 x d : meqtme (Deq2 x d) M2)
                    (Dmeq1 x d : meqtme (Deq1 x d) M1))
                ([x] Dlook x : elookup (G x) x A)
%%
                ([x] eqtme/trans (Deqe2 x) (Deqe1 x))
                ([x] meqtme/trans (Dmeqe2 x) (Dmeqe1 x))
%%
             <- cut-eqtme-m M1 Deq1 Dmeq1 Dlook Deqe1 Dmeqe1
             <- cut-eqtme-m M2 Deq2 Dmeq2 Dlook Deqe2 Dmeqe2.

-refl     : cut-eqtme-m (msing M)
                ([x] [d]
                    eqtme/refl (Dof x d : eofe (G x) (B x) (K x)))
                ([x] [d]
                    meqtme/refl (Dmof x d : meofe (Dof x d) M))
                ([x] Dlook x : elookup (G x) x A)
%%
                ([x] eqtme/refl (Dofe x))
                ([x] meqtme/refl (Dmofe x))
%%
             <- cut-eofe-m M Dof Dmof Dlook Dofe Dmofe.

-tcon     : cut-eqtme-m (mpair Am Km)
                ([x] [d] eqtme/tcon 
                    (Deqk x d : eqtpe _ (K x) (K' x) _)
                    (Deqtm x d : eqtme _ (B x) (B' x) (K x)))
                ([x] [d] meqtme/tcon
                    (Dmeqk x d : meqtpe (Deqk x d) Km)
                    (Dmeqtm x d : meqtme (Deqtm x d) Am))
                ([x] Dlook x : elookup (G x) x A)
%%
                ([x] eqtme/tcon (Deqke x) (Deqtme x))
                ([x] meqtme/tcon (Dmeqke x) (Dmeqtme x))
%%
             <- cut-eqtme-m Am Deqtm Dmeqtm Dlook Deqtme Dmeqtme
             <- cut-eqtpe-m Km Deqk Dmeqk Dlook Deqke Dmeqke.

%%%%

-tp     : cut-eqkinde-m _ ([_][_] eqkinde/tp) ([_][_] meqkinde/tp) _
              ([_] eqkinde/tp) ([_] meqkinde/tp).

-pi     : cut-eqkinde-m (mpair Bm Am)
              ([x] [d]
                  eqkinde/pi
                  ([y] DeqB x d y : eqkinde _ (B x y) (B' x y))
                  (DeqA x d : eqtpe _ (A x) (A' x) ektype))
              ([x] [d]
                  meqkinde/pi
                  ([y] DmeqB x d y : meqkinde (DeqB x d y) Bm)
                  (DmeqA x d : meqtpe (DeqA x d) Am))
              ([x] Dlook x : elookup (G x) x C)
%%
              ([x] eqkinde/pi ([y] DeqeB' x y) (DeqeA x))
              ([x] meqkinde/pi ([y] DmeqeB' x y) (DmeqeA x))
%%
           <- cut-eqtpe-m Am DeqA DmeqA Dlook
              ([x] DeqeA x : eqtpe (G x) (A x) (A' x) ektype)
              ([x] DmeqeA x : meqtpe (DeqeA x) Am)
           <- ({y}
                  cut-eqkinde-m Bm ([x] [d] DeqB x d y) ([x] [d] DmeqB x d y)
                  ([x] elookup/miss (Dlook x))
                  ([x] DeqeB' x y 
                    : eqkinde (econs (G x) y (A x)) (B x y) (B' x y))
                  ([x] DmeqeB' x y
                    : meqkinde (DeqeB' x y) Bm)).

-sym      : cut-eqkinde-m (msing M)
                ([x] [d]
                    eqkinde/sym (Deqkind x d : eqkinde (G x) (B x) (B' x)))
                ([x] [d]
                    meqkinde/sym (Dmeqkind x d : meqkinde (Deqkind x d) M))
                ([x] Dlook x : elookup (G x) x A)
%%
                ([x] eqkinde/sym (Deqkinde x))
                ([x] meqkinde/sym (Dmeqkinde x))
%%
             <- cut-eqkinde-m M Deqkind Dmeqkind Dlook Deqkinde Dmeqkinde.

-trans    : cut-eqkinde-m _
                ([x] [d]
                    eqkinde/trans
                    (Deq2 x d : eqkinde (G x) (B' x) (B'' x))
                    (Deq1 x d : eqkinde (G x) (B x) (B' x)))
                ([x] [d]
                    meqkinde/trn
                    (Dmeq2 x d : meqkinde (Deq2 x d) M2)
                    (Dmeq1 x d : meqkinde (Deq1 x d) M1))
                ([x] Dlook x : elookup (G x) x A)
%%
                ([x] eqkinde/trans (Deqe2 x) (Deqe1 x))
                ([x] meqkinde/trn (Dmeqe2 x) (Dmeqe1 x))
%%
             <- cut-eqkinde-m M1 Deq1 Dmeq1 Dlook Deqe1 Dmeqe1
             <- cut-eqkinde-m M2 Deq2 Dmeq2 Dlook Deqe2 Dmeqe2.

-refl     : cut-eqkinde-m (msing M)
                ([x] [d]
                    eqkinde/refl (Dwfkind x d : ewfkinde (G x) (K x)))
                ([x] [d]
                    meqkinde/ref (Dmwfkind x d : mewfkinde (Dwfkind x d) M))
                ([x] Dlook x : elookup (G x) x A)
%%
                ([x] eqkinde/refl (Dwfkinde x))
                ([x] meqkinde/ref (Dmwfkinde x))
%%
             <- cut-ewfkinde-m M Dwfkind Dmwfkind Dlook Dwfkinde Dmwfkinde.

%worlds (ecsig | easig | evar | eovar | ebind)
  (cut-eof-m _ _ _ _ _ _)
  (cut-ekof-m _ _ _ _ _ _)
  (cut-ewfkind-m _ _ _ _ _ _)
  (cut-eqtp-m _ _ _ _ _ _)
  (cut-eqtm-m _ _ _ _ _ _)
  (cut-eqkind-m _ _ _ _ _ _)
  (cut-eofe-m _ _ _ _ _ _)
  (cut-ekofe-m _ _ _ _ _ _ )
  (cut-ewfkinde-m _ _ _ _ _ _)
  (cut-eqtme-m _ _ _ _ _ _)
  (cut-eqtpe-m _ _ _ _ _ _)
  (cut-eqkinde-m _ _ _ _ _ _).
%total {(M1 M2 M3 M4 M5 M6 M7 M8 M9 M10 M11 M12)}
  (cut-eof-m M1 _ _ _ _ _)
  (cut-ekof-m M2 _ _ _ _ _)
  (cut-ewfkind-m M3 _ _ _ _ _)
  (cut-eqtp-m M4 _ _ _ _ _)
  (cut-eqtm-m M5 _ _ _ _ _)
  (cut-eqkind-m M6 _ _ _ _ _)
  (cut-eofe-m M7 _ _ _ _ _)
  (cut-ekofe-m M8 _ _ _ _ _)
  (cut-ewfkinde-m M9 _ _ _ _ _)
  (cut-eqtpe-m M10 _ _ _ _ _)
  (cut-eqtme-m M11 _ _ _ _ _)
  (cut-eqkinde-m M12 _ _ _ _ _).

%% without a metric

cut-eof : ({x} evof x A -> eof (M x) (B x))
           -> ({x} elookup (G x) x A)
%%
           -> ({x} eofe (G x) (M x) (B x)) -> type.
%mode cut-eof +X1 +X2 -X3.

-     : cut-eof ([x] [d] Deof x d : eof (M x) (B x)) ([x] Dlook x)
            ([x] Deofe x)
         <- ({x} {d}
                can-meof (Deof x d) 
                (Dmeof x d : meof (Deof x d) Mm))
         <- cut-eof-m Mm Deof Dmeof Dlook
            ([x] Deofe x : eofe (G x) (M x) (B x))
            _.

%worlds (ecsig | easig | evar | eovar | ebind) (cut-eof _ _ _).
%total {} (cut-eof _ _ _).

cut-ekof  : ({x} evof x A -> ekof (B x) (K x))
           -> ({x} elookup (G x) x A)
%%
           -> ({x} ekofe (G x) (B x) (K x)) -> type.
%mode cut-ekof +X1 +X2 -X3.

-     : cut-ekof ([x] [d] Dkof x d : ekof (A x) (K x)) ([x] Dlook x)
            ([x] Dkofe x)
         <- ({x} {d}
                can-mekof (Dkof x d)
                (Dmkof x d : mekof (Dkof x d) Mm))
         <- cut-ekof-m Mm Dkof Dmkof Dlook
            ([x] Dkofe x : ekofe (G x) (A x) (K x))
            _.

%worlds (ecsig | easig | evar | eovar | ebind) (cut-ekof _ _ _).
%total {} (cut-ekof _ _ _).

cut-ewfkind  : ({x} evof x A -> ewfkind (K x))
           -> ({x} elookup (G x) x A)
%%
           -> ({x} ewfkinde (G x) (K x)) -> type.
%mode cut-ewfkind +X1 +X2 -X3.

-     : cut-ewfkind ([x] [d] Dwfkind x d : ewfkind (K x)) ([x] Dlook x)
            ([x] Dwfkinde x)
         <- ({x} {d}
                can-mewfkind (Dwfkind x d)
                (Dmwfkind x d : mewfkind (Dwfkind x d) Mm))
         <- cut-ewfkind-m Mm Dwfkind Dmwfkind Dlook
            ([x] Dwfkinde x : ewfkinde (G x) (K x))
            _.

%worlds (ecsig | easig | evar | eovar | ebind) (cut-ewfkind _ _ _).
%total {} (cut-ewfkind _ _ _).


cut-eqtm  : ({x} evof x A -> eqtm (B x) (C x) (K x))
             -> ({x} elookup (G x) x A)
%%
             -> ({x} eqtme (G x) (B x) (C x) (K x)) -> type.
%mode cut-eqtm +X1 +X2 -X3.

-     : cut-eqtm ([x] [d] Deqtm x d : eqtm (A x) (A' x) (K x)) ([x] Dlook x)
            ([x] Deqtme x)
         <- ({x} {d}
                can-meqtm (Deqtm x d)
                (Dmeqtm x d : meqtm (Deqtm x d) Mm))
         <- cut-eqtm-m Mm Deqtm Dmeqtm Dlook
            ([x] Deqtme x : eqtme (G x) (A x) (A' x) (K x))
            _.

%worlds (ecsig | easig | evar | eovar | ebind) (cut-eqtm _ _ _).
%total {} (cut-eqtm _ _ _).


cut-eqtp  : ({x} evof x A -> eqtp (B x) (C x) (K x))
             -> ({x} elookup (G x) x A)
%%
             -> ({x} eqtpe (G x) (B x) (C x) (K x)) -> type.
%mode cut-eqtp +X1 +X2 -X3.

-     : cut-eqtp ([x] [d] Deqtp x d : eqtp (A x) (A' x) (K x)) ([x] Dlook x)
            ([x] Deqtpe x)
         <- ({x} {d}
                can-meqtp (Deqtp x d)
                (Dmeqtp x d : meqtp (Deqtp x d) Mm))
         <- cut-eqtp-m Mm Deqtp Dmeqtp Dlook
            ([x] Deqtpe x : eqtpe (G x) (A x) (A' x) (K x))
            _.

%worlds (ecsig | easig | evar | eovar | ebind) (cut-eqtp _ _ _).
%total {} (cut-eqtp _ _ _).

cut-eqkind  : ({x} evof x A -> eqkind (B x) (C x))
             -> ({x} elookup (G x) x A)
%%
             -> ({x} eqkinde (G x) (B x) (C x)) -> type.
%mode cut-eqkind +X1 +X2 -X3.

-     : cut-eqkind ([x] [d] Deqkind x d : eqkind (A x) (A' x)) ([x] Dlook x)
            ([x] Deqkinde x)
         <- ({x} {d}
                can-meqkind (Deqkind x d)
                (Dmeqkind x d : meqkind (Deqkind x d) Mm))
         <- cut-eqkind-m Mm Deqkind Dmeqkind Dlook
            ([x] Deqkinde x : eqkinde (G x) (A x) (A' x))
            _.

%worlds (ecsig | easig | evar | eovar | ebind) (cut-eqkind _ _ _).
%total {} (cut-eqkind _ _ _).


eappend-bounded-contra : eappend (econs G1 X A) G2 G -> ebounded G X
                          -> false -> type.
%mode eappend-bounded-contra +X1 +X2 -X3.

-       : eappend-bounded-contra eappend/nil (ebounded/cons _ Dprecedes) Dfalse
           <- eprecedes-antisymm Dprecedes Dfalse.
-       : eappend-bounded-contra 
              (eappend/cons Dapp) (ebounded/cons Debounded Dprecedes)
              Dfalse
           <- ebounded-increase-bound Debounded Dprecedes Debounded'
           <- eappend-bounded-contra Dapp Debounded' Dfalse.

%worlds (ecsig | easig | ebind | eovar | evar) (eappend-bounded-contra _ _ _).
%total D (eappend-bounded-contra D _ _).


strengthen-ebounded : ({x} eisvar x I -> ebounded G Y) -> ebounded G Y -> type.
%mode strengthen-ebounded +X1 -X2.

- : strengthen-ebounded ([x] [d] ebounded/nil D) (ebounded/nil D).

- : strengthen-ebounded
        ([x] [d] ebounded/cons (Dbound x d) Dprec)
        (ebounded/cons Dbound' Dprec)
     <- strengthen-ebounded Dbound Dbound'.

%worlds (ecsig | easig | evar | ebind | eovar) (strengthen-ebounded _ _).
%total D (strengthen-ebounded D _).


ecsub-ebounded : ({x} eisvar x I -> ebounded (G x) Y) -> ecsub ([x] G x) M G' 
                -> ebounded G' Y -> type.
%mode ecsub-ebounded +X1 +X2 -X3. 

- : ecsub-ebounded ([x] [d] ebounded/cons (Dbound x d) (Dprec x d)) ecsub/base
        Dbound''
     <- ({x} {d}
            ebounded-increase-bound (Dbound x d) (Dprec x d) (Dbound' x d))
     <- strengthen-ebounded Dbound' Dbound''.

- : ecsub-ebounded 
        ([x] [d] ebounded/cons (Dbound x d) Dprec) 
        (ecsub/cons Decsub)
        (ebounded/cons Dbound' Dprec)
     <- ecsub-ebounded Dbound Decsub Dbound'.

- : ecsub-ebounded
        ([x] [d] Dbound x d : ebounded enil Y)
        ecsub/nil
        Dbound'
     <- strengthen-ebounded Dbound Dbound'.

%worlds (ecsig | easig | ebind | evar | eovar) (ecsub-ebounded _ _ _).
%total D (ecsub-ebounded D _ _).


ecsub-ordered : ({x} eisvar x I -> eordered (G x)) -> ecsub ([x] G x) M G' 
                -> eordered G' -> type.
%mode ecsub-ordered +X1 +X2 -X3. 

- : ecsub-ordered ([x] [d] eordered/cons (Dbound x d)) ecsub/base Dord 
     <- ebounded-is-eordered-strengthen Dbound Dord.

- : ecsub-ordered ([x] [d] eordered/cons (Dbound x d)) (ecsub/cons Decsub)
        (eordered/cons Dbound')
     <- ecsub-ebounded Dbound Decsub Dbound'.

- : ecsub-ordered ([x] [d] eordered/nil) ecsub/nil eordered/nil.

%worlds (ecsig | easig | ebind | evar | eovar) (ecsub-ordered _ _ _).
%total {} (ecsub-ordered _ _ _).

ecsub-lookup : ecsub ([x] G x) N Gx -> ({x} elookup (G x) Y (B x))
                -> elookup Gx Y (B N) -> type.
%mode ecsub-lookup +X1 +X2 -X3.

- : ecsub-lookup 
        (ecsub/cons (Dcsub : ecsub ([x] G x) N Gx)) 
        ([_] elookup/hit)
        elookup/hit.

- : ecsub-lookup
        (ecsub/cons (Dcsub : ecsub ([x] G x) N Gx))
        ([x] elookup/miss (Dlook x : elookup (G x) Y (B x)))
        (elookup/miss Dlook')
     <- ecsub-lookup Dcsub Dlook
        (Dlook' : elookup Gx Y (B N)).

- : ecsub-lookup 
        ecsub/base
        ([x] elookup/miss (Dlook x : elookup G Y (B x)))
        Dlook''
     <- strengthen-elookup Dlook
        (Dlook' : elookup G Y B')
        ([x] DeqB x : etp-eq (B x) B')
     <- ({x} etp-eq-sym (DeqB x) (DeqB' x : etp-eq B' (B x)))
     <- elookup-resp Dlook' ectx-eq/i etm-eq/i (DeqB' _)
        Dlook''.

%worlds (ecsig | easig | evar | ebind | eovar) (ecsub-lookup _ _ _).
%total D (ecsub-lookup _ D _).

eappend-strengthen : ({x:etm} eappend (G1 x) (G2 x) G)
                      -> ({x} ectx-eq (G1 x) G1')
                      -> ({x} ectx-eq (G2 x) G2') -> type.
%mode eappend-strengthen +X1 -X2 -X3.

- : eappend-strengthen ([x] eappend/nil) ([x] ectx-eq/i) ([x] ectx-eq/i).

- : eappend-strengthen
        ([x] eappend/cons (Dapp x : eappend (G1 x) (G2 x) G))
        Deq1
        DeqCons
     <- eappend-strengthen Dapp Deq1 Deq2
     <- ({x}
            econs-compat (Deq2 x) etm-eq/i etp-eq/i
            (DeqCons x : ectx-eq (econs (G2 x) Y B) (econs G2' Y B))).

%worlds (ecsig | easig | evar | ebind | eovar) (eappend-strengthen _ _ _).
%total D (eappend-strengthen D _ _).

ecsub-closed : {G:ectx} {M:etm} ecsub ([_] G) M G -> type.
%mode ecsub-closed +G +M -D.

-nil  : ecsub-closed _ _ ecsub/nil.

-cons : ecsub-closed (econs G _ _) M (ecsub/cons Dcsub)
         <- ecsub-closed G M (Dcsub : ecsub ([_] G) M G).

%worlds (ecsig | easig | evar | ebind | eovar) (ecsub-closed _ _ _).
%total G (ecsub-closed G _ _).

ecsub-append : ({x} eappend (G1 x) (G2 x) (G x))
                -> ecsub G M Gx
%%                   
                -> ecsub G1 M G1x
                -> ecsub G2 M G2x
                -> eappend G1x G2x Gx -> type.
%mode ecsub-append +X1 +X2 -X3 -X4 -X5.

-nil  : ecsub-append
            ([x] eappend/nil : eappend (G x) enil (G x))
            (DsubG : ecsub G M Gx)
            DsubG ecsub/nil eappend/nil.

-base : ecsub-append
            ([x] eappend/cons (Dapp x : eappend (G1 x) (G2 x) G))
            ecsub/base
            DcsubG1
            DcsubG2
            (Dapp' ace)
         <- eappend-strengthen Dapp
            ([x] DeqG1 x : ectx-eq (G1 x) G1')
            ([x] DeqG2 x : ectx-eq (G2 x) G2')
            %%
         <- ecsub-closed _ _
            (DcsubG1' : ecsub ([x] G1') _ G1')
         <- ({x} ectx-eq-sym (DeqG1 x) (DeqG1' x : ectx-eq G1' (G1 x)))
         <- ecsub-resp DcsubG1' DeqG1' etm-eq/i ectx-eq/i
            (DcsubG1 : ecsub G1 _ G1')
            %%
         <- ecsub-closed _ M
            (DcsubG2' : ecsub ([x] G2') M G2')
         <- ({x} ectx-eq-sym (DeqG2 x) (DeqG2' x : ectx-eq G2' (G2 x)))
         <- ({x}
                econs-compat (DeqG2' x) etm-eq/i etp-eq/i
                (DeqConsG2 x : ectx-eq (econs G2' x A) (econs (G2 x) x A)))
         <- ecsub-resp ecsub/base (DeqConsG2) etm-eq/i ectx-eq/i
            (DcsubG2  : ecsub ([x] econs (G2 x) x A) M G2')
            %%
         <- ({x}
                eappend-resp (DeqG1 x) (DeqG2 x) ectx-eq/i (Dapp x)
                (Dapp' x : eappend G1' G2' G)).

-cons : ecsub-append
            ([x] eappend/cons (Dapp x : eappend (G1 x) (G2 x) (G x)))
            (ecsub/cons (Dsub : ecsub G M Gx))
            DsubG1
            (ecsub/cons DsubG2)
            (eappend/cons Dapp')
         <- ecsub-append Dapp Dsub
            (DsubG1 : ecsub G1 M G1x)
            (DsubG2 : ecsub G2 M G2x)
            (Dapp' : eappend G1x G2x Gx).

%worlds (ecsig | easig | evar | ebind | eovar) (ecsub-append _ _ _ _ _).
%total D (ecsub-append D _ _ _ _).

can-eappend : {G1} {G2} eappend G1 G2 G -> type.
%mode can-eappend +X1 +X2 -X3.

-nil  : can-eappend G1 enil eappend/nil.

-cons : can-eappend G1 (econs G2 X A) (eappend/cons D)
         <- can-eappend G1 G2 (D : eappend G1 G2 G).

%worlds (ecsig | easig | evar | ebind | eovar) (can-eappend _ _ _).
%total G (can-eappend _ G _).


weaken-eofe-csub : ({x} eisvar x I -> eordered (G x))
                    -> ({x} eappend (econs G1 x A) (G2 x) (G x))
                    -> ecsub G M Gx
                    -> eofe G1 N A
%%
                    -> eofe Gx N A -> type.
%mode weaken-eofe-csub +X1 +X2 +X3 +X4 -X5.

-nil  : weaken-eofe-csub _ ([_] eappend/nil) _ D D.

-cons : weaken-eofe-csub
            ([x] [d] eordered/cons (Dbound x d))
            ([x] eappend/cons (Dapp x))
            (ecsub/cons Dsub)
            Dof
%%
            Dof''
%%
         <- ({x} {d}
                ebounded-is-ordered (Dbound x d) (Dord x d))
         <- weaken-eofe-csub Dord Dapp Dsub Dof Dof'
         <- ecsub-ordered Dord Dsub Dord'
         <- weaken-eofe Dof' _ _ Dof''.

-bad  : weaken-eofe-csub
            ([x] [d] eordered/cons (Dbound x d))
            ([x] eappend/cons (Dapp x))
            ecsub/base
            _
%%
            D
%%
         <- ({x} {d}
                eappend-bounded-contra (Dapp x) (Dbound x d) Dfalse)
         <- false-implies-eofe Dfalse D.

%worlds (ecsig | easig | ebind | evar | eovar) (weaken-eofe-csub _ _ _ _ _).
%total D (weaken-eofe-csub _ D _ _ _).

%%% Substitution %%%%

eofe-sub  : ({x} eisvar x I -> eordered (G x))
             -> ({x} eappend (econs G1 x A) (G2 x) (G x))
%%
             -> ({x} eofe (G x) (M x) (B x))
             -> eofe G1 N A
             -> ecsub ([x] G x) N Gx
%%
             -> eofe Gx (M N) (B N) -> type.
%mode eofe-sub +X1 +X2 +X3 +X4 +X5 -X6.

ekofe-sub  : ({x} eisvar x I -> eordered (G x))
             -> ({x} eappend (econs G1 x A) (G2 x) (G x))
%%
             -> ({x} ekofe (G x) (M x) (B x))
             -> eofe G1 N A
             -> ecsub ([x] G x) N Gx
%%
             -> ekofe Gx (M N) (B N) -> type.
%mode ekofe-sub +X1 +X2 +X3 +X4 +X5 -X6.

ewfkinde-sub : ({x} eisvar x I -> eordered (G x))
                -> ({x} eappend (econs G1 x A) (G2 x) (G x))
%%
                -> ({x} ewfkinde (G x) (K x))
                -> eofe G1 N A
                -> ecsub ([x] G x) N Gx
%%
                -> ewfkinde Gx (K N) -> type.
%mode ewfkinde-sub +X1 +X2 +X3 +X4 +X5 -X6.
                   
eqtme-sub : ({x} eisvar x I -> eordered (G x))
             -> ({x} eappend (econs G1 x A) (G2 x) (G x))
%%                
             -> ({x} eqtme (G x) (M x) (M' x) (B x))
             -> eofe G1 N A
             -> ecsub ([x] G x) N Gx
%%
             -> eqtme Gx (M N) (M' N) (B N) -> type.
%mode eqtme-sub +X1 +X2 +X3 +X4 +X5 -X6.

eqtpe-sub : ({x} eisvar x I -> eordered (G x))
             -> ({x} eappend (econs G1 x A) (G2 x) (G x))
%%                
             -> ({x} eqtpe (G x) (M x) (M' x) (B x))
             -> eofe G1 N A
             -> ecsub ([x] G x) N Gx
%%
             -> eqtpe Gx (M N) (M' N) (B N) -> type.
%mode eqtpe-sub +X1 +X2 +X3 +X4 +X5 -X6.

eqkinde-sub : ({x} eisvar x I -> eordered (G x))
                 -> ({x} eappend (econs G1 x A) (G2 x) (G x))
%%
                 -> ({x} eqkinde (G x) (K x) (K' x))
                 -> eofe G1 N A
                 -> ecsub ([x] G x) N Gx
%%
                 -> eqkinde Gx (K N) (K' N) -> type.
%mode eqkinde-sub +X1 +X2 +X3 +X4 +X5 -X5.

-vari     : eofe-sub
                ([x] [d] Dord x d : eordered (G x))
                ([x] Dappend x : eappend (econs G1 x A) (G2 x) (G x))
%%
                ([x] eofe/vari
                    (DofB x : ekofe (G x) B ektype)
                    (Dvof : evof Y B))
                (DofN : eofe G1 N A)
                (Dcsub : ecsub ([x] G x) N Gx)
%%
                (eofe/vari DofB' Dvof)
%%
             <- ekofe-sub Dord Dappend DofB DofN Dcsub
                (DofB' : ekofe Gx B ektype).

-const    : eofe-sub
                ([x] [d] Dord x d : eordered (G x))
                ([x] Dappend x : eappend (econs G1 x A) (G2 x) (G x))
%%
                ([x] eofe/const
                    (DofB x : ekofe (G x) B ektype)
                    (Dcof : ecof C B))
                (DofN : eofe G1 N A)
                (Dcsub : ecsub ([x] G x) N Gx)
%%
                (eofe/const DofBx Dcof)
%%
             <- ekofe-sub Dord Dappend DofB DofN Dcsub
                (DofBx : ekofe Gx B ektype).

-varsam   : eofe-sub
                ([x] [d] Dord x d : eordered (G x))
                ([x] Dappend x : eappend (econs G1 x A) (G2 x) (G x))
%%
                ([x] eofe/var
                    (DofA' x : ekofe (G x) (A' x) ektype)
                    (Dlook x : elookup (G x) x (A' x)))
                (DofN : eofe G1 N A)
                (Dcsub : ecsub ([x] G x) N Gx)
%%
                DofN'
%%
             <- ({x}
                    eappend-lookup (Dappend x)
                    (Dlook' x : elookup (G x) x A))
             <- ({x} {d}
                    elookup-fun (Dord x d) (Dlook x) (Dlook' x)
                    (DeqA' x : etp-eq (A' x) A))
             <- weaken-eofe-csub Dord Dappend Dcsub DofN
                (DofNGx : eofe Gx N A)
             <- ({x} etp-eq-sym (DeqA' x) (DeqA x : etp-eq A (A' x)))
             <- eofe-resp ectx-eq/i etm-eq/i (DeqA N) DofNGx
                (DofN' : eofe Gx N (A' N)).

-varoth   : eofe-sub
                ([x] [d] Dord x d : eordered (G x))
                ([x] Dappend x : eappend (econs G1 x A) (G2 x) (G x))
%%
                ([x] eofe/var
                    (DofB x : ekofe (G x) (B x) ektype)
                    (Dlook x : elookup (G x) Y (B x)))
                (DofN : eofe G1 N A)
                (Dcsub : ecsub ([x] G x) N Gx)
%%
                (eofe/var DofBx Dlook')
%%
             <- ekofe-sub Dord Dappend DofB DofN Dcsub
                (DofBx : ekofe Gx (B N) ektype)
             <- ecsub-lookup Dcsub Dlook
                (Dlook' : elookup Gx Y (B N)).

-app      : eofe-sub
                ([x] [d] Dord x d : eordered (G x))
                ([x] Dappend x : eappend (econs G1 x A) (G2 x) (G x))
%%
                ([x]
                    eofe/app
                    (DofM x : eofe (G x) (M x) (B x))
                    (DofO x : eofe (G x) (O x) (epi (B x) ([y] C x y))))
                (DofN : eofe G1 N A)
                (Dcsub : ecsub ([x] G x) N Gx)
%%
                (eofe/app DofMx DofOx)
%%
             <- eofe-sub Dord Dappend DofM DofN Dcsub 
                (DofMx : eofe Gx (M N) (B N))
             <- eofe-sub Dord Dappend DofO DofN Dcsub
                (DofOx : eofe Gx (O N) (epi (B N) ([y] C N y))).

% convince twelf app can't go in the context
-appbad   : eofe-sub
                ([x] [d] Dord x d : eordered (G x))
                ([x] Dappend x : eappend (econs G1 x A) (G2 x) (G x))
%%
                ([x] eofe/var
                    _
                    (Dlook x : elookup (G x) (eapp _ _) _))
                (DofN : eofe G1 N A)
                (Dcsub : ecsub ([x] G x) N Gx)
%%
                Dofe
%%
             <- ({x} {d}
                    elookup-isvar (Dord x d) (Dlook x) 
                    (Disvar x : eisvar (eapp _ _) I))
             <- ({x}
                    eisvar-app-contra (Disvar x) Dfalse)
             <- false-implies-eofe Dfalse Dofe.

-lam      : eofe-sub
                ([x] [d] Dord x d : eordered (G x))
                ([x] Dappend x : eappend (econs G1 x A) (G2 x) (G x))
%%
                ([x] eofe/lam
                    (DofB x : ekofe (G x) (B x) ektype)
                    ([y] DofM x y 
                      : eofe (econs (G x) y (B x)) (M x y) (C x y)))
                (DofN : eofe G1 N A)
                (Dcsub : ecsub ([x] G x) N Gx)
%%
                (eofe/lam DofBx DofMx)
%%
             <- ekofe-sub Dord Dappend DofB DofN Dcsub
                (DofBx : ekofe Gx (B N) ektype)
             <- ({x} {d}
                    extend-eordered _ (Dord x d) J
                    ([y] [e] Dord' x d y e 
                      : eordered (econs (G x) y (B x))))
             <- ({y} {e}
                    eofe-sub 
                    ([x] [d] Dord' x d y e)
                    ([x] eappend/cons (Dappend x))
                    ([x] DofM x y)
                    DofN
                    (ecsub/cons Dcsub)
                    (DofMx y : eofe (econs Gx y (B N)) (M N y) (C N y))).

% convince twelf lam can't go in the context
-lambad   : eofe-sub
                ([x] [d] Dord x d : eordered (G x))
                ([x] Dappend x : eappend (econs G1 x A) (G2 x) (G x))
%%
                ([x] eofe/var
                    _
                    (Dlook x : elookup _ (elam _ _) _))
                _
                _
%%
                Dof
%%                
             <- ({x} {d}
                    elookup-isvar (Dord x d) (Dlook x)
                    (Disvar x : eisvar (elam _ _) I))
             <- ({x}
                    eisvar-lam-contra (Disvar x) Dfalse)
             <- false-implies-eofe Dfalse Dof.

-eqtp     : eofe-sub
                ([x] [d] Dord x d : eordered (G x))
                ([x] Dappend x : eappend (econs G1 x A) (G2 x) (G x))
%%
                ([x] eofe/eqtp
                    (Deqtp x : eqtpe (G x) (B x) (C x) ektype)
                    (DofM x : eofe (G x) (M x) (B x)))
                (DofN : eofe G1 N A)
                (Dcsub : ecsub ([x] G x) N Gx)
%%
                (eofe/eqtp Deqtpx DofMx)
%%
             <- eofe-sub Dord Dappend DofM DofN Dcsub
                (DofMx : eofe Gx (M N) (B N))
             <- eqtpe-sub Dord Dappend Deqtp DofN Dcsub
                (Deqtpx : eqtpe Gx (B N) (C N) ektype).

-ext      : eofe-sub
                ([x] [d] Dord x d : eordered (G x))
                ([x] Dappend x : eappend (econs G1 x A) (G2 x) (G x))
%%
                ([x] eofe/ext 
                    ([y] DofApp x y
                      : eofe (econs (G x) y (B x)) (eapp (M x) y) (C x y))
                    (DofM x
                      : eofe (G x) (M x) (epi (B x) ([y] C' x y))))
                (DofN : eofe G1 N A)
                (Dcsub : ecsub ([x] G x) N Gx)
%%
                (eofe/ext DofAppx DofMx)
%%
             <- eofe-sub Dord Dappend DofM DofN Dcsub DofMx
             <- ({x} {d}
                    extend-eordered _ (Dord x d) J
                    ([y] [e] Dord' x d y e 
                      : eordered (econs (G x) y (B x))))
             <- ({y} {e}
                    eofe-sub 
                    ([x] [d] Dord' x d y e)
                    ([x] eappend/cons (Dappend x))
                    ([x] DofApp x y)
                    DofN
                    (ecsub/cons Dcsub)
                    (DofAppx y)).

%%%%

-const    : ekofe-sub
                ([x] [d] Dord x d : eordered (G x))
                ([x] Dappend x : eappend (econs G1 x A) (G2 x) (G x))
%%
                ([x] ekofe/const
                    (DofB x : ewfkinde (G x) B)
                    (Dcof : eckof C B))
                (DofN : eofe G1 N A)
                (Dcsub : ecsub ([x] G x) N Gx)
%%
                (ekofe/const DofBx Dcof)
%%
             <- ewfkinde-sub Dord Dappend DofB DofN Dcsub
                (DofBx : ewfkinde Gx B).

-pi      : ekofe-sub
                ([x] [d] Dord x d : eordered (G x))
                ([x] Dappend x : eappend (econs G1 x A) (G2 x) (G x))
%%
                ([x] ekofe/pi
                    (DofB x : ekofe (G x) (B x) ektype)
                    ([y] DofM x y 
                      : ekofe (econs (G x) y (B x)) (M x y) ektype))
                (DofN : eofe G1 N A)
                (Dcsub : ecsub ([x] G x) N Gx)
%%
                (ekofe/pi DofBx DofMx)
%%
             <- ekofe-sub Dord Dappend DofB DofN Dcsub
                (DofBx : ekofe Gx (B N) ektype)
             <- ({x} {d}
                    extend-eordered _ (Dord x d) J
                    ([y] [e] Dord' x d y e 
                      : eordered (econs (G x) y (B x))))
             <- ({y} {e}
                    ekofe-sub 
                    ([x] [d] Dord' x d y e)
                    ([x] eappend/cons (Dappend x))
                    ([x] DofM x y)
                    DofN
                    (ecsub/cons Dcsub)
                    (DofMx y : ekofe (econs Gx y (B N)) (M N y) ektype)).

-app      : ekofe-sub
                ([x] [d] Dord x d : eordered (G x))
                ([x] Dappend x : eappend (econs G1 x A) (G2 x) (G x))
%%
                ([x]
                    ekofe/app
                    (DofM x : eofe (G x) (M x) (B x))
                    (DofO x : ekofe (G x) (O x) (ekpi (B x) ([y] C x y))))
                (DofN : eofe G1 N A)
                (Dcsub : ecsub ([x] G x) N Gx)
%%
                (ekofe/app DofMx DofOx)
%%
             <- eofe-sub Dord Dappend DofM DofN Dcsub 
                (DofMx : eofe Gx (M N) (B N))
             <- ekofe-sub Dord Dappend DofO DofN Dcsub
                (DofOx : ekofe Gx (O N) (ekpi (B N) ([y] C N y))).

-lam      : ekofe-sub
                ([x] [d] Dord x d : eordered (G x))
                ([x] Dappend x : eappend (econs G1 x A) (G2 x) (G x))
%%
                ([x] ekofe/lam
                    (DofB x : ekofe (G x) (B x) ektype)
                    ([y] DofM x y 
                      : ekofe (econs (G x) y (B x)) (M x y) (C x y)))
                (DofN : eofe G1 N A)
                (Dcsub : ecsub ([x] G x) N Gx)
%%
                (ekofe/lam DofBx DofMx)
%%
             <- ekofe-sub Dord Dappend DofB DofN Dcsub
                (DofBx : ekofe Gx (B N) ektype)
             <- ({x} {d}
                    extend-eordered _ (Dord x d) J
                    ([y] [e] Dord' x d y e 
                      : eordered (econs (G x) y (B x))))
             <- ({y} {e}
                    ekofe-sub 
                    ([x] [d] Dord' x d y e)
                    ([x] eappend/cons (Dappend x))
                    ([x] DofM x y)
                    DofN
                    (ecsub/cons Dcsub)
                    (DofMx y : ekofe (econs Gx y (B N)) (M N y) (C N y))).

-eqkind   : ekofe-sub
                ([x] [d] Dord x d : eordered (G x))
                ([x] Dappend x : eappend (econs G1 x A) (G2 x) (G x))
%%
                ([x] ekofe/eqkind
                    (Deqtp x : eqkinde (G x) (B x) (C x))
                    (DofM x : ekofe (G x) (M x) (B x)))
                (DofN : eofe G1 N A)
                (Dcsub : ecsub ([x] G x) N Gx)
%%
                (ekofe/eqkind Deqtpx DofMx)
%%
             <- ekofe-sub Dord Dappend DofM DofN Dcsub
                (DofMx : ekofe Gx (M N) (B N))
             <- eqkinde-sub Dord Dappend Deqtp DofN Dcsub
                (Deqtpx : eqkinde Gx (B N) (C N)).

-ext      : ekofe-sub
                ([x] [d] Dord x d : eordered (G x))
                ([x] Dappend x : eappend (econs G1 x A) (G2 x) (G x))
%%
                ([x] ekofe/ext 
                    ([y] DofApp x y
                      : ekofe (econs (G x) y (B x)) (eaapp (M x) y) (C x y))
                    (DofM x
                      : ekofe (G x) (M x) (ekpi (B x) ([y] C' x y))))
                (DofN : eofe G1 N A)
                (Dcsub : ecsub ([x] G x) N Gx)
%%
                (ekofe/ext DofAppx DofMx)
%%
             <- ekofe-sub Dord Dappend DofM DofN Dcsub DofMx
             <- ({x} {d}
                    extend-eordered _ (Dord x d) J
                    ([y] [e] Dord' x d y e 
                      : eordered (econs (G x) y (B x))))
             <- ({y} {e}
                    ekofe-sub 
                    ([x] [d] Dord' x d y e)
                    ([x] eappend/cons (Dappend x))
                    ([x] DofApp x y)
                    DofN
                    (ecsub/cons Dcsub)
                    (DofAppx y)).

%%%%

-type     : ewfkinde-sub _ _ ([x] ewfkinde/tp) _ _ ewfkinde/tp.

-pi       : ewfkinde-sub
                ([x] [d] Dord x d : eordered (G x))
                ([x] Dappend x : eappend (econs G1 x A) (G2 x) (G x))
%%
                ([x] ewfkinde/pi
                    (DofB x : ekofe (G x) (B x) ektype)
                    ([y] DofM x y 
                      : ewfkinde (econs (G x) y (B x)) (M x y)))
                (DofN : eofe G1 N A)
                (Dcsub : ecsub ([x] G x) N Gx)
%%
                (ewfkinde/pi DofBx DofMx)
%%
             <- ekofe-sub Dord Dappend DofB DofN Dcsub
                (DofBx : ekofe Gx (B N) ektype)
             <- ({x} {d}
                    extend-eordered _ (Dord x d) J
                    ([y] [e] Dord' x d y e 
                      : eordered (econs (G x) y (B x))))
             <- ({y} {e}
                    ewfkinde-sub 
                    ([x] [d] Dord' x d y e)
                    ([x] eappend/cons (Dappend x))
                    ([x] DofM x y)
                    DofN
                    (ecsub/cons Dcsub)
                    (DofMx y : ewfkinde (econs Gx y (B N)) (M N y))).

%%%%

-app      : eqtme-sub
                ([x] [d] Dord x d : eordered (G x))
                ([x] Dappend x : eappend (econs G1 x A) (G2 x) (G x))
%%
                ([x] eqtme/app
                    (DeqtmO x : eqtme (G x) (O x) (O' x) (B x))
                    (DeqtmM x 
                      : eqtme (G x) (M x) (M' x) (epi (B x) ([y] C x y))))
                (DofN : eofe G1 N A)
                (Dcsub : ecsub ([x] G x) N Gx)
%%
                (eqtme/app DeqtmOx DeqtmMx)
%%
             <- eqtme-sub Dord Dappend DeqtmO DofN Dcsub
                DeqtmOx
             <- eqtme-sub Dord Dappend DeqtmM DofN Dcsub
                DeqtmMx.

-lam      : eqtme-sub
                ([x] [d] Dord x d : eordered (G x))
                ([x] Dappend x : eappend (econs G1 x A) (G2 x) (G x))
%%
                ([x] eqtme/lam
                    ([y] DeqtmM x y
                      : eqtme (econs (G x) y (B x)) (M x y) (M' x y) (C x y))
                    (DeqtpB x : eqtpe (G x) (B x) (B' x) ektype))
                (DofN : eofe G1 N A)
                (Dcsub : ecsub ([x] G x) N Gx)
%%
                (eqtme/lam DeqtmMx DeqtpBx)
%%
             <- ({x} {d}
                    extend-eordered _ (Dord x d) J
                    ([y] [e] Dord' x d y e 
                      : eordered (econs (G x) y (B x))))
             <- ({y} {e}
                    eqtme-sub
                    ([x] [d] Dord' x d y e)
                    ([x] eappend/cons (Dappend x))
                    ([x] DeqtmM x y)
                    DofN (ecsub/cons Dcsub)
                    (DeqtmMx y 
                      : eqtme (econs Gx y (B N)) (M N y) (M' N y) (C N y)))
             <- eqtpe-sub Dord Dappend DeqtpB DofN Dcsub DeqtpBx.

-ext      : eqtme-sub
                ([x] [d] Dord x d : eordered (G x))
                ([x] Dappend x : eappend (econs G1 x A) (G2 x) (G x))
%%
                ([x] eqtme/ext
                    ([y] DeqtmApp x y
                      : eqtme (econs (G x) y (B x)) 
                        (eapp (M x) y) (eapp (M' x) y) (C* x y))
                    (DofM' x : eofe (G x) (M' x) (epi (B x) ([y] C' x y)))
                    (DofM x : eofe (G x) (M x) (epi (B x) ([y] C x y))))
                (DofN : eofe G1 N A)
                (Dcsub : ecsub ([x] G x) N Gx)
%%
                (eqtme/ext DeqtmAppx DofM'x DofMx)
%%
             <- ({x} {d}
                    extend-eordered _ (Dord x d) J
                    ([y] [e] Dord' x d y e 
                      : eordered (econs (G x) y (B x))))
             <- ({y} {e}
                    eqtme-sub
                    ([x] [d] Dord' x d y e)
                    ([x] eappend/cons (Dappend x))
                    ([x] DeqtmApp x y)
                    DofN (ecsub/cons Dcsub)
                    (DeqtmAppx y
                      : eqtme (econs Gx y (B N)) 
                        (eapp (M N) y) (eapp (M' N) y) (C* N y)))
             <- eofe-sub Dord Dappend DofM' DofN Dcsub DofM'x
             <- eofe-sub Dord Dappend DofM DofN Dcsub DofMx.

-extw     : eqtme-sub
                ([x] [d] Dord x d : eordered (G x))
                ([x] Dappend x : eappend (econs G1 x A) (G2 x) (G x))
%%
                ([x] eqtme/extw
                    ([y] DeqtmApp x y
                      : eqtme (econs (G x) y (B x)) 
                        (eapp (M x) y) (eapp (M' x) y) (C* x y))
                    (DeqtmM x
                      : eqtme (G x) (M x) (M' x) (epi (B x) ([y] C x y))))
                (DofN : eofe G1 N A)
                (Dcsub : ecsub ([x] G x) N Gx)
%%
                (eqtme/extw DeqtmAppx DeqtmMx)
%%                
             <- ({x} {d}
                    extend-eordered _ (Dord x d) J
                    ([y] [e] Dord' x d y e 
                      : eordered (econs (G x) y (B x))))
             <- ({y} {e}
                    eqtme-sub
                    ([x] [d] Dord' x d y e)
                    ([x] eappend/cons (Dappend x))
                    ([x] DeqtmApp x y)
                    DofN (ecsub/cons Dcsub)
                    (DeqtmAppx y
                      : eqtme (econs Gx y (B N)) 
                        (eapp (M N) y) (eapp (M' N) y) (C* N y)))
             <- eqtme-sub Dord Dappend DeqtmM DofN Dcsub DeqtmMx.

-beta     : eqtme-sub
                ([x] [d] Dord x d : eordered (G x))
                ([x] Dappend x : eappend (econs G1 x A) (G2 x) (G x))
%%
                ([x] eqtme/beta
                    (DofO x : eofe (G x) (O x) (B x))
                    ([y] DofM x y
                      : eofe (econs (G x) y (B x)) (M x y) (C x y)))
                (DofN : eofe G1 N A)
                (Dcsub : ecsub ([x] G x) N Gx)
%%
                (eqtme/beta DofOx DofMx)
%%
             <- ({x} {d}
                    extend-eordered _ (Dord x d) J
                    ([y] [e] Dord' x d y e 
                      : eordered (econs (G x) y (B x))))
             <- ({y} {e}
                    eofe-sub
                    ([x] [d] Dord' x d y e)
                    ([x] eappend/cons (Dappend x))
                    ([x] DofM x y)
                    DofN (ecsub/cons Dcsub)
                    (DofMx y : eofe (econs Gx y (B N)) (M N y) (C N y)))
             <- eofe-sub Dord Dappend DofO DofN Dcsub DofOx.

-sym      : eqtme-sub
                ([x] [d] Dord x d : eordered (G x))
                ([x] Dappend x : eappend (econs G1 x A) (G2 x) (G x))
%%
                ([x] eqtme/sym
                    (Deqtm x : eqtme (G x) (M x) (M' x) (B x)))
                (DofN : eofe G1 N A)
                (Dcsub : ecsub ([x] G x) N Gx)
%%
                (eqtme/sym Deqtmx)
%%
             <- eqtme-sub Dord Dappend Deqtm DofN Dcsub Deqtmx.


-trans    : eqtme-sub
                ([x] [d] Dord x d : eordered (G x))
                ([x] Dappend x : eappend (econs G1 x A) (G2 x) (G x))
%%
                ([x] eqtme/trans
                    (Deqtm2 x : eqtme (G x) (O x) (P x) (B x))
                    (Deqtm1 x : eqtme (G x) (M x) (O x) (B x)))
                (DofN : eofe G1 N A)
                (Dcsub : ecsub ([x] G x) N Gx)
%%
                (eqtme/trans Deqtm2x Deqtm1x)
%%
             <- eqtme-sub Dord Dappend Deqtm1 DofN Dcsub Deqtm1x
             <- eqtme-sub Dord Dappend Deqtm2 DofN Dcsub Deqtm2x.



-refl     : eqtme-sub
                ([x] [d] Dord x d : eordered (G x))
                ([x] Dappend x : eappend (econs G1 x A) (G2 x) (G x))
%%
                ([x] eqtme/refl (Dof x : eofe (G x) (M x) (B x)))
                (DofN : eofe G1 N A)
                (Dcsub : ecsub ([x] G x) N Gx)
%%
                (eqtme/refl Dofx)
%%
             <- eofe-sub Dord Dappend Dof DofN Dcsub Dofx.

-tcon     : eqtme-sub
                ([x] [d] Dord x d : eordered (G x))
                ([x] Dappend x : eappend (econs G1 x A) (G2 x) (G x))
%%
                ([x] eqtme/tcon
                    (Deqtp x : eqtpe (G x) (B x) (C x) ektype)
                    (Deqtm x : eqtme (G x) (M x) (M' x) (B x)))
                (DofN : eofe G1 N A)
                (Dcsub : ecsub ([x] G x) N Gx)
%%
                (eqtme/tcon Deqtpx Deqtmx)
%%
             <- eqtpe-sub Dord Dappend Deqtp DofN Dcsub Deqtpx
             <- eqtme-sub Dord Dappend Deqtm DofN Dcsub Deqtmx.

%%%%

-app      : eqtpe-sub
                ([x] [d] Dord x d : eordered (G x))
                ([x] Dappend x : eappend (econs G1 x A) (G2 x) (G x))
%%
                ([x] eqtpe/app
                    (DeqtmO x : eqtme (G x) (O x) (O' x) (B x))
                    (DeqtmM x 
                      : eqtpe (G x) (M x) (M' x) (ekpi (B x) ([y] C x y))))
                (DofN : eofe G1 N A)
                (Dcsub : ecsub ([x] G x) N Gx)
%%
                (eqtpe/app DeqtmOx DeqtmMx)
%%
             <- eqtme-sub Dord Dappend DeqtmO DofN Dcsub DeqtmOx
             <- eqtpe-sub Dord Dappend DeqtmM DofN Dcsub DeqtmMx.


-pi       : eqtpe-sub
                ([x] [d] Dord x d : eordered (G x))
                ([x] Dappend x : eappend (econs G1 x A) (G2 x) (G x))
%%
                ([x] eqtpe/pi
                    ([y] DeqtmM x y
                      : eqtpe (econs (G x) y (B x)) (M x y) (M' x y) ektype)
                    (DeqtpB x : eqtpe (G x) (B x) (B' x) ektype))
                (DofN : eofe G1 N A)
                (Dcsub : ecsub ([x] G x) N Gx)
%%
                (eqtpe/pi DeqtmMx DeqtpBx)
%%
             <- ({x} {d}
                    extend-eordered _ (Dord x d) J
                    ([y] [e] Dord' x d y e 
                      : eordered (econs (G x) y (B x))))
             <- ({y} {e}
                    eqtpe-sub
                    ([x] [d] Dord' x d y e)
                    ([x] eappend/cons (Dappend x))
                    ([x] DeqtmM x y)
                    DofN (ecsub/cons Dcsub)
                    (DeqtmMx y 
                      : eqtpe (econs Gx y (B N)) (M N y) (M' N y) ektype))
             <- eqtpe-sub Dord Dappend DeqtpB DofN Dcsub DeqtpBx.

-lam      : eqtpe-sub
                ([x] [d] Dord x d : eordered (G x))
                ([x] Dappend x : eappend (econs G1 x A) (G2 x) (G x))
%%
                ([x] eqtpe/lam
                    ([y] DeqtmM x y
                      : eqtpe (econs (G x) y (B x)) (M x y) (M' x y) (C x y))
                    (DeqtpB x : eqtpe (G x) (B x) (B' x) ektype))
                (DofN : eofe G1 N A)
                (Dcsub : ecsub ([x] G x) N Gx)
%%
                (eqtpe/lam DeqtmMx DeqtpBx)
%%
             <- ({x} {d}
                    extend-eordered _ (Dord x d) J
                    ([y] [e] Dord' x d y e 
                      : eordered (econs (G x) y (B x))))
             <- ({y} {e}
                    eqtpe-sub
                    ([x] [d] Dord' x d y e)
                    ([x] eappend/cons (Dappend x))
                    ([x] DeqtmM x y)
                    DofN (ecsub/cons Dcsub)
                    (DeqtmMx y 
                      : eqtpe (econs Gx y (B N)) (M N y) (M' N y) (C N y)))
             <- eqtpe-sub Dord Dappend DeqtpB DofN Dcsub DeqtpBx.

-ext      : eqtpe-sub
                ([x] [d] Dord x d : eordered (G x))
                ([x] Dappend x : eappend (econs G1 x A) (G2 x) (G x))
%%
                ([x] eqtpe/ext
                    ([y] DeqtmApp x y
                      : eqtpe (econs (G x) y (B x)) 
                        (eaapp (M x) y) (eaapp (M' x) y) (C* x y))
                    (DofM' x : ekofe (G x) (M' x) (ekpi (B x) ([y] C' x y)))
                    (DofM x : ekofe (G x) (M x) (ekpi (B x) ([y] C x y))))
                (DofN : eofe G1 N A)
                (Dcsub : ecsub ([x] G x) N Gx)
%%
                (eqtpe/ext DeqtmAppx DofM'x DofMx)
%%
             <- ({x} {d}
                    extend-eordered _ (Dord x d) J
                    ([y] [e] Dord' x d y e 
                      : eordered (econs (G x) y (B x))))
             <- ({y} {e}
                    eqtpe-sub
                    ([x] [d] Dord' x d y e)
                    ([x] eappend/cons (Dappend x))
                    ([x] DeqtmApp x y)
                    DofN (ecsub/cons Dcsub)
                    (DeqtmAppx y
                      : eqtpe (econs Gx y (B N)) 
                        (eaapp (M N) y) (eaapp (M' N) y) (C* N y)))
             <- ekofe-sub Dord Dappend DofM' DofN Dcsub DofM'x
             <- ekofe-sub Dord Dappend DofM DofN Dcsub DofMx.

-extw     : eqtpe-sub
                ([x] [d] Dord x d : eordered (G x))
                ([x] Dappend x : eappend (econs G1 x A) (G2 x) (G x))
%%
                ([x] eqtpe/extw
                    ([y] DeqtmApp x y
                      : eqtpe (econs (G x) y (B x)) 
                        (eaapp (M x) y) (eaapp (M' x) y) (C* x y))
                    (DeqtmM x
                      : eqtpe (G x) (M x) (M' x) (ekpi (B x) ([y] C x y))))
                (DofN : eofe G1 N A)
                (Dcsub : ecsub ([x] G x) N Gx)
%%
                (eqtpe/extw DeqtmAppx DeqtmMx)
%%                
             <- ({x} {d}
                    extend-eordered _ (Dord x d) J
                    ([y] [e] Dord' x d y e 
                      : eordered (econs (G x) y (B x))))
             <- ({y} {e}
                    eqtpe-sub
                    ([x] [d] Dord' x d y e)
                    ([x] eappend/cons (Dappend x))
                    ([x] DeqtmApp x y)
                    DofN (ecsub/cons Dcsub)
                    (DeqtmAppx y
                      : eqtpe (econs Gx y (B N)) 
                        (eaapp (M N) y) (eaapp (M' N) y) (C* N y)))
             <- eqtpe-sub Dord Dappend DeqtmM DofN Dcsub DeqtmMx.


-beta     : eqtpe-sub
                ([x] [d] Dord x d : eordered (G x))
                ([x] Dappend x : eappend (econs G1 x A) (G2 x) (G x))
%%
                ([x] eqtpe/beta
                    (DofO x : eofe (G x) (O x) (B x))
                    ([y] DofM x y
                      : ekofe (econs (G x) y (B x)) (M x y) (C x y)))
                (DofN : eofe G1 N A)
                (Dcsub : ecsub ([x] G x) N Gx)
%%
                (eqtpe/beta DofOx DofMx)
%%
             <- ({x} {d}
                    extend-eordered _ (Dord x d) J
                    ([y] [e] Dord' x d y e 
                      : eordered (econs (G x) y (B x))))
             <- ({y} {e}
                    ekofe-sub
                    ([x] [d] Dord' x d y e)
                    ([x] eappend/cons (Dappend x))
                    ([x] DofM x y)
                    DofN (ecsub/cons Dcsub)
                    (DofMx y : ekofe (econs Gx y (B N)) (M N y) (C N y)))
             <- eofe-sub Dord Dappend DofO DofN Dcsub DofOx.

-sym      : eqtpe-sub
                ([x] [d] Dord x d : eordered (G x))
                ([x] Dappend x : eappend (econs G1 x A) (G2 x) (G x))
%%
                ([x] eqtpe/sym
                    (Deqtp x : eqtpe (G x) (M x) (M' x) (B x)))
                (DofN : eofe G1 N A)
                (Dcsub : ecsub ([x] G x) N Gx)
%%
                (eqtpe/sym Deqtpx)
%%
             <- eqtpe-sub Dord Dappend Deqtp DofN Dcsub Deqtpx.

-trans    : eqtpe-sub
                ([x] [d] Dord x d : eordered (G x))
                ([x] Dappend x : eappend (econs G1 x A) (G2 x) (G x))
%%
                ([x] eqtpe/trans
                    (Deqtp2 x : eqtpe (G x) (O x) (P x) (B x))
                    (Deqtp1 x : eqtpe (G x) (M x) (O x) (B x)))
                (DofN : eofe G1 N A)
                (Dcsub : ecsub ([x] G x) N Gx)
%%
                (eqtpe/trans Deqtp2x Deqtp1x)
%%
             <- eqtpe-sub Dord Dappend Deqtp1 DofN Dcsub Deqtp1x
             <- eqtpe-sub Dord Dappend Deqtp2 DofN Dcsub Deqtp2x.

-refl     : eqtpe-sub
                ([x] [d] Dord x d : eordered (G x))
                ([x] Dappend x : eappend (econs G1 x A) (G2 x) (G x))
%%
                ([x] eqtpe/refl (Dof x : ekofe (G x) (M x) (B x)))
                (DofN : eofe G1 N A)
                (Dcsub : ecsub ([x] G x) N Gx)
%%
                (eqtpe/refl Dofx)
%%
             <- ekofe-sub Dord Dappend Dof DofN Dcsub Dofx.


-kcon     : eqtpe-sub
                ([x] [d] Dord x d : eordered (G x))
                ([x] Dappend x : eappend (econs G1 x A) (G2 x) (G x))
%%
                ([x] eqtpe/kcon
                    (Deqtp x : eqkinde (G x) (B x) (C x))
                    (Deqtm x : eqtpe (G x) (M x) (M' x) (B x)))
                (DofN : eofe G1 N A)
                (Dcsub : ecsub ([x] G x) N Gx)
%%
                (eqtpe/kcon Deqtpx Deqtmx)
%%
             <- eqkinde-sub Dord Dappend Deqtp DofN Dcsub Deqtpx
             <- eqtpe-sub Dord Dappend Deqtm DofN Dcsub Deqtmx.

%%%%

-type     : eqkinde-sub _ _ ([x] eqkinde/tp) _ _ eqkinde/tp.

-pi       : eqkinde-sub
                ([x] [d] Dord x d : eordered (G x))
                ([x] Dappend x : eappend (econs G1 x A) (G2 x) (G x))
%%
                ([x] eqkinde/pi
                    ([y] DeqtmM x y 
                      : eqkinde (econs (G x) y (B x)) (K x y) (K' x y))
                    (DeqtpB x : eqtpe (G x) (B x) (B' x) ektype))
                (DofN : eofe G1 N A)
                (Dcsub : ecsub ([x] G x) N Gx)
%%
                (eqkinde/pi DeqtmMx DeqtpBx)
%%
             <- ({x} {d}
                    extend-eordered _ (Dord x d) J
                    ([y] [e] Dord' x d y e 
                      : eordered (econs (G x) y (B x))))
             <- ({y} {e}
                    eqkinde-sub
                    ([x] [d] Dord' x d y e)
                    ([x] eappend/cons (Dappend x))
                    ([x] DeqtmM x y)
                    DofN (ecsub/cons Dcsub)
                    (DeqtmMx y : eqkinde (econs Gx y (B N)) (K N y) (K' N y)))
             <- eqtpe-sub Dord Dappend DeqtpB DofN Dcsub DeqtpBx.

-sym      : eqkinde-sub
                ([x] [d] Dord x d : eordered (G x))
                ([x] Dappend x : eappend (econs G1 x A) (G2 x) (G x))
                ([x] eqkinde/sym (Deqtp x : eqkinde (G x) (K x) (K' x)))
                (DofN : eofe G1 N A)
                (Dcsub : ecsub ([x] G x) N Gx)
                (eqkinde/sym Deqtpx)
             <- eqkinde-sub Dord Dappend Deqtp DofN Dcsub Deqtpx.

-trans    : eqkinde-sub
                ([x] [d] Dord x d : eordered (G x))
                ([x] Dappend x : eappend (econs G1 x A) (G2 x) (G x))
                ([x] eqkinde/trans (Deqtp2 x) (Deqtp1 x))
                (DofN : eofe G1 N A)
                (Dcsub : ecsub ([x] G x) N Gx)
%%
                (eqkinde/trans Deqtp2x Deqtp1x)
%%
             <- eqkinde-sub Dord Dappend Deqtp1 DofN Dcsub Deqtp1x
             <- eqkinde-sub Dord Dappend Deqtp2 DofN Dcsub Deqtp2x.

-refl     : eqkinde-sub
                ([x] [d] Dord x d : eordered (G x))
                ([x] Dappend x : eappend (econs G1 x A) (G2 x) (G x))
                ([x] eqkinde/refl (Dof x))
                (DofN : eofe G1 N A)
                (Dcsub : ecsub ([x] G x) N Gx)
                (eqkinde/refl Dofx)
             <- ewfkinde-sub Dord Dappend Dof DofN Dcsub Dofx.

%worlds (ecsig | easig | evar | eovar | ebind) 
  (eofe-sub     _ _ _ _ _ _)
  (ekofe-sub    _ _ _ _ _ _)
  (ewfkinde-sub _ _ _ _ _ _)
  (eqtme-sub    _ _ _ _ _ _)
  (eqtpe-sub    _ _ _ _ _ _)
  (eqkinde-sub  _ _ _ _ _ _).
%total (D1 D2 D3 D4 D5 D6)
  (eofe-sub     _ _ D1 _ _ _)
  (ekofe-sub    _ _ D2 _ _ _)
  (ewfkinde-sub _ _ D3 _ _ _)
  (eqtme-sub    _ _ D4 _ _ _)
  (eqtpe-sub    _ _ D5 _ _ _)
  (eqkinde-sub  _ _ D6 _ _ _).


%%% Translation from implicit to explicit %%%

eof1-to-eofe  : ({x} evof x A -> eof (M x) (B x))
                 -> ({x} eofe (econs enil x A) (M x) (B x)) -> type.
%mode eof1-to-eofe +X1 -X2.

- : eof1-to-eofe
        ([x] [d:evof x A] Dof x d : eof (M x) (B x))
        ([x] Dofe x)
     <- cut-eof Dof ([_] elookup/hit)
        ([x] Dofe x : eofe (econs enil x A) (M x) (B x)).

%worlds (ecsig | easig | evar | eovar | ebind) (eof1-to-eofe _ _).
%total {} (eof1-to-eofe _ _).

ekof1-to-ekofe  : ({x} evof x A -> ekof (M x) (B x))
                 -> ({x} ekofe (econs enil x A) (M x) (B x)) -> type.
%mode ekof1-to-ekofe +X1 -X2.

- : ekof1-to-ekofe
        ([x] [d:evof x A] Dkof x d : ekof (M x) (B x))
        ([x] Dkofe x)
     <- cut-ekof Dkof ([_] elookup/hit)
        ([x] Dkofe x : ekofe (econs enil x A) (M x) (B x)).

%worlds (ecsig | easig | evar | eovar | ebind) (ekof1-to-ekofe _ _).
%total {} (ekof1-to-ekofe _ _).

ewfkind1-to-ewfkinde  : ({x} evof x A -> ewfkind (M x))
                 -> ({x} ewfkinde (econs enil x A) (M x)) -> type.
%mode ewfkind1-to-ewfkinde +X1 -X2.

- : ewfkind1-to-ewfkinde
        ([x] [d:evof x A] Dwfkind x d : ewfkind (M x))
        ([x] Dwfkinde x)
     <- cut-ewfkind Dwfkind ([_] elookup/hit)
        ([x] Dwfkinde x : ewfkinde (econs enil x A) (M x)).

%worlds (ecsig | easig | evar | eovar | ebind) (ewfkind1-to-ewfkinde _ _).
%total {} (ewfkind1-to-ewfkinde _ _).


eqtm1-to-eqtme  : ({x} evof x A -> eqtm (M x) (M' x) (B x))
                   -> ({x} eqtme (econs enil x A) (M x) (M' x) (B x)) -> type.
%mode eqtm1-to-eqtme +X1 -X2.

- : eqtm1-to-eqtme
        ([x] [d:evof x A] Deqtm x d : eqtm (M x) (M' x) (B x))
        ([x] Deqtme x)
     <- cut-eqtm Deqtm ([_] elookup/hit)
        ([x] Deqtme x : eqtme (econs enil x A) (M x) (M' x) (B x)).

%worlds (ecsig | easig | evar | eovar | ebind) (eqtm1-to-eqtme _ _).
%total {} (eqtm1-to-eqtme _ _).


eqtp1-to-eqtpe  : ({x} evof x A -> eqtp (M x) (M' x) (B x))
                   -> ({x} eqtpe (econs enil x A) (M x) (M' x) (B x)) -> type.
%mode eqtp1-to-eqtpe +X1 -X2.

- : eqtp1-to-eqtpe
        ([x] [d:evof x A] Deqtp x d : eqtp (M x) (M' x) (B x))
        ([x] Deqtpe x)
     <- cut-eqtp Deqtp ([_] elookup/hit)
        ([x] Deqtpe x : eqtpe (econs enil x A) (M x) (M' x) (B x)).

%worlds (ecsig | easig | evar | eovar | ebind) (eqtp1-to-eqtpe _ _).
%total {} (eqtp1-to-eqtpe _ _).

eqkind1-to-eqkinde  : ({x} evof x A -> eqkind (M x) (M' x))
                   -> ({x} eqkinde (econs enil x A) (M x) (M' x)) -> type.
%mode eqkind1-to-eqkinde +X1 -X2.

- : eqkind1-to-eqkinde
        ([x] [d:evof x A] Deqkind x d : eqkind (M x) (M' x))
        ([x] Deqkinde x)
     <- cut-eqkind Deqkind ([_] elookup/hit)
        ([x] Deqkinde x : eqkinde (econs enil x A) (M x) (M' x)).

%worlds (ecsig | easig | evar | eovar | ebind) (eqkind1-to-eqkinde _ _).
%total {} (eqkind1-to-eqkinde _ _).


eof-to-eofe : eof EN EA -> eofe enil EN EA -> type.
%mode eof-to-eofe +X1 -X2.

%% XXX have to add w/o ekofe/closed
ekof-to-ekofe : ekof EA EK -> ekofe enil EA EK -> type.
%mode ekof-to-ekofe +X1 -X2.

ewfkind-to-ewfkinde : ewfkind K -> ewfkinde enil K -> type.
%mode ewfkind-to-ewfkinde +X1 -X2.

eqtm-to-eqtme : eqtm EM EN EA -> eqtme enil EM EN EA -> type.
%mode eqtm-to-eqtme +X1 -X2.

eqtp-to-eqtpe : eqtp EA EB EK -> eqtpe enil EA EB EK -> type.
%mode eqtp-to-eqtpe +X1 -X2.

eqkind-to-eqkinde : eqkind K J -> eqkinde enil K J -> type.
%mode eqkind-to-eqkinde +X1 -X2.

-var      : eof-to-eofe
                (eof/var
                    (Dkof : ekof A ektype)
                    (Dvof : evof X A))
                (eofe/vari Dkofe Dvof)
             <- ekof-to-ekofe Dkof Dkofe.

-const    : eof-to-eofe
                (eof/const
                    (Dkof : ekof A ektype)
                    (Dcof : ecof C A))
                (eofe/const Dkofe Dcof)
             <- ekof-to-ekofe Dkof Dkofe.

-app      : eof-to-eofe
                (eof/app
                    (DofN : eof N A)
                    (DofM : eof M (epi A ([x] B x))))
                (eofe/app DofeN DofeM)
             <- eof-to-eofe DofN DofeN
             <- eof-to-eofe DofM DofeM.

-lam      : eof-to-eofe
                (eof/lam
                    (DofA : ekof A ektype)
                    ([x] [d:evof x A] DofM x d : eof (M x) (B x)))
                (eofe/lam DofeA DofeM)
             <- ekof-to-ekofe DofA DofeA
             <- eof1-to-eofe DofM DofeM.

-eqtp     : eof-to-eofe
                (eof/eqtp
                    (Deqtp  : eqtp A B ektype)
                    (Dof    : eof M A))
                (eofe/eqtp Deqtpe Dofe)
             <- eof-to-eofe Dof Dofe
             <- eqtp-to-eqtpe Deqtp Deqtpe.

-ext      : eof-to-eofe
                (eof/ext
                    ([x] [d:evof x A] DofApp x d
                      : eof (eapp M x) (B x))
                    (DofM : eof M (epi A ([x] B' x))))
                (eofe/ext DofeApp DofeM)
             <- eof1-to-eofe DofApp DofeApp
             <- eof-to-eofe DofM DofeM.

%%

-const  : ekof-to-ekofe
              (ekof/const Dwf Dcof)
              (ekofe/const Dwfe Dcof)
           <- ewfkind-to-ewfkinde Dwf Dwfe.

-pi     : ekof-to-ekofe
              (ekof/pi ([x] [d] Dkof' x d) Dkof)
              (ekofe/pi Dkofe ([x] Dkofe' x))
           <- ekof-to-ekofe Dkof Dkofe
           <- ekof1-to-ekofe Dkof' Dkofe'.

-app    : ekof-to-ekofe
              (ekof/app Dof Dkof)
              (ekofe/app Dofe Dkofe)
           <- eof-to-eofe Dof Dofe
           <- ekof-to-ekofe Dkof Dkofe.

-lam    : ekof-to-ekofe
              (ekof/lam Dkof ([x] [d] Dkof' x d))
              (ekofe/lam Dkofe ([x] Dkofe' x))
           <- ekof-to-ekofe Dkof Dkofe
           <- ekof1-to-ekofe Dkof' Dkofe'.

-eqkind : ekof-to-ekofe
              (ekof/eqkind Deqkind Dkof)
              (ekofe/eqkind Deqkinde Dkofe)
           <- ekof-to-ekofe Dkof Dkofe
           <- eqkind-to-eqkinde Deqkind Deqkinde.

-ext    : ekof-to-ekofe
              (ekof/ext ([x] [d] DofApp x d) Dof)
              (ekofe/ext DofeApp Dofe)
           <- ekof1-to-ekofe DofApp DofeApp
           <- ekof-to-ekofe Dof Dofe.

%%

-tp     : ewfkind-to-ewfkinde ewfkind/tp ewfkinde/tp.

-pi     : ewfkind-to-ewfkinde
              (ewfkind/pi ([x] [d] Dwfkind x d) Dkof)
              (ewfkinde/pi Dkofe ([x] Dwfkinde x))
           <- ekof-to-ekofe Dkof Dkofe
           <- ewfkind1-to-ewfkinde Dwfkind Dwfkinde.

%%

-app    : eqtm-to-eqtme
              (eqtm/app Deqtm2 Deqtm1)
              (eqtme/app Deqtme2 Deqtme1)
           <- eqtm-to-eqtme Deqtm1 Deqtme1
           <- eqtm-to-eqtme Deqtm2 Deqtme2.

-lam    : eqtm-to-eqtme
              (eqtm/lam
                  ([x] [d:evof x A]
                      Deqtm x d : eqtm (M x) (M' x) (B x))
                  (Deqtp : eqtp A A' ektype))
              (eqtme/lam Deqtme Deqtpe)
           <- eqtm1-to-eqtme Deqtm
              ([x] Deqtme x : eqtme (econs enil x A) (M x) (M' x) (B x))
           <- eqtp-to-eqtpe Deqtp
              (Deqtpe : eqtpe enil A A' ektype).

-ext    : eqtm-to-eqtme
              (eqtm/ext ([x] [d:evof x A] Deqtm x d) DofN DofM)
              (eqtme/ext ([x] Deqtme x) DofeN DofeM)
           <- eqtm1-to-eqtme Deqtm Deqtme
           <- eof-to-eofe DofN DofeN
           <- eof-to-eofe DofM DofeM.

-extw   : eqtm-to-eqtme
              (eqtm/extw ([x] [d:evof x A] Deqtm x d) Deqtm')
              (eqtme/extw ([x] Deqtme x) Deqtme')
           <- eqtm1-to-eqtme Deqtm Deqtme
           <- eqtm-to-eqtme Deqtm' Deqtme'.

-beta   : eqtm-to-eqtme
              (eqtm/beta Dof2 ([x] [d] Dof1 x d))
              (eqtme/beta Dofe2 ([x] Dofe1 x))
           <- eof1-to-eofe Dof1 Dofe1
           <- eof-to-eofe Dof2 Dofe2.

-sym    : eqtm-to-eqtme
              (eqtm/sym Deqtm)
              (eqtme/sym Deqtme)
           <- eqtm-to-eqtme Deqtm Deqtme.

-trans  : eqtm-to-eqtme
              (eqtm/trans Deqtm2 Deqtm1)
              (eqtme/trans Deqtme2 Deqtme1)
           <- eqtm-to-eqtme Deqtm1 Deqtme1
           <- eqtm-to-eqtme Deqtm2 Deqtme2.

-refl   : eqtm-to-eqtme
              (eqtm/refl (Dof : eof M A))
              (eqtme/refl Dofe)
           <- eof-to-eofe Dof Dofe.

-tcon   : eqtm-to-eqtme
              (eqtm/typecon Deqtp Deqtm)
              (eqtme/tcon Deqtpe Deqtme)
           <- eqtp-to-eqtpe Deqtp Deqtpe
           <- eqtm-to-eqtme Deqtm Deqtme.

%%

-app    : eqtp-to-eqtpe
              (eqtp/app Deqtm Deqtp)
              (eqtpe/app Deqtme Deqtpe)
           <- eqtp-to-eqtpe Deqtp Deqtpe
           <- eqtm-to-eqtme Deqtm Deqtme.

-pi     : eqtp-to-eqtpe
              (eqtp/pi ([x] [d] Deqtp2 x d) Deqtp1)
              (eqtpe/pi ([x] Deqtpe2 x) Deqtpe1)
           <- eqtp-to-eqtpe Deqtp1 Deqtpe1
           <- eqtp1-to-eqtpe Deqtp2 Deqtpe2.

-lam    : eqtp-to-eqtpe
              (eqtp/lam
                  ([x] [d:evof x A]
                      Deqtm x d : eqtp (M x) (M' x) (B x))
                  (Deqtp : eqtp A A' ektype))
              (eqtpe/lam Deqtme Deqtpe)
           <- eqtp1-to-eqtpe Deqtm
              ([x] Deqtme x : eqtpe (econs enil x A) (M x) (M' x) (B x))
           <- eqtp-to-eqtpe Deqtp
              (Deqtpe : eqtpe enil A A' ektype).

-ext    : eqtp-to-eqtpe
              (eqtp/ext ([x] [d:evof x A] Deqtp x d) DofN DofM)
              (eqtpe/ext ([x] Deqtpe x) DofeN DofeM)
           <- eqtp1-to-eqtpe Deqtp Deqtpe
           <- ekof-to-ekofe DofN DofeN
           <- ekof-to-ekofe DofM DofeM.

-extw   : eqtp-to-eqtpe
              (eqtp/extw ([x] [d:evof x A] Deqtp x d) DeqM)
              (eqtpe/extw ([x] Deqtpe x) DeqeM)
           <- eqtp1-to-eqtpe Deqtp Deqtpe
           <- eqtp-to-eqtpe DeqM DeqeM.

-beta   : eqtp-to-eqtpe
              (eqtp/beta
                  (Dof : eof N A)
                  ([x] [d] Dkof x d : ekof (B x) (K x)))
              (eqtpe/beta Dofe Dkofe)
           <- ekof1-to-ekofe Dkof Dkofe
           <- eof-to-eofe Dof Dofe.

-sym    : eqtp-to-eqtpe
              (eqtp/sym Deqtp)
              (eqtpe/sym Deqtpe)
           <- eqtp-to-eqtpe Deqtp Deqtpe.

-trans  : eqtp-to-eqtpe
              (eqtp/trans Deqtp2 Deqtp1)
              (eqtpe/trans Deqtpe2 Deqtpe1)
           <- eqtp-to-eqtpe Deqtp1 Deqtpe1
           <- eqtp-to-eqtpe Deqtp2 Deqtpe2.


-refl   : eqtp-to-eqtpe
              (eqtp/refl (Dof : ekof A K))
              (eqtpe/refl Dofe)
           <- ekof-to-ekofe Dof Dofe.

-kcon   : eqtp-to-eqtpe
              (eqtp/kcon Deqk Deqtp)
              (eqtpe/kcon Deqke Deqtpe)
           <- eqkind-to-eqkinde Deqk Deqke
           <- eqtp-to-eqtpe Deqtp Deqtpe.

%%

-tp     : eqkind-to-eqkinde eqkind/tp eqkinde/tp.

-pi     : eqkind-to-eqkinde
              (eqkind/pi ([x] [d] Deqkind x d) Deqtp)
              (eqkinde/pi ([x] Deqkinde x) Deqtpe)
           <- eqtp-to-eqtpe Deqtp Deqtpe
           <- eqkind1-to-eqkinde Deqkind Deqkinde.

-sym    : eqkind-to-eqkinde
              (eqkind/sym Deqkind)
              (eqkinde/sym Deqkinde)
           <- eqkind-to-eqkinde Deqkind Deqkinde.

-trans  : eqkind-to-eqkinde
              (eqkind/trans Deqkind2 Deqkind1)
              (eqkinde/trans Deqkinde2 Deqkinde1)
           <- eqkind-to-eqkinde Deqkind1 Deqkinde1
           <- eqkind-to-eqkinde Deqkind2 Deqkinde2.


-refl   : eqkind-to-eqkinde
              (eqkind/refl (Dof : ewfkind K))
              (eqkinde/refl Dofe)
           <- ewfkind-to-ewfkinde Dof Dofe.


%worlds (ecsig | easig | evar | eovar | ebind)
  (eof-to-eofe _ _)
  (ekof-to-ekofe _ _)
  (ewfkind-to-ewfkinde _ _)
  (eqtm-to-eqtme _ _)
  (eqtp-to-eqtpe _ _)
  (eqkind-to-eqkinde _ _).
%total (D1 D2 D3 D4 D5 D6)
  (eof-to-eofe D1 _)
  (ekof-to-ekofe D2 _)
  (ewfkind-to-ewfkinde D3 _)
  (eqtm-to-eqtme D4 _)
  (eqtp-to-eqtpe D5 _)
  (eqkind-to-eqkinde D6 _).

%%% Translation from explicit to implicit %%%

eofi      : ectx -> etm -> etp -> type.
ekofi     : ectx -> etp -> ekind -> type.
ewfkindi  : ectx -> ekind -> type.
eqtmi     : ectx -> etm -> etm -> etp -> type.
eqtpi     : ectx -> etp -> etp -> ekind -> type.
eqkindi   : ectx -> ekind -> ekind -> type.

eofi/nil      : eofi enil M A
                 <- eof M A.

eofi/cons     : eofi (econs G X A) M B
                 <- (evof X A -> eofi G M B).
 
ekofi/nil     : ekofi enil M A
                 <- ekof M A.

ekofi/cons    : ekofi (econs G X A) M B
                 <- (evof X A -> ekofi G M B).

ewfkindi/nil  : ewfkindi enil K
                 <- ewfkind K.

ewfkindi/cons : ewfkindi (econs G X A) K
                 <- (evof X A -> ewfkindi G K).

eqtpi/nil     : eqtpi enil A B K
                 <- eqtp A B K.

eqtpi/cons    : eqtpi (econs G X C) A B K
                 <- (evof X C -> eqtpi G A B K).

eqtmi/nil     : eqtmi enil A B K
                 <- eqtm A B K.

eqtmi/cons    : eqtmi (econs G X C) A B K
                 <- (evof X C -> eqtmi G A B K).

eqkindi/nil     : eqkindi enil A B 
                 <- eqkind A B.

eqkindi/cons    : eqkindi (econs G X C) A B
                 <- (evof X C -> eqkindi G A B).


eofi-vari : evof X A -> ekofi G A ektype
            -> eofi G X A -> type.
%mode eofi-vari +X1 +X2 -X3.

- : eofi-vari Dvof (ekofi/nil DofA) (eofi/nil (eof/var DofA Dvof)).

- : eofi-vari Dvof (ekofi/cons ([d:evof Y B] DofA d : ekofi G A ektype))
        (eofi/cons DofX)
     <- ({d:evof Y B}
            eofi-vari Dvof (DofA d)
            (DofX d : eofi G X A)).

%worlds (ecsig | easig | ebind | evar | eofblock) (eofi-vari _ _ _).
%total D (eofi-vari _ D _).

eofi-const : ecof C A -> ekofi G A ektype
              -> eofi G (econst C) A -> type.
%mode eofi-const +X1 +X2 -X3.

- : eofi-const Dcof (ekofi/nil DofA) (eofi/nil (eof/const DofA Dcof)).

- : eofi-const Dcof (ekofi/cons ([d:evof Y B] DofA d : ekofi G A ektype))
        (eofi/cons DofC)
     <- ({d:evof Y B}
            eofi-const Dcof (DofA d)
            (DofC d : eofi G (econst C) A)).

%worlds (ecsig | easig | ebind | evar | eofblock) (eofi-const _ _ _).
%total D (eofi-const _ D _).

eofi-lookup : elookup G X A -> ekofi G A ektype
               -> eofi G X A -> type.
%mode eofi-lookup +X1 +X2 -X3.

- : eofi-lookup elookup/hit 
        (ekofi/cons ([d:evof X A] Dkof d : ekofi G A ektype))
        (eofi/cons Deofi)
     <- ({d:evof X A}
            eofi-vari d (Dkof d)
            (Deofi d : eofi G X A)).

- : eofi-lookup 
        (elookup/miss (Dlook : elookup G X A))
        (ekofi/cons ([d:evof Y B] Dkofi d : ekofi G A ektype))
        (eofi/cons Deofi)
     <- ({d:evof Y B}
            eofi-lookup Dlook (Dkofi d)
            (Deofi d : eofi G X A)).

%worlds (ecsig | easig | ebind | evar | eofblock) (eofi-lookup _ _ _).
%total D (eofi-lookup D _ _).

eofi-app    : eofi G M (epi A B) -> eofi G N A
               -> eofi G (eapp M N) (B N) -> type.
%mode eofi-app +X1 +X2 -X3.

- : eofi-app 
        (eofi/nil (DofM : eof M (epi A B))) (eofi/nil (DofN : eof N A))
        (eofi/nil (eof/app DofN DofM)).

- : eofi-app
        (eofi/cons
            ([d:evof X C] DofM d : eofi G M (epi A B)))
        (eofi/cons
            ([d:evof X C] DofN d : eofi G N A))
        (eofi/cons DofApp)
     <- ({d:evof X C}
            eofi-app (DofM d) (DofN d)
            (DofApp d : eofi G (eapp M N) (B N))).

%worlds (ecsig | easig | ebind | evar | eofblock) (eofi-app _ _ _).
%total D (eofi-app D _ _).

eofi-lam    : ekofi G A ektype -> ({x} eofi (econs G x A) (M x) (B x))
               -> eofi G (elam A M) (epi A B) -> type.
%mode eofi-lam +X1 +X2 -X3.

- : eofi-lam (ekofi/nil (Dkof : ekof A ektype))
        ([x] eofi/cons ([d:evof x A] eofi/nil (DofM x d : eof (M x) (B x))))
        (eofi/nil (eof/lam Dkof DofM)).

- : eofi-lam (ekofi/cons ([e:evof Y C] Dkof e : ekofi G A ektype))
        ([x] eofi/cons 
            ([d:evof x A] eofi/cons
                ([e:evof Y C] DofM x d e : eofi G (M x) (B x)))) 
        (eofi/cons DofLam)
     <- ({e:evof Y C}
            eofi-lam (Dkof e) ([x] eofi/cons ([d] DofM x d e))
            (DofLam e : eofi G (elam A M) (epi A B))).

%worlds (ecsig | easig | ebind | evar | eofblock) (eofi-lam _ _ _).
%total D (eofi-lam D _ _).

eofi-eqtp   : eofi G M A -> eqtpi G A B ektype
               -> eofi G M B -> type.
%mode eofi-eqtp +X1 +X2 -X3.

- : eofi-eqtp (eofi/nil Dof) (eqtpi/nil Deqtp)
        (eofi/nil (eof/eqtp Deqtp Dof)).

- : eofi-eqtp (eofi/cons ([d] Dofi d)) (eqtpi/cons ([d] Deqtpi d))
        (eofi/cons D)
     <- ({d}
            eofi-eqtp (Dofi d) (Deqtpi d)
            (D d)).

%worlds (ecsig | easig | ebind | evar | eofblock) (eofi-eqtp _ _ _).
%total D (eofi-eqtp D _ _).

eofi-ext    : ({x} eofi (econs G x A) (eapp M x) (B x))
               -> eofi G M (epi A B')
               -> eofi G M (epi A B) -> type.
%mode eofi-ext +X1 +X2 -X3.

- : eofi-ext
        ([x] eofi/cons 
            ([d:evof x A] eofi/nil (DofApp x d : eof (eapp M x) (B x))))
        (eofi/nil (DofM : eof M (epi A B')))
        (eofi/nil (eof/ext DofApp DofM)).

- : eofi-ext
        ([x] eofi/cons ([d] eofi/cons ([e] DofApp x d e)))
        (eofi/cons ([e] DofM e))
        (eofi/cons D)
     <- ({e} eofi-ext ([x] eofi/cons ([d] DofApp x d e)) (DofM e)
            (D e)).

%worlds (ecsig | easig | ebind | evar | eofblock) (eofi-ext _ _ _).
%total D (eofi-ext _ D _).

ekofi-const : eckof C A -> ewfkindi G A
              -> ekofi G (eaconst C) A -> type.
%mode ekofi-const +X1 +X2 -X3.

- : ekofi-const Dcof (ewfkindi/nil DofA) (ekofi/nil (ekof/const DofA Dcof)).

- : ekofi-const Dcof (ewfkindi/cons ([d:evof Y B] DofA d : ewfkindi G A))
        (ekofi/cons DofC)
     <- ({d:evof Y B}
            ekofi-const Dcof (DofA d)
            (DofC d : ekofi G (eaconst C) A)).

%worlds (ecsig | easig | ebind | evar | eofblock) (ekofi-const _ _ _).
%total D (ekofi-const _ D _).

ekofi-app    : ekofi G M (ekpi A B) -> eofi G N A
               -> ekofi G (eaapp M N) (B N) -> type.
%mode ekofi-app +X1 +X2 -X3.

- : ekofi-app 
        (ekofi/nil (DofM : ekof M (ekpi A B))) (eofi/nil (DofN : eof N A))
        (ekofi/nil (ekof/app DofN DofM)).

- : ekofi-app
        (ekofi/cons
            ([d:evof X C] DofM d : ekofi G M (ekpi A B)))
        (eofi/cons
            ([d:evof X C] DofN d : eofi G N A))
        (ekofi/cons DofApp)
     <- ({d:evof X C}
            ekofi-app (DofM d) (DofN d)
            (DofApp d : ekofi G (eaapp M N) (B N))).

%worlds (ecsig | easig | ebind | evar | eofblock) (ekofi-app _ _ _).
%total D (ekofi-app D _ _).

ekofi-lam    : ekofi G A ektype -> ({x} ekofi (econs G x A) (M x) (B x))
               -> ekofi G (ealam A M) (ekpi A B) -> type.
%mode ekofi-lam +X1 +X2 -X3.

- : ekofi-lam 
        (ekofi/nil (Dkof : ekof A ektype))
        ([x] ekofi/cons 
            ([d:evof x A] ekofi/nil (DofM x d : ekof (M x) (B x))))
        (ekofi/nil (ekof/lam Dkof DofM)).

- : ekofi-lam 
        (ekofi/cons ([e:evof Y C] Dkof e : ekofi G A ektype))
        ([x] ekofi/cons 
            ([d:evof x A] ekofi/cons
                ([e:evof Y C] DofM x d e : ekofi G (M x) (B x)))) 
        (ekofi/cons DofLam)
     <- ({e:evof Y C}
            ekofi-lam (Dkof e) ([x] ekofi/cons ([d] DofM x d e))
            (DofLam e : ekofi G (ealam A M) (ekpi A B))).

%worlds (ecsig | easig | ebind | evar | eofblock) (ekofi-lam _ _ _).
%total D (ekofi-lam D _ _).

ekofi-pi    : ekofi G A ektype -> ({x} ekofi (econs G x A) (M x) ektype)
               -> ekofi G (epi A M) ektype -> type.
%mode ekofi-pi +X1 +X2 -X3.

- : ekofi-pi 
        (ekofi/nil (Dkof : ekof A ektype))
        ([x] ekofi/cons 
            ([d:evof x A] ekofi/nil (DofM x d : ekof (M x) ektype)))
        (ekofi/nil (ekof/pi DofM Dkof)).

- : ekofi-pi 
        (ekofi/cons ([e:evof Y C] Dkof e : ekofi G A ektype))
        ([x] ekofi/cons 
            ([d:evof x A] ekofi/cons
                ([e:evof Y C] DofM x d e : ekofi G (M x) ektype))) 
        (ekofi/cons DofLam)
     <- ({e:evof Y C}
            ekofi-pi (Dkof e) ([x] ekofi/cons ([d] DofM x d e))
            (DofLam e : ekofi G (epi A M) ektype)).

%worlds (ecsig | easig | ebind | evar | eofblock) (ekofi-pi _ _ _).
%total D (ekofi-pi D _ _).

ekofi-eqkind   : ekofi G M A -> eqkindi G A B
               -> ekofi G M B -> type.
%mode ekofi-eqkind +X1 +X2 -X3.

- : ekofi-eqkind (ekofi/nil Dof) (eqkindi/nil Deqkind)
        (ekofi/nil (ekof/eqkind Deqkind Dof)).

- : ekofi-eqkind (ekofi/cons ([d] Dofi d)) (eqkindi/cons ([d] Deqkindi d))
        (ekofi/cons D)
     <- ({d}
            ekofi-eqkind (Dofi d) (Deqkindi d)
            (D d)).

%worlds (ecsig | easig | ebind | evar | eofblock) (ekofi-eqkind _ _ _).
%total D (ekofi-eqkind D _ _).

ekofi-ext    : ({x} ekofi (econs G x A) (eaapp M x) (B x))
               -> ekofi G M (ekpi A B')
               -> ekofi G M (ekpi A B) -> type.
%mode ekofi-ext +X1 +X2 -X3.

- : ekofi-ext
        ([x] ekofi/cons 
            ([d:evof x A] ekofi/nil (DofApp x d : ekof (eaapp M x) (B x))))
        (ekofi/nil (DofM : ekof M (ekpi A B')))
        (ekofi/nil (ekof/ext DofApp DofM)).

- : ekofi-ext
        ([x] ekofi/cons ([d] ekofi/cons ([e] DofApp x d e)))
        (ekofi/cons ([e] DofM e))
        (ekofi/cons D)
     <- ({e} ekofi-ext ([x] ekofi/cons ([d] DofApp x d e)) (DofM e)
            (D e)).

%worlds (ecsig | easig | ebind | evar | eofblock) (ekofi-ext _ _ _).
%total D (ekofi-ext _ D _).


ewfkindi-type : {G} ewfkindi G ektype -> type.
%mode ewfkindi-type +G -X.

- : ewfkindi-type enil (ewfkindi/nil ewfkind/tp).

- : ewfkindi-type (econs G X A)
        (ewfkindi/cons ([_] Dwfi))
     <- ewfkindi-type G Dwfi.

%worlds (ecsig | easig | ebind | evar | eofblock) (ewfkindi-type _ _).
%total D (ewfkindi-type D _).

ewfkindi-pi   : ekofi G A ektype -> ({x} ewfkindi (econs G x A) (K x))
                 -> ewfkindi G (ekpi A K) -> type.
%mode ewfkindi-pi +X1 +X2 -X3.

- : ewfkindi-pi 
        (ekofi/nil (Dkof : ekof A ektype))
        ([x] ewfkindi/cons 
            ([d:evof x A] ewfkindi/nil (DofM x d : ewfkind (K x))))
        (ewfkindi/nil (ewfkind/pi DofM Dkof)).

- : ewfkindi-pi 
        (ekofi/cons ([e:evof Y C] Dkof e : ekofi G A ektype))
        ([x] ewfkindi/cons 
            ([d:evof x A] ewfkindi/cons
                ([e:evof Y C] DofM x d e : ewfkindi G (K x)))) 
        (ewfkindi/cons DofLam)
     <- ({e:evof Y C}
            ewfkindi-pi (Dkof e) ([x] ewfkindi/cons ([d] DofM x d e))
            (DofLam e : ewfkindi G (ekpi A K))).

%worlds (ecsig | easig | ebind | evar | eofblock) (ewfkindi-pi _ _ _).
%total D (ewfkindi-pi D _ _).


eqtmi-app : eqtmi G M M' (epi A B) -> eqtmi G N N' A
             -> eqtmi G (eapp M N) (eapp M' N') (B N) -> type.
%mode eqtmi-app +X1 +X2 -X3.

- : eqtmi-app (eqtmi/nil DeqtmM) (eqtmi/nil DeqtmN)
        (eqtmi/nil (eqtm/app DeqtmN DeqtmM)).

- : eqtmi-app (eqtmi/cons ([d] DeqtmiM d)) (eqtmi/cons ([d] DeqtmiN d))
        (eqtmi/cons Deqtmi)
     <- ({d} eqtmi-app (DeqtmiM d) (DeqtmiN d) (Deqtmi d)).

%worlds (ecsig | easig | ebind | evar | eofblock) (eqtmi-app _ _ _).
%total D (eqtmi-app D _ _).

eqtmi-lam : eqtpi G A A' ektype 
             -> ({x} eqtmi (econs G x A) (M x) (M' x) (B x))
             -> eqtmi G (elam A M) (elam A' M') (epi A B) -> type.
%mode eqtmi-lam +X1 +X2 -X3.

- : eqtmi-lam 
        (eqtpi/nil Deqtp) 
        ([x] eqtmi/cons ([d] eqtmi/nil (Deqtm x d)))
        (eqtmi/nil (eqtm/lam ([x] [d] Deqtm x d) Deqtp)).

- : eqtmi-lam 
        (eqtpi/cons ([e] Deqtpi e))
        ([x] eqtmi/cons ([d] eqtmi/cons ([e] Deqtmi x d e)))
        (eqtmi/cons ([e] D e))
     <- ({e}
            eqtmi-lam (Deqtpi e) ([x] eqtmi/cons ([d] Deqtmi x d e))
            (D e)).

%worlds (ecsig | easig | ebind | evar | eofblock) (eqtmi-lam _ _ _).
%total D (eqtmi-lam D _ _).

eqtmi-ext : ({x} eqtmi (econs G x A) (eapp M x) (eapp M' x) (B x))
             -> eofi G M (epi A B')
             -> eofi G M' (epi A B'')
             -> eqtmi G M M' (epi A B) -> type.
%mode eqtmi-ext +X1 +X2 +X3 -X4.

- : eqtmi-ext 
        ([x] eqtmi/cons ([d] eqtmi/nil (Deqtm x d))) 
        (eofi/nil DofM) (eofi/nil DofM')
        (eqtmi/nil (eqtm/ext ([x] [d] Deqtm x d) DofM' DofM)).

- : eqtmi-ext 
        ([x] eqtmi/cons ([d] eqtmi/cons ([e] Deqtmi x d e)))
        (eofi/cons ([e] DofM e))
        (eofi/cons ([e] DofM' e))
        (eqtmi/cons ([e] D e))
     <- ({e}
            eqtmi-ext 
            ([x] eqtmi/cons ([d] Deqtmi x d e)) 
            (DofM e) (DofM' e)
            (D e)).

%worlds (ecsig | easig | ebind | evar | eofblock) (eqtmi-ext _ _ _ _).
%total D (eqtmi-ext _ D _ _).

eqtmi-extw : ({x} eqtmi (econs G x A) (eapp M x) (eapp M' x) (B x))
              -> eqtmi G M M' (epi A B')
              -> eqtmi G M M' (epi A B) -> type.
%mode eqtmi-extw +X2 +X3 -X4.

- : eqtmi-extw 
        ([x] eqtmi/cons ([d] eqtmi/nil (Deqtm x d))) 
        (eqtmi/nil DeqM)
        (eqtmi/nil (eqtm/extw ([x] [d] Deqtm x d) DeqM)).

- : eqtmi-extw 
        ([x] eqtmi/cons ([d] eqtmi/cons ([e] Deqtmi x d e)))
        (eqtmi/cons ([e] DeqM e))
        (eqtmi/cons ([e] D e))
     <- ({e}
            eqtmi-extw 
            ([x] eqtmi/cons ([d] Deqtmi x d e)) 
            (DeqM e)
            (D e)).

%worlds (ecsig | easig | ebind | evar | eofblock) (eqtmi-extw _ _ _).
%total D (eqtmi-extw _ D _).

eqtmi-beta : eofi G N A -> ({x} eofi (econs G x A) (M x) (B x))
              -> eqtmi G (eapp (elam A M) N) (M N) (B N) -> type.
%mode eqtmi-beta +X1 +X2 -X3.

- : eqtmi-beta (eofi/nil DofN) ([x] eofi/cons ([d] eofi/nil (DofM x d)))
        (eqtmi/nil (eqtm/beta DofN DofM)).

- : eqtmi-beta 
        (eofi/cons ([e] DofiN e))
        ([x] eofi/cons ([d] eofi/cons ([e] DofiM x d e)))
        (eqtmi/cons ([e] Dofi e))
     <- ({e}
            eqtmi-beta (DofiN e) ([x] eofi/cons ([d] DofiM x d e))
            (Dofi e)).

%worlds (ecsig | easig | ebind | evar | eofblock) (eqtmi-beta _ _ _).
%total D (eqtmi-beta D _ _).

eqtmi-sym : eqtmi G M N A -> eqtmi G N M A -> type.
%mode eqtmi-sym +X1 -X2.

- : eqtmi-sym (eqtmi/nil Deqtm) (eqtmi/nil (eqtm/sym Deqtm)).

- : eqtmi-sym (eqtmi/cons ([d] Deqtmi d))
        (eqtmi/cons ([d] D d))
     <- ({d} eqtmi-sym (Deqtmi d) (D d)).

%worlds (ecsig | easig | ebind | evar | eofblock) (eqtmi-sym _ _).
%total D (eqtmi-sym D _).

eqtmi-trans : eqtmi G M N A -> eqtmi G N O A -> eqtmi G M O A -> type.
%mode eqtmi-trans +X1 +X2 -X3.

- : eqtmi-trans (eqtmi/nil D1) (eqtmi/nil D2)
        (eqtmi/nil (eqtm/trans D2 D1)).

- : eqtmi-trans (eqtmi/cons ([d] D1 d)) (eqtmi/cons ([d] D2 d))
        (eqtmi/cons ([d] D d))
     <- ({d} eqtmi-trans (D1 d) (D2 d) (D d)).

%worlds (ecsig | easig | ebind | evar | eofblock) (eqtmi-trans _ _ _).
%total D (eqtmi-trans D _ _).

eqtmi-refl : eofi G M A -> eqtmi G M M A -> type.
%mode eqtmi-refl +X1 -X2.

- : eqtmi-refl (eofi/nil D) (eqtmi/nil (eqtm/refl D)).

- : eqtmi-refl (eofi/cons ([d] D d)) (eqtmi/cons ([d] D' d))
     <- ({d} eqtmi-refl (D d) (D' d)).

%worlds (ecsig | easig | ebind | evar | eofblock) (eqtmi-refl _ _).
%total D (eqtmi-refl D _).

eqtmi-tcon : eqtmi G M N A -> eqtpi G A B ektype
              -> eqtmi G M N B -> type.
%mode eqtmi-tcon +X1 +X2 -X3.

- : eqtmi-tcon (eqtmi/nil Dtm) (eqtpi/nil Dtp)
        (eqtmi/nil (eqtm/typecon Dtp Dtm)).

- : eqtmi-tcon (eqtmi/cons ([d] Dtm d)) (eqtpi/cons ([d] Dtp d))
        (eqtmi/cons ([d] D d))
     <- ({d} eqtmi-tcon (Dtm d) (Dtp d) (D d)).

%worlds (ecsig | easig | ebind | evar | eofblock) (eqtmi-tcon _ _ _).
%total D (eqtmi-tcon D _ _).


eqtpi-pi : eqtpi G A A' ektype 
             -> ({x} eqtpi (econs G x A) (M x) (M' x) ektype)
             -> eqtpi G (epi A M) (epi A' M') ektype -> type.
%mode eqtpi-pi +X1 +X2 -X3.

- : eqtpi-pi 
        (eqtpi/nil Deqtp) 
        ([x] eqtpi/cons ([d] eqtpi/nil (Deqtm x d)))
        (eqtpi/nil (eqtp/pi ([x] [d] Deqtm x d) Deqtp)).

- : eqtpi-pi 
        (eqtpi/cons ([e] Deqtpi e))
        ([x] eqtpi/cons ([d] eqtpi/cons ([e] Deqtmi x d e)))
        (eqtpi/cons ([e] D e))
     <- ({e}
            eqtpi-pi (Deqtpi e) ([x] eqtpi/cons ([d] Deqtmi x d e))
            (D e)).

%worlds (ecsig | easig | ebind | evar | eofblock) (eqtpi-pi _ _ _).
%total D (eqtpi-pi D _ _).

eqtpi-app : eqtpi G M M' (ekpi A B) -> eqtmi G N N' A
             -> eqtpi G (eaapp M N) (eaapp M' N') (B N) -> type.
%mode eqtpi-app +X1 +X2 -X3.

- : eqtpi-app (eqtpi/nil DeqtmM) (eqtmi/nil DeqtmN)
        (eqtpi/nil (eqtp/app DeqtmN DeqtmM)).

- : eqtpi-app (eqtpi/cons ([d] DeqtmiM d)) (eqtmi/cons ([d] DeqtmiN d))
        (eqtpi/cons Deqtmi)
     <- ({d} eqtpi-app (DeqtmiM d) (DeqtmiN d) (Deqtmi d)).

%worlds (ecsig | easig | ebind | evar | eofblock) (eqtpi-app _ _ _).
%total D (eqtpi-app D _ _).

eqtpi-lam : eqtpi G A A' ektype 
             -> ({x} eqtpi (econs G x A) (M x) (M' x) (B x))
             -> eqtpi G (ealam A M) (ealam A' M') (ekpi A B) -> type.
%mode eqtpi-lam +X1 +X2 -X3.

- : eqtpi-lam 
        (eqtpi/nil Deqtp) 
        ([x] eqtpi/cons ([d] eqtpi/nil (Deqtm x d)))
        (eqtpi/nil (eqtp/lam ([x] [d] Deqtm x d) Deqtp)).

- : eqtpi-lam 
        (eqtpi/cons ([e] Deqtpi e))
        ([x] eqtpi/cons ([d] eqtpi/cons ([e] Deqtmi x d e)))
        (eqtpi/cons ([e] D e))
     <- ({e}
            eqtpi-lam (Deqtpi e) ([x] eqtpi/cons ([d] Deqtmi x d e))
            (D e)).

%worlds (ecsig | easig | ebind | evar | eofblock) (eqtpi-lam _ _ _).
%total D (eqtpi-lam D _ _).

eqtpi-ext : ({x} eqtpi (econs G x A) (eaapp M x) (eaapp M' x) (B x))
             -> ekofi G M (ekpi A B')
             -> ekofi G M' (ekpi A B'')
             -> eqtpi G M M' (ekpi A B) -> type.
%mode eqtpi-ext +X1 +X2 +X3 -X4.

- : eqtpi-ext 
        ([x] eqtpi/cons ([d] eqtpi/nil (Deqtm x d))) 
        (ekofi/nil DkofM) (ekofi/nil DkofM')
        (eqtpi/nil (eqtp/ext ([x] [d] Deqtm x d) DkofM' DkofM)).

- : eqtpi-ext 
        ([x] eqtpi/cons ([d] eqtpi/cons ([e] Deqtmi x d e)))
        (ekofi/cons ([e] DkofM e))
        (ekofi/cons ([e] DkofM' e))
        (eqtpi/cons ([e] D e))
     <- ({e}
            eqtpi-ext 
            ([x] eqtpi/cons ([d] Deqtmi x d e)) 
            (DkofM e) (DkofM' e)
            (D e)).

%worlds (ecsig | easig | ebind | evar | eofblock) (eqtpi-ext _ _ _ _).
%total D (eqtpi-ext _ D _ _).

eqtpi-extw : ({x} eqtpi (econs G x A) (eaapp M x) (eaapp M' x) (B x))
              -> eqtpi G M M' (ekpi A B')
              -> eqtpi G M M' (ekpi A B) -> type.
%mode eqtpi-extw +X2 +X3 -X4.

- : eqtpi-extw 
        ([x] eqtpi/cons ([d] eqtpi/nil (Deqtm x d))) 
        (eqtpi/nil DeqM)
        (eqtpi/nil (eqtp/extw ([x] [d] Deqtm x d) DeqM)).

- : eqtpi-extw 
        ([x] eqtpi/cons ([d] eqtpi/cons ([e] Deqtmi x d e)))
        (eqtpi/cons ([e] DeqM e))
        (eqtpi/cons ([e] D e))
     <- ({e}
            eqtpi-extw 
            ([x] eqtpi/cons ([d] Deqtmi x d e)) 
            (DeqM e)
            (D e)).

%worlds (ecsig | easig | ebind | evar | eofblock) (eqtpi-extw _ _ _).
%total D (eqtpi-extw _ D _).

eqtpi-beta : eofi G N A -> ({x} ekofi (econs G x A) (M x) (B x))
              -> eqtpi G (eaapp (ealam A M) N) (M N) (B N) -> type.
%mode eqtpi-beta +X1 +X2 -X3.

- : eqtpi-beta (eofi/nil DofN) ([x] ekofi/cons ([d] ekofi/nil (DofM x d)))
        (eqtpi/nil (eqtp/beta DofN DofM)).

- : eqtpi-beta 
        (eofi/cons ([e] DofiN e))
        ([x] ekofi/cons ([d] ekofi/cons ([e] DofiM x d e)))
        (eqtpi/cons ([e] Dofi e))
     <- ({e}
            eqtpi-beta (DofiN e) ([x] ekofi/cons ([d] DofiM x d e))
            (Dofi e)).

%worlds (ecsig | easig | ebind | evar | eofblock) (eqtpi-beta _ _ _).
%total D (eqtpi-beta D _ _).

eqtpi-sym : eqtpi G M N A -> eqtpi G N M A -> type.
%mode eqtpi-sym +X1 -X2.

- : eqtpi-sym (eqtpi/nil Deqtm) (eqtpi/nil (eqtp/sym Deqtm)).

- : eqtpi-sym (eqtpi/cons ([d] Deqtpi d))
        (eqtpi/cons ([d] D d))
     <- ({d} eqtpi-sym (Deqtpi d) (D d)).

%worlds (ecsig | easig | ebind | evar | eofblock) (eqtpi-sym _ _).
%total D (eqtpi-sym D _).

eqtpi-trans : eqtpi G M N A -> eqtpi G N O A -> eqtpi G M O A -> type.
%mode eqtpi-trans +X1 +X2 -X3.

- : eqtpi-trans (eqtpi/nil D1) (eqtpi/nil D2)
        (eqtpi/nil (eqtp/trans D2 D1)).

- : eqtpi-trans (eqtpi/cons ([d] D1 d)) (eqtpi/cons ([d] D2 d))
        (eqtpi/cons ([d] D d))
     <- ({d} eqtpi-trans (D1 d) (D2 d) (D d)).

%worlds (ecsig | easig | ebind | evar | eofblock) (eqtpi-trans _ _ _).
%total D (eqtpi-trans D _ _).

eqtpi-refl : ekofi G M A -> eqtpi G M M A -> type.
%mode eqtpi-refl +X1 -X2.

- : eqtpi-refl (ekofi/nil D) (eqtpi/nil (eqtp/refl D)).

- : eqtpi-refl (ekofi/cons ([d] D d)) (eqtpi/cons ([d] D' d))
     <- ({d} eqtpi-refl (D d) (D' d)).

%worlds (ecsig | easig | ebind | evar | eofblock) (eqtpi-refl _ _).
%total D (eqtpi-refl D _).

eqtpi-kcon : eqtpi G M N A -> eqkindi G A B 
              -> eqtpi G M N B -> type.
%mode eqtpi-kcon +X1 +X2 -X3.

- : eqtpi-kcon (eqtpi/nil Dtm) (eqkindi/nil Dtp)
        (eqtpi/nil (eqtp/kcon Dtp Dtm)).

- : eqtpi-kcon (eqtpi/cons ([d] Dtm d)) (eqkindi/cons ([d] Dtp d))
        (eqtpi/cons ([d] D d))
     <- ({d} eqtpi-kcon (Dtm d) (Dtp d) (D d)).

%worlds (ecsig | easig | ebind | evar | eofblock) (eqtpi-kcon _ _ _).
%total D (eqtpi-kcon D _ _).


eqkindi-type : {G} eqkindi G ektype ektype -> type.
%mode eqkindi-type +G -X.

- : eqkindi-type enil (eqkindi/nil eqkind/tp).

- : eqkindi-type (econs G _ _)
        (eqkindi/cons ([_] D))
     <- eqkindi-type G D.

%worlds (ecsig | easig | ebind | evar | eofblock) (eqkindi-type _ _).
%total G (eqkindi-type G _).

eqkindi-pi : eqtpi G A A' ektype 
              -> ({x} eqkindi (econs G x A) (M x) (M' x))
              -> eqkindi G (ekpi A M) (ekpi A' M') -> type.
%mode eqkindi-pi +X1 +X2 -X3.

- : eqkindi-pi 
        (eqtpi/nil Deqtp) 
        ([x] eqkindi/cons ([d] eqkindi/nil (Deqtm x d)))
        (eqkindi/nil (eqkind/pi ([x] [d] Deqtm x d) Deqtp)).

- : eqkindi-pi 
        (eqtpi/cons ([e] Deqtpi e))
        ([x] eqkindi/cons ([d] eqkindi/cons ([e] Deqtmi x d e)))
        (eqkindi/cons ([e] D e))
     <- ({e}
            eqkindi-pi (Deqtpi e) ([x] eqkindi/cons ([d] Deqtmi x d e))
            (D e)).

%worlds (ecsig | easig | ebind | evar | eofblock) (eqkindi-pi _ _ _).
%total D (eqkindi-pi D _ _).

eqkindi-sym : eqkindi G M N -> eqkindi G N M -> type.
%mode eqkindi-sym +X1 -X2.

- : eqkindi-sym (eqkindi/nil Deqtm) (eqkindi/nil (eqkind/sym Deqtm)).

- : eqkindi-sym (eqkindi/cons ([d] Deqkindi d))
        (eqkindi/cons ([d] D d))
     <- ({d} eqkindi-sym (Deqkindi d) (D d)).

%worlds (ecsig | easig | ebind | evar | eofblock) (eqkindi-sym _ _).
%total D (eqkindi-sym D _).

eqkindi-trans : eqkindi G M N -> eqkindi G N O -> eqkindi G M O -> type.
%mode eqkindi-trans +X1 +X2 -X3.

- : eqkindi-trans (eqkindi/nil D1) (eqkindi/nil D2)
        (eqkindi/nil (eqkind/trans D2 D1)).

- : eqkindi-trans (eqkindi/cons ([d] D1 d)) (eqkindi/cons ([d] D2 d))
        (eqkindi/cons ([d] D d))
     <- ({d} eqkindi-trans (D1 d) (D2 d) (D d)).

%worlds (ecsig | easig | ebind | evar | eofblock) (eqkindi-trans _ _ _).
%total D (eqkindi-trans D _ _).

eqkindi-refl : ewfkindi G M -> eqkindi G M M -> type.
%mode eqkindi-refl +X1 -X2.

- : eqkindi-refl (ewfkindi/nil D) (eqkindi/nil (eqkind/refl D)).

- : eqkindi-refl (ewfkindi/cons ([d] D d)) (eqkindi/cons ([d] D' d))
     <- ({d} eqkindi-refl (D d) (D' d)).

%worlds (ecsig | easig | ebind | evar | eofblock) (eqkindi-refl _ _).
%total D (eqkindi-refl D _).


eofe-to-eofi : eofe G M A -> eofi G M A -> type.
%mode eofe-to-eofi +X1 -X2.

ekofe-to-ekofi : ekofe G A K -> ekofi G A K -> type.
%mode ekofe-to-ekofi +X1 -X2.

ewfkinde-to-ewfkindi : ewfkinde G K -> ewfkindi G K -> type.
%mode ewfkinde-to-ewfkindi +X1 -X2.

eqtme-to-eqtmi : eqtme G M N A -> eqtmi G M N A -> type.
%mode eqtme-to-eqtmi +X1 -X2.

eqtpe-to-eqtpi : eqtpe G A B K -> eqtpi G A B K -> type.
%mode eqtpe-to-eqtpi +X1 -X2.

eqkinde-to-eqkindi : eqkinde G K L -> eqkindi G K L -> type.
%mode eqkinde-to-eqkindi +X1 -X2.

-vari   : eofe-to-eofi
              (eofe/vari
                  (Dkof : ekofe G A ektype)
                  (Dvof : evof X A))
              DofX
           <- ekofe-to-ekofi Dkof Dkofi
           <- eofi-vari Dvof Dkofi
              (DofX : eofi G X A).

-const  : eofe-to-eofi
              (eofe/const
                  (Dkof : ekofe G A ektype)
                  (Dcof : ecof C A))
              DofC
           <- ekofe-to-ekofi Dkof Dkofi
           <- eofi-const Dcof Dkofi
              (DofC : eofi G (econst C) A).

-var    : eofe-to-eofi
              (eofe/var
                  (Dkof : ekofe G A ektype)
                  (Dlook : elookup G X A))
              Dofi
           <- ekofe-to-ekofi Dkof Dkofi
           <- eofi-lookup Dlook Dkofi
              (Dofi : eofi G X A).

-app      : eofe-to-eofi
                (eofe/app
                    (DofN : eofe G N B)
                    (DofM : eofe G M (epi B ([x] A x))))
                DofiApp
             <- eofe-to-eofi DofN DofiN
             <- eofe-to-eofi DofM DofiM
             <- eofi-app DofiM DofiN DofiApp.

-lam      : eofe-to-eofi
                (eofe/lam
                    DofA
                    ([x] DofM x : eofe (econs G x A) (M x) (B x)))
                D
             <- ekofe-to-ekofi DofA DofiA
             <- ({x}
                    eofe-to-eofi (DofM x)
                    (DofiM x : eofi (econs G x A) (M x) (B x)))
             <- eofi-lam DofiA DofiM
                D.

-eqtp     : eofe-to-eofi
                (eofe/eqtp
                    (Deqtp : eqtpe G A B ektype)
                    (DofM : eofe G M A))
                D
             <- eqtpe-to-eqtpi Deqtp Deqtpi
             <- eofe-to-eofi DofM DofiM
             <- eofi-eqtp DofiM Deqtpi
                D.

-ext      : eofe-to-eofi
                (eofe/ext
                    ([x] DofApp x
                      : eofe (econs G x A) (eapp M x) (B x))
                    (DofM : eofe G M (epi A ([x] B' x))))
                D
             <- ({x}
                    eofe-to-eofi (DofApp x)
                    (DofiApp x : eofi (econs G x A) (eapp M x) (B x)))
             <- eofe-to-eofi DofM DofiM
             <- eofi-ext DofiApp DofiM D.

%%

-const  : ekofe-to-ekofi
              (ekofe/const
                  (Dkof : ewfkinde G A)
                  (Dcof : eckof C A))
              DofC
           <- ewfkinde-to-ewfkindi Dkof Dkofi
           <- ekofi-const Dcof Dkofi
              (DofC : ekofi G (eaconst C) A).

-app    : ekofe-to-ekofi
              (ekofe/app Dofe Dkofe)
              D
           <- ekofe-to-ekofi Dkofe Dkofi
           <- eofe-to-eofi Dofe Dofi
           <- ekofi-app Dkofi Dofi D.

-lam    : ekofe-to-ekofi
              (ekofe/lam D1 D2)
              D
           <- ({x} ekofe-to-ekofi (D2 x) (D2i x))
           <- ekofe-to-ekofi D1 D1i
           <- ekofi-lam D1i D2i D.

-pi     : ekofe-to-ekofi
              (ekofe/pi D1 D2)
              D
           <- ({x} ekofe-to-ekofi (D2 x) (D2i x))
           <- ekofe-to-ekofi D1 D1i
           <- ekofi-pi D1i D2i D.

-eqkind : ekofe-to-ekofi
              (ekofe/eqkind Deqkinde Dekofe)
              D
           <- ekofe-to-ekofi Dekofe Dekofi
           <- eqkinde-to-eqkindi Deqkinde Deqkindi
           <- ekofi-eqkind Dekofi Deqkindi D.

-ext    : ekofe-to-ekofi
              (ekofe/ext ([x] DofApp x) DofM)
              D
           <- ({x} ekofe-to-ekofi (DofApp x) (DofiApp x))
           <- ekofe-to-ekofi DofM DofiM
           <- ekofi-ext DofiApp DofiM D.

%%

-type   : ewfkinde-to-ewfkindi ewfkinde/tp Dwfi
           <- ewfkindi-type _ Dwfi.

-pi     : ewfkinde-to-ewfkindi (ewfkinde/pi D1 D2) D
           <- ({x} ewfkinde-to-ewfkindi (D2 x) (D2i x))
           <- ekofe-to-ekofi D1 D1i
           <- ewfkindi-pi D1i D2i D.

%%

-app    : eqtme-to-eqtmi (eqtme/app DeqtmN DeqtmM)
              D
           <- eqtme-to-eqtmi DeqtmN DeqtmiN
           <- eqtme-to-eqtmi DeqtmM DeqtmiM
           <- eqtmi-app DeqtmiM DeqtmiN D.

-lam    : eqtme-to-eqtmi (eqtme/lam ([x] Deqtm x) Deqtp)
              D
           <- eqtpe-to-eqtpi Deqtp Deqtpi
           <- ({x} eqtme-to-eqtmi (Deqtm x) (Deqtmi x))
           <- eqtmi-lam Deqtpi Deqtmi D.

-ext    : eqtme-to-eqtmi (eqtme/ext ([x] Deqtm x) DofM' DofM)
              D
           <- eofe-to-eofi DofM DofiM
           <- eofe-to-eofi DofM' DofiM'
           <- ({x} eqtme-to-eqtmi (Deqtm x) (Deqtmi x))
           <- eqtmi-ext Deqtmi DofiM DofiM' D.

-extw   : eqtme-to-eqtmi (eqtme/extw ([x] Deqtm x) Deqtm')
              D
           <- eqtme-to-eqtmi Deqtm' Deqtmi'
           <- ({x} eqtme-to-eqtmi (Deqtm x) (Deqtmi x))
           <- eqtmi-extw Deqtmi Deqtmi'
              D.

-beta   : eqtme-to-eqtmi (eqtme/beta DofN ([x] DofM x))
              D
           <- eofe-to-eofi DofN DofiN
           <- ({x} eofe-to-eofi (DofM x) (DofiM x))
           <- eqtmi-beta DofiN DofiM D.

-sym    : eqtme-to-eqtmi (eqtme/sym Deqtm)
              D
           <- eqtme-to-eqtmi Deqtm Deqtmi
           <- eqtmi-sym Deqtmi D.

-trans  : eqtme-to-eqtmi (eqtme/trans D2 D1)
              D
           <- eqtme-to-eqtmi D1 D1i
           <- eqtme-to-eqtmi D2 D2i
           <- eqtmi-trans D1i D2i D.

-refl   : eqtme-to-eqtmi (eqtme/refl Dof)
              D
           <- eofe-to-eofi Dof Dofi
           <- eqtmi-refl Dofi D.

-tcon   : eqtme-to-eqtmi (eqtme/tcon Deqtp Deqtm)
              D
           <- eqtme-to-eqtmi Deqtm Deqtmi
           <- eqtpe-to-eqtpi Deqtp Deqtpi
           <- eqtmi-tcon Deqtmi Deqtpi D.

%%

-pi     : eqtpe-to-eqtpi (eqtpe/pi ([x] D2 x) D1)
              D
           <- eqtpe-to-eqtpi D1 D1i
           <- ({x} eqtpe-to-eqtpi (D2 x) (D2i x))
           <- eqtpi-pi D1i D2i D.

-app    : eqtpe-to-eqtpi (eqtpe/app DeqtmN DeqtmM)
              D
           <- eqtme-to-eqtmi DeqtmN DeqtmiN
           <- eqtpe-to-eqtpi DeqtmM DeqtmiM
           <- eqtpi-app DeqtmiM DeqtmiN D.

-lam    : eqtpe-to-eqtpi (eqtpe/lam ([x] Deqtm x) Deqtp)
              D
           <- eqtpe-to-eqtpi Deqtp Deqtpi
           <- ({x} eqtpe-to-eqtpi (Deqtm x) (Deqtmi x))
           <- eqtpi-lam Deqtpi Deqtmi D.

-ext    : eqtpe-to-eqtpi (eqtpe/ext ([x] Deqtm x) DofM' DofM)
              D
           <- ekofe-to-ekofi DofM DofiM
           <- ekofe-to-ekofi DofM' DofiM'
           <- ({x} eqtpe-to-eqtpi (Deqtm x) (Deqtmi x))
           <- eqtpi-ext Deqtmi DofiM DofiM' D.

-extw   : eqtpe-to-eqtpi (eqtpe/extw ([x] Deqtm x) Deqtm')
              D
           <- eqtpe-to-eqtpi Deqtm' Deqtmi'
           <- ({x} eqtpe-to-eqtpi (Deqtm x) (Deqtmi x))
           <- eqtpi-extw Deqtmi Deqtmi'
              D.

-beta   : eqtpe-to-eqtpi (eqtpe/beta DofN ([x] DofM x))
              D
           <- eofe-to-eofi DofN DofiN
           <- ({x} ekofe-to-ekofi (DofM x) (DofiM x))
           <- eqtpi-beta DofiN DofiM D.

-sym    : eqtpe-to-eqtpi (eqtpe/sym Deqtp)
              D
           <- eqtpe-to-eqtpi Deqtp Deqtpi
           <- eqtpi-sym Deqtpi D.

-trans  : eqtpe-to-eqtpi (eqtpe/trans D2 D1)
              D
           <- eqtpe-to-eqtpi D1 D1i
           <- eqtpe-to-eqtpi D2 D2i
           <- eqtpi-trans D1i D2i D.

-refl   : eqtpe-to-eqtpi (eqtpe/refl Dof)
              D
           <- ekofe-to-ekofi Dof Dofi
           <- eqtpi-refl Dofi D.

-kcon   : eqtpe-to-eqtpi (eqtpe/kcon Deqtp Deqtm)
              D
           <- eqtpe-to-eqtpi Deqtm Deqtmi
           <- eqkinde-to-eqkindi Deqtp Deqtpi
           <- eqtpi-kcon Deqtmi Deqtpi D.

%%

-type   : eqkinde-to-eqkindi eqkinde/tp D
           <- eqkindi-type _ D.

-pi     : eqkinde-to-eqkindi (eqkinde/pi ([x] D2 x) D1)
              D
           <- eqtpe-to-eqtpi D1 D1i
           <- ({x} eqkinde-to-eqkindi (D2 x) (D2i x))
           <- eqkindi-pi D1i D2i D.

-sym    : eqkinde-to-eqkindi (eqkinde/sym Deqtp)
              D
           <- eqkinde-to-eqkindi Deqtp Deqtpi
           <- eqkindi-sym Deqtpi D.

-trans  : eqkinde-to-eqkindi (eqkinde/trans D2 D1)
              D
           <- eqkinde-to-eqkindi D1 D1i
           <- eqkinde-to-eqkindi D2 D2i
           <- eqkindi-trans D1i D2i D.

-refl   : eqkinde-to-eqkindi (eqkinde/refl Dof)
              D
           <- ewfkinde-to-ewfkindi Dof Dofi
           <- eqkindi-refl Dofi D.


%worlds (ecsig | easig | evar | ebind)
  (eofe-to-eofi _ _)
  (ekofe-to-ekofi _ _)
  (ewfkinde-to-ewfkindi _ _)
  (eqtme-to-eqtmi _ _)
  (eqtpe-to-eqtpi _ _)
  (eqkinde-to-eqkindi _ _).
%total (D1 D2 D3 D4 D5 D6) 
  (eofe-to-eofi D1 _)
  (ekofe-to-ekofi D2 _)
  (ewfkinde-to-ewfkindi D3 _)
  (eqtme-to-eqtmi D4 _)
  (eqtpe-to-eqtpi D5 _)
  (eqkinde-to-eqkindi D6 _).
 
eofe-to-eof : eofe enil M A -> eof M A -> type.
%mode eofe-to-eof +X1 -X2.

-   : eofe-to-eof D D'
       <- eofe-to-eofi D (eofi/nil D').

%worlds (ecsig | easig | evar | ebind) (eofe-to-eof _ _).
%total {} (eofe-to-eof _ _).

ekofe-to-ekof : ekofe enil M A -> ekof M A -> type.
%mode ekofe-to-ekof +X1 -X2.

-   : ekofe-to-ekof D D'
       <- ekofe-to-ekofi D (ekofi/nil D').

%worlds (ecsig | easig | evar | ebind) (ekofe-to-ekof _ _).
%total {} (ekofe-to-ekof _ _).

eqtme-to-eqtm : eqtme enil M N A -> eqtm M N A -> type.
%mode eqtme-to-eqtm +X1 -X2.

- : eqtme-to-eqtm D D'
     <- eqtme-to-eqtmi D (eqtmi/nil D').

%worlds (ecsig | easig | evar | ebind) (eqtme-to-eqtm _ _).
%total {} (eqtme-to-eqtm _ _).

eqtpe-to-eqtp : eqtpe enil M N A -> eqtp M N A -> type.
%mode eqtpe-to-eqtp +X1 -X2.

- : eqtpe-to-eqtp D D'
     <- eqtpe-to-eqtpi D (eqtpi/nil D').

%worlds (ecsig | easig | evar | ebind) (eqtpe-to-eqtp _ _).
%total {} (eqtpe-to-eqtp _ _).

eqkinde-to-eqkind : eqkinde enil M N -> eqkind M N -> type.
%mode eqkinde-to-eqkind +X1 -X2.

- : eqkinde-to-eqkind D D'
     <- eqkinde-to-eqkindi D (eqkindi/nil D').

%worlds (ecsig | easig | evar | ebind) (eqkinde-to-eqkind _ _).
%total {} (eqkinde-to-eqkind _ _).
